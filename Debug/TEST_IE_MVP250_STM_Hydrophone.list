
TEST_IE_MVP250_STM_Hydrophone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b990  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  0800bb84  0800bb84  0000cb84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf00  0800bf00  0000d074  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf00  0800bf00  0000cf00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf08  0800bf08  0000d074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf08  0800bf08  0000cf08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf0c  0800bf0c  0000cf0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800bf10  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000970  20000074  0800bf84  0000d074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009e4  0800bf84  0000d9e4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000d074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b41f  00000000  00000000  0000d0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aad  00000000  00000000  000284c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0002bf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000114d  00000000  00000000  0002d5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002baf7  00000000  00000000  0002e705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fdaa  00000000  00000000  0005a1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010715b  00000000  00000000  00079fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181101  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000629c  00000000  00000000  00181144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001873e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000074 	.word	0x20000074
 8000210:	00000000 	.word	0x00000000
 8000214:	0800bb6c 	.word	0x0800bb6c

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000078 	.word	0x20000078
 8000230:	0800bb6c 	.word	0x0800bb6c

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295
 8000254:	f04f 30ff 	movne.w	r0, #4294967295
 8000258:	f000 b97e 	b.w	8000558 <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__udivmoddi4>:
 8000274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000278:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800027a:	460c      	mov	r4, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14d      	bne.n	800031c <__udivmoddi4+0xa8>
 8000280:	428a      	cmp	r2, r1
 8000282:	460f      	mov	r7, r1
 8000284:	4684      	mov	ip, r0
 8000286:	4696      	mov	lr, r2
 8000288:	fab2 f382 	clz	r3, r2
 800028c:	d960      	bls.n	8000350 <__udivmoddi4+0xdc>
 800028e:	b14b      	cbz	r3, 80002a4 <__udivmoddi4+0x30>
 8000290:	fa02 fe03 	lsl.w	lr, r2, r3
 8000294:	f1c3 0220 	rsb	r2, r3, #32
 8000298:	409f      	lsls	r7, r3
 800029a:	fa00 fc03 	lsl.w	ip, r0, r3
 800029e:	fa20 f202 	lsr.w	r2, r0, r2
 80002a2:	4317      	orrs	r7, r2
 80002a4:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002a8:	fa1f f48e 	uxth.w	r4, lr
 80002ac:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002b0:	fbb7 f1f6 	udiv	r1, r7, r6
 80002b4:	fb06 7711 	mls	r7, r6, r1, r7
 80002b8:	fb01 f004 	mul.w	r0, r1, r4
 80002bc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002c0:	4290      	cmp	r0, r2
 80002c2:	d908      	bls.n	80002d6 <__udivmoddi4+0x62>
 80002c4:	eb1e 0202 	adds.w	r2, lr, r2
 80002c8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002cc:	d202      	bcs.n	80002d4 <__udivmoddi4+0x60>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f200 812d 	bhi.w	800052e <__udivmoddi4+0x2ba>
 80002d4:	4639      	mov	r1, r7
 80002d6:	1a12      	subs	r2, r2, r0
 80002d8:	fa1f fc8c 	uxth.w	ip, ip
 80002dc:	fbb2 f0f6 	udiv	r0, r2, r6
 80002e0:	fb06 2210 	mls	r2, r6, r0, r2
 80002e4:	fb00 f404 	mul.w	r4, r0, r4
 80002e8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80002ec:	4564      	cmp	r4, ip
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x8e>
 80002f0:	eb1e 0c0c 	adds.w	ip, lr, ip
 80002f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x8c>
 80002fa:	4564      	cmp	r4, ip
 80002fc:	f200 811a 	bhi.w	8000534 <__udivmoddi4+0x2c0>
 8000300:	4610      	mov	r0, r2
 8000302:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000306:	ebac 0c04 	sub.w	ip, ip, r4
 800030a:	2100      	movs	r1, #0
 800030c:	b125      	cbz	r5, 8000318 <__udivmoddi4+0xa4>
 800030e:	fa2c f303 	lsr.w	r3, ip, r3
 8000312:	2200      	movs	r2, #0
 8000314:	e9c5 3200 	strd	r3, r2, [r5]
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d905      	bls.n	800032c <__udivmoddi4+0xb8>
 8000320:	b10d      	cbz	r5, 8000326 <__udivmoddi4+0xb2>
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	2100      	movs	r1, #0
 8000328:	4608      	mov	r0, r1
 800032a:	e7f5      	b.n	8000318 <__udivmoddi4+0xa4>
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d14d      	bne.n	80003d0 <__udivmoddi4+0x15c>
 8000334:	42a3      	cmp	r3, r4
 8000336:	f0c0 80f2 	bcc.w	800051e <__udivmoddi4+0x2aa>
 800033a:	4290      	cmp	r0, r2
 800033c:	f080 80ef 	bcs.w	800051e <__udivmoddi4+0x2aa>
 8000340:	4606      	mov	r6, r0
 8000342:	4623      	mov	r3, r4
 8000344:	4608      	mov	r0, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e6      	beq.n	8000318 <__udivmoddi4+0xa4>
 800034a:	e9c5 6300 	strd	r6, r3, [r5]
 800034e:	e7e3      	b.n	8000318 <__udivmoddi4+0xa4>
 8000350:	2b00      	cmp	r3, #0
 8000352:	f040 80a2 	bne.w	800049a <__udivmoddi4+0x226>
 8000356:	1a8a      	subs	r2, r1, r2
 8000358:	ea4f 471e 	mov.w	r7, lr, lsr #16
 800035c:	fa1f f68e 	uxth.w	r6, lr
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 f4f7 	udiv	r4, r2, r7
 8000366:	fb07 2014 	mls	r0, r7, r4, r2
 800036a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb06 f004 	mul.w	r0, r6, r4
 8000376:	4290      	cmp	r0, r2
 8000378:	d90f      	bls.n	800039a <__udivmoddi4+0x126>
 800037a:	eb1e 0202 	adds.w	r2, lr, r2
 800037e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000382:	bf2c      	ite	cs
 8000384:	f04f 0901 	movcs.w	r9, #1
 8000388:	f04f 0900 	movcc.w	r9, #0
 800038c:	4290      	cmp	r0, r2
 800038e:	d903      	bls.n	8000398 <__udivmoddi4+0x124>
 8000390:	f1b9 0f00 	cmp.w	r9, #0
 8000394:	f000 80c8 	beq.w	8000528 <__udivmoddi4+0x2b4>
 8000398:	4644      	mov	r4, r8
 800039a:	1a12      	subs	r2, r2, r0
 800039c:	fa1f fc8c 	uxth.w	ip, ip
 80003a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a4:	fb07 2210 	mls	r2, r7, r0, r2
 80003a8:	fb00 f606 	mul.w	r6, r0, r6
 80003ac:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003b0:	4566      	cmp	r6, ip
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x152>
 80003b4:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x150>
 80003be:	4566      	cmp	r6, ip
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2c6>
 80003c4:	4610      	mov	r0, r2
 80003c6:	ebac 0c06 	sub.w	ip, ip, r6
 80003ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ce:	e79d      	b.n	800030c <__udivmoddi4+0x98>
 80003d0:	f1c1 0620 	rsb	r6, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa04 fe01 	lsl.w	lr, r4, r1
 80003da:	fa22 f706 	lsr.w	r7, r2, r6
 80003de:	fa20 fc06 	lsr.w	ip, r0, r6
 80003e2:	40f4      	lsrs	r4, r6
 80003e4:	408a      	lsls	r2, r1
 80003e6:	431f      	orrs	r7, r3
 80003e8:	ea4e 030c 	orr.w	r3, lr, ip
 80003ec:	fa00 fe01 	lsl.w	lr, r0, r1
 80003f0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003f8:	fa1f fc87 	uxth.w	ip, r7
 80003fc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000400:	fb08 4410 	mls	r4, r8, r0, r4
 8000404:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000408:	fb00 f90c 	mul.w	r9, r0, ip
 800040c:	45a1      	cmp	r9, r4
 800040e:	d90e      	bls.n	800042e <__udivmoddi4+0x1ba>
 8000410:	193c      	adds	r4, r7, r4
 8000412:	f100 3aff 	add.w	sl, r0, #4294967295
 8000416:	bf2c      	ite	cs
 8000418:	f04f 0b01 	movcs.w	fp, #1
 800041c:	f04f 0b00 	movcc.w	fp, #0
 8000420:	45a1      	cmp	r9, r4
 8000422:	d903      	bls.n	800042c <__udivmoddi4+0x1b8>
 8000424:	f1bb 0f00 	cmp.w	fp, #0
 8000428:	f000 8093 	beq.w	8000552 <__udivmoddi4+0x2de>
 800042c:	4650      	mov	r0, sl
 800042e:	eba4 0409 	sub.w	r4, r4, r9
 8000432:	fa1f f983 	uxth.w	r9, r3
 8000436:	fbb4 f3f8 	udiv	r3, r4, r8
 800043a:	fb08 4413 	mls	r4, r8, r3, r4
 800043e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000442:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000446:	45a4      	cmp	ip, r4
 8000448:	d906      	bls.n	8000458 <__udivmoddi4+0x1e4>
 800044a:	193c      	adds	r4, r7, r4
 800044c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000450:	d201      	bcs.n	8000456 <__udivmoddi4+0x1e2>
 8000452:	45a4      	cmp	ip, r4
 8000454:	d87a      	bhi.n	800054c <__udivmoddi4+0x2d8>
 8000456:	4643      	mov	r3, r8
 8000458:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800045c:	eba4 040c 	sub.w	r4, r4, ip
 8000460:	fba0 9802 	umull	r9, r8, r0, r2
 8000464:	4544      	cmp	r4, r8
 8000466:	46cc      	mov	ip, r9
 8000468:	4643      	mov	r3, r8
 800046a:	d302      	bcc.n	8000472 <__udivmoddi4+0x1fe>
 800046c:	d106      	bne.n	800047c <__udivmoddi4+0x208>
 800046e:	45ce      	cmp	lr, r9
 8000470:	d204      	bcs.n	800047c <__udivmoddi4+0x208>
 8000472:	3801      	subs	r0, #1
 8000474:	ebb9 0c02 	subs.w	ip, r9, r2
 8000478:	eb68 0307 	sbc.w	r3, r8, r7
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x222>
 800047e:	ebbe 020c 	subs.w	r2, lr, ip
 8000482:	eb64 0403 	sbc.w	r4, r4, r3
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	fa22 f301 	lsr.w	r3, r2, r1
 800048e:	40cc      	lsrs	r4, r1
 8000490:	431e      	orrs	r6, r3
 8000492:	e9c5 6400 	strd	r6, r4, [r5]
 8000496:	2100      	movs	r1, #0
 8000498:	e73e      	b.n	8000318 <__udivmoddi4+0xa4>
 800049a:	fa02 fe03 	lsl.w	lr, r2, r3
 800049e:	f1c3 0120 	rsb	r1, r3, #32
 80004a2:	fa04 f203 	lsl.w	r2, r4, r3
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004b0:	fa20 f101 	lsr.w	r1, r0, r1
 80004b4:	fa1f f68e 	uxth.w	r6, lr
 80004b8:	fbb4 f0f7 	udiv	r0, r4, r7
 80004bc:	430a      	orrs	r2, r1
 80004be:	fb07 4410 	mls	r4, r7, r0, r4
 80004c2:	0c11      	lsrs	r1, r2, #16
 80004c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004c8:	fb00 f406 	mul.w	r4, r0, r6
 80004cc:	428c      	cmp	r4, r1
 80004ce:	d90e      	bls.n	80004ee <__udivmoddi4+0x27a>
 80004d0:	eb1e 0101 	adds.w	r1, lr, r1
 80004d4:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d8:	bf2c      	ite	cs
 80004da:	f04f 0901 	movcs.w	r9, #1
 80004de:	f04f 0900 	movcc.w	r9, #0
 80004e2:	428c      	cmp	r4, r1
 80004e4:	d902      	bls.n	80004ec <__udivmoddi4+0x278>
 80004e6:	f1b9 0f00 	cmp.w	r9, #0
 80004ea:	d02c      	beq.n	8000546 <__udivmoddi4+0x2d2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	1b09      	subs	r1, r1, r4
 80004f0:	b292      	uxth	r2, r2
 80004f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80004f6:	fb07 1114 	mls	r1, r7, r4, r1
 80004fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fe:	fb04 f106 	mul.w	r1, r4, r6
 8000502:	4291      	cmp	r1, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x2a2>
 8000506:	eb1e 0202 	adds.w	r2, lr, r2
 800050a:	f104 38ff 	add.w	r8, r4, #4294967295
 800050e:	d201      	bcs.n	8000514 <__udivmoddi4+0x2a0>
 8000510:	4291      	cmp	r1, r2
 8000512:	d815      	bhi.n	8000540 <__udivmoddi4+0x2cc>
 8000514:	4644      	mov	r4, r8
 8000516:	1a52      	subs	r2, r2, r1
 8000518:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800051c:	e721      	b.n	8000362 <__udivmoddi4+0xee>
 800051e:	1a86      	subs	r6, r0, r2
 8000520:	eb64 0303 	sbc.w	r3, r4, r3
 8000524:	2001      	movs	r0, #1
 8000526:	e70e      	b.n	8000346 <__udivmoddi4+0xd2>
 8000528:	3c02      	subs	r4, #2
 800052a:	4472      	add	r2, lr
 800052c:	e735      	b.n	800039a <__udivmoddi4+0x126>
 800052e:	3902      	subs	r1, #2
 8000530:	4472      	add	r2, lr
 8000532:	e6d0      	b.n	80002d6 <__udivmoddi4+0x62>
 8000534:	44f4      	add	ip, lr
 8000536:	3802      	subs	r0, #2
 8000538:	e6e3      	b.n	8000302 <__udivmoddi4+0x8e>
 800053a:	44f4      	add	ip, lr
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x152>
 8000540:	3c02      	subs	r4, #2
 8000542:	4472      	add	r2, lr
 8000544:	e7e7      	b.n	8000516 <__udivmoddi4+0x2a2>
 8000546:	3802      	subs	r0, #2
 8000548:	4471      	add	r1, lr
 800054a:	e7d0      	b.n	80004ee <__udivmoddi4+0x27a>
 800054c:	3b02      	subs	r3, #2
 800054e:	443c      	add	r4, r7
 8000550:	e782      	b.n	8000458 <__udivmoddi4+0x1e4>
 8000552:	3802      	subs	r0, #2
 8000554:	443c      	add	r4, r7
 8000556:	e76a      	b.n	800042e <__udivmoddi4+0x1ba>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <config>:
#include <adc_i2c_config.h>



void config(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	@ 0x50
 8000560:	af04      	add	r7, sp, #16
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]

	  // Communiquer en I2C
	  uint16_t i2c_dev_addr = 0x4e<<1;			// device address left-shifted
 8000566:	239c      	movs	r3, #156	@ 0x9c
 8000568:	877b      	strh	r3, [r7, #58]	@ 0x3a
	  uint16_t registerAdressSize = 1;			// size
 800056a:	2301      	movs	r3, #1
 800056c:	873b      	strh	r3, [r7, #56]	@ 0x38
	  uint32_t timeout = 50;					// timeout
 800056e:	2332      	movs	r3, #50	@ 0x32
 8000570:	637b      	str	r3, [r7, #52]	@ 0x34
	  uint16_t Size = 1;						// size
 8000572:	2301      	movs	r3, #1
 8000574:	867b      	strh	r3, [r7, #50]	@ 0x32
	  uint8_t readData;							// variable init
	  char hexStr[7];

	  HAL_UART_Transmit(huart, (uint8_t *)"Verifying I2C com :\r\n", strlen("Verifying I2C com :\r\n"), HAL_MAX_DELAY);
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	2215      	movs	r2, #21
 800057c:	495a      	ldr	r1, [pc, #360]	@ (80006e8 <config+0x18c>)
 800057e:	6838      	ldr	r0, [r7, #0]
 8000580:	f006 ffa0 	bl	80074c4 <HAL_UART_Transmit>

	  // Test I2C com
	  HAL_I2C_Mem_Read(hi2c, i2c_dev_addr | 0x01 , 0x14, registerAdressSize, &readData, Size, timeout);
 8000584:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	b299      	uxth	r1, r3
 800058c:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800058e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000590:	9302      	str	r3, [sp, #8]
 8000592:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	4613      	mov	r3, r2
 800059e:	2214      	movs	r2, #20
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f001 ffe9 	bl	8002578 <HAL_I2C_Mem_Read>
	  if (readData==0x48){HAL_UART_Transmit(huart, (uint8_t *)"Com I2C ok\r\n", strlen("Com I2C ok\r\n"), HAL_MAX_DELAY);}
 80005a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80005aa:	2b48      	cmp	r3, #72	@ 0x48
 80005ac:	d107      	bne.n	80005be <config+0x62>
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	220c      	movs	r2, #12
 80005b4:	494d      	ldr	r1, [pc, #308]	@ (80006ec <config+0x190>)
 80005b6:	6838      	ldr	r0, [r7, #0]
 80005b8:	f006 ff84 	bl	80074c4 <HAL_UART_Transmit>
 80005bc:	e006      	b.n	80005cc <config+0x70>
	  else {HAL_UART_Transmit(huart, (uint8_t *)"Com I2C nok\r\n", strlen("Com I2C nok\r\n"), HAL_MAX_DELAY);}
 80005be:	f04f 33ff 	mov.w	r3, #4294967295
 80005c2:	220d      	movs	r2, #13
 80005c4:	494a      	ldr	r1, [pc, #296]	@ (80006f0 <config+0x194>)
 80005c6:	6838      	ldr	r0, [r7, #0]
 80005c8:	f006 ff7c 	bl	80074c4 <HAL_UART_Transmit>
	  HAL_Delay(100);
 80005cc:	2064      	movs	r0, #100	@ 0x64
 80005ce:	f001 f861 	bl	8001694 <HAL_Delay>
	  //      0x4e 0x14 0x48   # Fs sample rate = 44.1 or 48 kHz                //
	  //      0x4e 0x75 0x60   # Mic bias, PLL, Power up channel                //
	  //      0x4e 0x3d 0xa8   # Gain                                           //
	  // ---------------------------------------------------------------------- //

	  HAL_UART_Transmit(huart, (uint8_t *)"Configuring ADC settings :\r\n", strlen("Configuring ADC settings :\r\n"), HAL_MAX_DELAY);
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	221c      	movs	r2, #28
 80005d8:	4946      	ldr	r1, [pc, #280]	@ (80006f4 <config+0x198>)
 80005da:	6838      	ldr	r0, [r7, #0]
 80005dc:	f006 ff72 	bl	80074c4 <HAL_UART_Transmit>
	  HAL_Delay(50);
 80005e0:	2032      	movs	r0, #50	@ 0x32
 80005e2:	f001 f857 	bl	8001694 <HAL_Delay>
	  uint8_t registers[11] = {0x01, 0x02, 0x73, 0x74, 0x3c, 0x07, 0x6c, 0x6d, 0x14, 0x75, 0x3d};
 80005e6:	4a44      	ldr	r2, [pc, #272]	@ (80006f8 <config+0x19c>)
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ee:	c303      	stmia	r3!, {r0, r1}
 80005f0:	801a      	strh	r2, [r3, #0]
 80005f2:	3302      	adds	r3, #2
 80005f4:	0c12      	lsrs	r2, r2, #16
 80005f6:	701a      	strb	r2, [r3, #0]
	  uint8_t config[11]    = {0x01, 0x81, 0x80, 0x80, 0x00, 0x70, 0x40, 0x7b, 0x48, 0x60, 0xa8};
 80005f8:	4a40      	ldr	r2, [pc, #256]	@ (80006fc <config+0x1a0>)
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000600:	c303      	stmia	r3!, {r0, r1}
 8000602:	801a      	strh	r2, [r3, #0]
 8000604:	3302      	adds	r3, #2
 8000606:	0c12      	lsrs	r2, r2, #16
 8000608:	701a      	strb	r2, [r3, #0]
	  uint8_t writeData;
	  uint16_t registerAddress;

	  for (int i=0; i<sizeof(registers); i++)
 800060a:	2300      	movs	r3, #0
 800060c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800060e:	e063      	b.n	80006d8 <config+0x17c>
	  {
		  registerAddress = registers[i];
 8000610:	f107 021c 	add.w	r2, r7, #28
 8000614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	863b      	strh	r3, [r7, #48]	@ 0x30
		  writeData = config[i];
 800061c:	f107 0210 	add.w	r2, r7, #16
 8000620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000622:	4413      	add	r3, r2
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	73fb      	strb	r3, [r7, #15]
		  HAL_I2C_Mem_Write(hi2c, i2c_dev_addr, registerAddress, registerAdressSize, &writeData, Size, timeout); 		     // write data
 8000628:	8f38      	ldrh	r0, [r7, #56]	@ 0x38
 800062a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800062c:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 800062e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000630:	9302      	str	r3, [sp, #8]
 8000632:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	f107 030f 	add.w	r3, r7, #15
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	4603      	mov	r3, r0
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f001 fe86 	bl	8002350 <HAL_I2C_Mem_Write>
		  HAL_Delay(50);
 8000644:	2032      	movs	r0, #50	@ 0x32
 8000646:	f001 f825 	bl	8001694 <HAL_Delay>
		  HAL_I2C_Mem_Read(hi2c, i2c_dev_addr | 0x01 , registerAddress, registerAdressSize, &readData, Size, timeout);	     // read data
 800064a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	b299      	uxth	r1, r3
 8000652:	8f38      	ldrh	r0, [r7, #56]	@ 0x38
 8000654:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000658:	9302      	str	r3, [sp, #8]
 800065a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	4603      	mov	r3, r0
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f001 ff86 	bl	8002578 <HAL_I2C_Mem_Read>
		  if ((readData==writeData) | (i==0))
 800066c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	429a      	cmp	r2, r3
 8000674:	bf0c      	ite	eq
 8000676:	2301      	moveq	r3, #1
 8000678:	2300      	movne	r3, #0
 800067a:	b2da      	uxtb	r2, r3
 800067c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800067e:	2b00      	cmp	r3, #0
 8000680:	bf0c      	ite	eq
 8000682:	2301      	moveq	r3, #1
 8000684:	2300      	movne	r3, #0
 8000686:	b2db      	uxtb	r3, r3
 8000688:	4313      	orrs	r3, r2
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d016      	beq.n	80006be <config+0x162>
		  {
			  sprintf(hexStr, "0x%02X\r\n", writeData);
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	461a      	mov	r2, r3
 8000694:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000698:	4919      	ldr	r1, [pc, #100]	@ (8000700 <config+0x1a4>)
 800069a:	4618      	mov	r0, r3
 800069c:	f00a fd7a 	bl	800b194 <siprintf>
			  HAL_UART_Transmit(huart, (uint8_t *)hexStr, strlen(hexStr), HAL_MAX_DELAY);
 80006a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fdc5 	bl	8000234 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	6838      	ldr	r0, [r7, #0]
 80006b8:	f006 ff04 	bl	80074c4 <HAL_UART_Transmit>
 80006bc:	e006      	b.n	80006cc <config+0x170>
		  }
		  else
		  {
			  HAL_UART_Transmit(huart, (uint8_t *)"Not ok \r\n", strlen("Not ok \r\n"), HAL_MAX_DELAY);
 80006be:	f04f 33ff 	mov.w	r3, #4294967295
 80006c2:	2209      	movs	r2, #9
 80006c4:	490f      	ldr	r1, [pc, #60]	@ (8000704 <config+0x1a8>)
 80006c6:	6838      	ldr	r0, [r7, #0]
 80006c8:	f006 fefc 	bl	80074c4 <HAL_UART_Transmit>
		  }

		  HAL_Delay(50);
 80006cc:	2032      	movs	r0, #50	@ 0x32
 80006ce:	f000 ffe1 	bl	8001694 <HAL_Delay>
	  for (int i=0; i<sizeof(registers); i++)
 80006d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006d4:	3301      	adds	r3, #1
 80006d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80006d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006da:	2b0a      	cmp	r3, #10
 80006dc:	d998      	bls.n	8000610 <config+0xb4>

	  }
}
 80006de:	bf00      	nop
 80006e0:	bf00      	nop
 80006e2:	3740      	adds	r7, #64	@ 0x40
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	0800bb84 	.word	0x0800bb84
 80006ec:	0800bb9c 	.word	0x0800bb9c
 80006f0:	0800bbac 	.word	0x0800bbac
 80006f4:	0800bbbc 	.word	0x0800bbbc
 80006f8:	0800bbf4 	.word	0x0800bbf4
 80006fc:	0800bc00 	.word	0x0800bc00
 8000700:	0800bbdc 	.word	0x0800bbdc
 8000704:	0800bbe8 	.word	0x0800bbe8

08000708 <myprint>:
	    buffer[9] = '0' + (exponent % 10);  // Unités de l'exposant
	    buffer[10] = ' '; // Fin de la chaîne
	    buffer[11] = '\0';
}

void myprint(const char *fmt, ...) {
 8000708:	b40f      	push	{r0, r1, r2, r3}
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	693a      	ldr	r2, [r7, #16]
 800071a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800071e:	480b      	ldr	r0, [pc, #44]	@ (800074c <myprint+0x44>)
 8000720:	f00a fd84 	bl	800b22c <vsniprintf>
  va_end(args);
  int len = strlen(buffer);
 8000724:	4809      	ldr	r0, [pc, #36]	@ (800074c <myprint+0x44>)
 8000726:	f7ff fd85 	bl	8000234 <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)buffer, len, -1);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	b29a      	uxth	r2, r3
 8000732:	f04f 33ff 	mov.w	r3, #4294967295
 8000736:	4905      	ldr	r1, [pc, #20]	@ (800074c <myprint+0x44>)
 8000738:	4805      	ldr	r0, [pc, #20]	@ (8000750 <myprint+0x48>)
 800073a:	f006 fec3 	bl	80074c4 <HAL_UART_Transmit>
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000748:	b004      	add	sp, #16
 800074a:	4770      	bx	lr
 800074c:	2000074c 	.word	0x2000074c
 8000750:	200000e4 	.word	0x200000e4

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	f5ad 4d88 	sub.w	sp, sp, #17408	@ 0x4400
 800075a:	b090      	sub	sp, #64	@ 0x40
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075e:	f000 ff22 	bl	80015a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000762:	f000 f9e9 	bl	8000b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000766:	f000 fb69 	bl	8000e3c <MX_GPIO_Init>
  MX_DMA_Init();
 800076a:	f000 fb3d 	bl	8000de8 <MX_DMA_Init>
  MX_I2C1_Init();
 800076e:	f000 fa29 	bl	8000bc4 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000772:	f000 fa7b 	bl	8000c6c <MX_LPUART1_UART_Init>
  MX_ICACHE_Init();
 8000776:	f000 fa65 	bl	8000c44 <MX_ICACHE_Init>
  MX_SAI1_Init();
 800077a:	f000 fac3 	bl	8000d04 <MX_SAI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 800077e:	f007 fd51 	bl	8008224 <MX_FATFS_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <main+0x38>
    Error_Handler();
 8000788:	f000 fbd2 	bl	8000f30 <Error_Handler>
  }
  MX_SPI3_Init();
 800078c:	f000 faee 	bl	8000d6c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2180      	movs	r1, #128	@ 0x80
 8000794:	48c6      	ldr	r0, [pc, #792]	@ (8000ab0 <main+0x35c>)
 8000796:	f001 fd27 	bl	80021e8 <HAL_GPIO_WritePin>

  myprint("\r\nSTM32L552 is connected \r\n");
 800079a:	48c6      	ldr	r0, [pc, #792]	@ (8000ab4 <main+0x360>)
 800079c:	f7ff ffb4 	bl	8000708 <myprint>
  HAL_Delay(200);
 80007a0:	20c8      	movs	r0, #200	@ 0xc8
 80007a2:	f000 ff77 	bl	8001694 <HAL_Delay>

  // ---------------------------------------------------------------------------------------------- //
  // ------------------------------  Configure ADC settings with I2C ------------------------------ //
  // ---------------------------------------------------------------------------------------------- //
  config(&hi2c1, &hlpuart1);
 80007a6:	49c4      	ldr	r1, [pc, #784]	@ (8000ab8 <main+0x364>)
 80007a8:	48c4      	ldr	r0, [pc, #784]	@ (8000abc <main+0x368>)
 80007aa:	f7ff fed7 	bl	800055c <config>



	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);  // Exemple de priorité plus basse pour le DMA
 80007ae:	2200      	movs	r2, #0
 80007b0:	2102      	movs	r1, #2
 80007b2:	201d      	movs	r0, #29
 80007b4:	f001 f86d 	bl	8001892 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);  // Priorité plus haute pour la carte SD
 80007b8:	2200      	movs	r2, #0
 80007ba:	2101      	movs	r1, #1
 80007bc:	203b      	movs	r0, #59	@ 0x3b
 80007be:	f001 f868 	bl	8001892 <HAL_NVIC_SetPriority>


  // ---------------------------------------------------------------------------------------------- //
  // -----------------------------------  Initialize SD card  ------------------------------------- //
  // ---------------------------------------------------------------------------------------------- //
	myprint("SD card demo \r\n");
 80007c2:	48bf      	ldr	r0, [pc, #764]	@ (8000ac0 <main+0x36c>)
 80007c4:	f7ff ffa0 	bl	8000708 <myprint>

	// Open the file system - mount the drive
	fres = f_mount(&FatFs, "", 1); // 1 = mount now
 80007c8:	2201      	movs	r2, #1
 80007ca:	49be      	ldr	r1, [pc, #760]	@ (8000ac4 <main+0x370>)
 80007cc:	48be      	ldr	r0, [pc, #760]	@ (8000ac8 <main+0x374>)
 80007ce:	f009 ffb3 	bl	800a738 <f_mount>
 80007d2:	4603      	mov	r3, r0
 80007d4:	461a      	mov	r2, r3
 80007d6:	4bbd      	ldr	r3, [pc, #756]	@ (8000acc <main+0x378>)
 80007d8:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 80007da:	4bbc      	ldr	r3, [pc, #752]	@ (8000acc <main+0x378>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d007      	beq.n	80007f2 <main+0x9e>
	myprint("f_mount error (%i)\r\n", fres);
 80007e2:	4bba      	ldr	r3, [pc, #744]	@ (8000acc <main+0x378>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4619      	mov	r1, r3
 80007e8:	48b9      	ldr	r0, [pc, #740]	@ (8000ad0 <main+0x37c>)
 80007ea:	f7ff ff8d 	bl	8000708 <myprint>
	while(1);
 80007ee:	bf00      	nop
 80007f0:	e7fd      	b.n	80007ee <main+0x9a>
	}

	// Statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;
	FATFS* getFreeFs;
	fres = f_getfree("", &free_clusters, &getFreeFs);
 80007f2:	f507 4288 	add.w	r2, r7, #17408	@ 0x4400
 80007f6:	f102 0220 	add.w	r2, r2, #32
 80007fa:	f507 4388 	add.w	r3, r7, #17408	@ 0x4400
 80007fe:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000802:	4619      	mov	r1, r3
 8000804:	48af      	ldr	r0, [pc, #700]	@ (8000ac4 <main+0x370>)
 8000806:	f00a fbb4 	bl	800af72 <f_getfree>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	4baf      	ldr	r3, [pc, #700]	@ (8000acc <main+0x378>)
 8000810:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8000812:	4bae      	ldr	r3, [pc, #696]	@ (8000acc <main+0x378>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d007      	beq.n	800082a <main+0xd6>
	myprint("f_getfree error (%i)\r\n", fres);
 800081a:	4bac      	ldr	r3, [pc, #688]	@ (8000acc <main+0x378>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	4619      	mov	r1, r3
 8000820:	48ac      	ldr	r0, [pc, #688]	@ (8000ad4 <main+0x380>)
 8000822:	f7ff ff71 	bl	8000708 <myprint>
	while(1);
 8000826:	bf00      	nop
 8000828:	e7fd      	b.n	8000826 <main+0xd2>
	}
	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800082a:	f507 4388 	add.w	r3, r7, #17408	@ 0x4400
 800082e:	f103 0320 	add.w	r3, r3, #32
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	3b02      	subs	r3, #2
 8000838:	f507 4288 	add.w	r2, r7, #17408	@ 0x4400
 800083c:	f102 0220 	add.w	r2, r2, #32
 8000840:	6812      	ldr	r2, [r2, #0]
 8000842:	8952      	ldrh	r2, [r2, #10]
 8000844:	fb02 f303 	mul.w	r3, r2, r3
 8000848:	f507 4288 	add.w	r2, r7, #17408	@ 0x4400
 800084c:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8000850:	6013      	str	r3, [r2, #0]
	free_sectors = free_clusters * getFreeFs->csize;
 8000852:	f507 4388 	add.w	r3, r7, #17408	@ 0x4400
 8000856:	f103 0320 	add.w	r3, r3, #32
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	895b      	ldrh	r3, [r3, #10]
 800085e:	461a      	mov	r2, r3
 8000860:	f507 4388 	add.w	r3, r7, #17408	@ 0x4400
 8000864:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	fb02 f303 	mul.w	r3, r2, r3
 800086e:	f507 4288 	add.w	r2, r7, #17408	@ 0x4400
 8000872:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8000876:	6013      	str	r3, [r2, #0]
	myprint("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8000878:	f507 4388 	add.w	r3, r7, #17408	@ 0x4400
 800087c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	0859      	lsrs	r1, r3, #1
 8000884:	f507 4388 	add.w	r3, r7, #17408	@ 0x4400
 8000888:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	085b      	lsrs	r3, r3, #1
 8000890:	461a      	mov	r2, r3
 8000892:	4891      	ldr	r0, [pc, #580]	@ (8000ad8 <main+0x384>)
 8000894:	f7ff ff38 	bl	8000708 <myprint>


	// Open file
	fres = f_open(&fil, "record.bin", FA_WRITE | FA_CREATE_ALWAYS);
 8000898:	220a      	movs	r2, #10
 800089a:	4990      	ldr	r1, [pc, #576]	@ (8000adc <main+0x388>)
 800089c:	4890      	ldr	r0, [pc, #576]	@ (8000ae0 <main+0x38c>)
 800089e:	f009 ff91 	bl	800a7c4 <f_open>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b89      	ldr	r3, [pc, #548]	@ (8000acc <main+0x378>)
 80008a8:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK)
 80008aa:	4b88      	ldr	r3, [pc, #544]	@ (8000acc <main+0x378>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d103      	bne.n	80008ba <main+0x166>
	{
		myprint("I was able to open 'record.bin' for writing\r\n");
 80008b2:	488c      	ldr	r0, [pc, #560]	@ (8000ae4 <main+0x390>)
 80008b4:	f7ff ff28 	bl	8000708 <myprint>
 80008b8:	e005      	b.n	80008c6 <main+0x172>
	}
	else
	{
		myprint("f_open error (%i)\r\n", fres);
 80008ba:	4b84      	ldr	r3, [pc, #528]	@ (8000acc <main+0x378>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	4619      	mov	r1, r3
 80008c0:	4889      	ldr	r0, [pc, #548]	@ (8000ae8 <main+0x394>)
 80008c2:	f7ff ff21 	bl	8000708 <myprint>
	}
	fileOpenFlag = 1;
 80008c6:	4b89      	ldr	r3, [pc, #548]	@ (8000aec <main+0x398>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	601a      	str	r2, [r3, #0]


	float data[4096] = {1.2, 1.6, -0.5, 3.2};
 80008cc:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80008d0:	3b20      	subs	r3, #32
 80008d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f00a fcb5 	bl	800b248 <memset>
 80008de:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80008e2:	461a      	mov	r2, r3
 80008e4:	4b82      	ldr	r3, [pc, #520]	@ (8000af0 <main+0x39c>)
 80008e6:	f842 3c20 	str.w	r3, [r2, #-32]
 80008ea:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b80      	ldr	r3, [pc, #512]	@ (8000af4 <main+0x3a0>)
 80008f2:	f842 3c1c 	str.w	r3, [r2, #-28]
 80008f6:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80008fa:	461a      	mov	r2, r3
 80008fc:	f04f 433f 	mov.w	r3, #3204448256	@ 0xbf000000
 8000900:	f842 3c18 	str.w	r3, [r2, #-24]
 8000904:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000908:	461a      	mov	r2, r3
 800090a:	4b7b      	ldr	r3, [pc, #492]	@ (8000af8 <main+0x3a4>)
 800090c:	f842 3c14 	str.w	r3, [r2, #-20]


	UINT bytesWrote;
	uint32_t t0 = HAL_GetTick();    // ms
 8000910:	f000 feb4 	bl	800167c <HAL_GetTick>
 8000914:	f507 4388 	add.w	r3, r7, #17408	@ 0x4400
 8000918:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800091c:	6018      	str	r0, [r3, #0]
	fres = f_write(&fil, data, sizeof(data), &bytesWrote);
 800091e:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000922:	3b24      	subs	r3, #36	@ 0x24
 8000924:	f507 6188 	add.w	r1, r7, #1088	@ 0x440
 8000928:	3920      	subs	r1, #32
 800092a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800092e:	486c      	ldr	r0, [pc, #432]	@ (8000ae0 <main+0x38c>)
 8000930:	f00a f902 	bl	800ab38 <f_write>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	4b64      	ldr	r3, [pc, #400]	@ (8000acc <main+0x378>)
 800093a:	701a      	strb	r2, [r3, #0]
	f_sync(&fil);
 800093c:	4868      	ldr	r0, [pc, #416]	@ (8000ae0 <main+0x38c>)
 800093e:	f00a fa70 	bl	800ae22 <f_sync>
	uint32_t t = HAL_GetTick();
 8000942:	f000 fe9b 	bl	800167c <HAL_GetTick>
 8000946:	f507 4388 	add.w	r3, r7, #17408	@ 0x4400
 800094a:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800094e:	6018      	str	r0, [r3, #0]
	if(fres == FR_OK)
 8000950:	4b5e      	ldr	r3, [pc, #376]	@ (8000acc <main+0x378>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d108      	bne.n	800096a <main+0x216>
	{
		myprint("Wrote %i bytes to 'record.bin'!\r\n", bytesWrote);
 8000958:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800095c:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000960:	4619      	mov	r1, r3
 8000962:	4866      	ldr	r0, [pc, #408]	@ (8000afc <main+0x3a8>)
 8000964:	f7ff fed0 	bl	8000708 <myprint>
 8000968:	e005      	b.n	8000976 <main+0x222>
	}
	else
	{
		myprint("f_write error (%i)\r\n", fres);
 800096a:	4b58      	ldr	r3, [pc, #352]	@ (8000acc <main+0x378>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4619      	mov	r1, r3
 8000970:	4863      	ldr	r0, [pc, #396]	@ (8000b00 <main+0x3ac>)
 8000972:	f7ff fec9 	bl	8000708 <myprint>
	}

	//f_close(&fil);

	uint32_t delta = t-t0; 				//ms
 8000976:	f507 4388 	add.w	r3, r7, #17408	@ 0x4400
 800097a:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	f507 4388 	add.w	r3, r7, #17408	@ 0x4400
 8000984:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	f507 4288 	add.w	r2, r7, #17408	@ 0x4400
 8000990:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8000994:	6013      	str	r3, [r2, #0]
	char myStr[20];
	sprintf(myStr, "%lu ms to save data\r\n", delta);
 8000996:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800099a:	3b38      	subs	r3, #56	@ 0x38
 800099c:	f507 4288 	add.w	r2, r7, #17408	@ 0x4400
 80009a0:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80009a4:	6812      	ldr	r2, [r2, #0]
 80009a6:	4957      	ldr	r1, [pc, #348]	@ (8000b04 <main+0x3b0>)
 80009a8:	4618      	mov	r0, r3
 80009aa:	f00a fbf3 	bl	800b194 <siprintf>

	myprint(myStr);
 80009ae:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80009b2:	3b38      	subs	r3, #56	@ 0x38
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fea7 	bl	8000708 <myprint>


	//f_close(&fil);
	HAL_Delay(50);
 80009ba:	2032      	movs	r0, #50	@ 0x32
 80009bc:	f000 fe6a 	bl	8001694 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t currentFileSize = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f507 4288 	add.w	r2, r7, #17408	@ 0x4400
 80009c6:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80009ca:	6013      	str	r3, [r2, #0]
  while (1)
  {
	dataReadyFlag = 1;
 80009cc:	4b4e      	ldr	r3, [pc, #312]	@ (8000b08 <main+0x3b4>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
//	}

	// ----------------------------------------------------------------------------------- //
	// --------------------------- Taille maximale atteinte ------------------------------ //
	// ----------------------------------------------------------------------------------- //
	if ( currentFileSize > 20 - 1 /*2^32/((BUFFER_SIZE/2)*(BIT_DEPTH/8)) - 2*/ )
 80009d2:	f507 4388 	add.w	r3, r7, #17408	@ 0x4400
 80009d6:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b13      	cmp	r3, #19
 80009de:	d90c      	bls.n	80009fa <main+0x2a6>
	{
	// Stop I2S
	HAL_SAI_DMAStop(&hsai_BlockA1);
 80009e0:	484a      	ldr	r0, [pc, #296]	@ (8000b0c <main+0x3b8>)
 80009e2:	f005 fb57 	bl	8006094 <HAL_SAI_DMAStop>

	// Ferme le fichier
	f_close(&fil);
 80009e6:	483e      	ldr	r0, [pc, #248]	@ (8000ae0 <main+0x38c>)
 80009e8:	f00a fa99 	bl	800af1e <f_close>

	// De-mount the drive
	f_mount(NULL, "", 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	4935      	ldr	r1, [pc, #212]	@ (8000ac4 <main+0x370>)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f009 fea1 	bl	800a738 <f_mount>


	while (1);
 80009f6:	bf00      	nop
 80009f8:	e7fd      	b.n	80009f6 <main+0x2a2>
	}

	if (dataReadyFlag)     // & (currentFileSize<10000)
 80009fa:	4b43      	ldr	r3, [pc, #268]	@ (8000b08 <main+0x3b4>)
 80009fc:	f993 3000 	ldrsb.w	r3, [r3]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0e3      	beq.n	80009cc <main+0x278>
		 {
			myprint("ok\r\n");
 8000a04:	4842      	ldr	r0, [pc, #264]	@ (8000b10 <main+0x3bc>)
 8000a06:	f7ff fe7f 	bl	8000708 <myprint>
			//processData(/*data*/);

			dataReadyFlag = 0;
 8000a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b08 <main+0x3b4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
			currentFileSize++;
 8000a10:	f507 4388 	add.w	r3, r7, #17408	@ 0x4400
 8000a14:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	f507 4288 	add.w	r2, r7, #17408	@ 0x4400
 8000a20:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8000a24:	6013      	str	r3, [r2, #0]
//				myprint("f_write error (%i)\r\n", fres);
//			}

			//fres = f_open(&fil, "record.bin", FA_WRITE);
			//int32_t tempBuffer[BUFFER_SIZE/2];
			float data[BUFFER_SIZE/2] = {1.2, 1.6, -0.5, 3.2};
 8000a26:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000a2a:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a34:	461a      	mov	r2, r3
 8000a36:	2100      	movs	r1, #0
 8000a38:	f00a fc06 	bl	800b248 <memset>
 8000a3c:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000a40:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8000a44:	4a2a      	ldr	r2, [pc, #168]	@ (8000af0 <main+0x39c>)
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000a4c:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8000a50:	4a28      	ldr	r2, [pc, #160]	@ (8000af4 <main+0x3a0>)
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000a58:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8000a5c:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000a66:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8000a6a:	4a23      	ldr	r2, [pc, #140]	@ (8000af8 <main+0x3a4>)
 8000a6c:	60da      	str	r2, [r3, #12]
			//inBufPtr = (volatile int32_t *) &data[0];
			inBufPtr = &data[0];
 8000a6e:	4a29      	ldr	r2, [pc, #164]	@ (8000b14 <main+0x3c0>)
 8000a70:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a74:	3b3c      	subs	r3, #60	@ 0x3c
 8000a76:	6013      	str	r3, [r2, #0]
			//memcpy(tempBuffer, (const int32_t *)inBufPtr, (BUFFER_SIZE/2)*4);

			UINT bytesWrote;
			fres = f_write(&fil, (const int32_t *)inBufPtr, BUFFER_SIZE/2, &bytesWrote);
 8000a78:	4b26      	ldr	r3, [pc, #152]	@ (8000b14 <main+0x3c0>)
 8000a7a:	6819      	ldr	r1, [r3, #0]
 8000a7c:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000a80:	3b3c      	subs	r3, #60	@ 0x3c
 8000a82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a86:	4816      	ldr	r0, [pc, #88]	@ (8000ae0 <main+0x38c>)
 8000a88:	f00a f856 	bl	800ab38 <f_write>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	461a      	mov	r2, r3
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <main+0x378>)
 8000a92:	701a      	strb	r2, [r3, #0]
			if(fres == FR_OK)
 8000a94:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <main+0x378>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d13d      	bne.n	8000b18 <main+0x3c4>
			{
				myprint("Wrote %i bytes to 'record.bin'!\r\n", bytesWrote);
 8000a9c:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000aa0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4815      	ldr	r0, [pc, #84]	@ (8000afc <main+0x3a8>)
 8000aa8:	f7ff fe2e 	bl	8000708 <myprint>
 8000aac:	e03a      	b.n	8000b24 <main+0x3d0>
 8000aae:	bf00      	nop
 8000ab0:	42020400 	.word	0x42020400
 8000ab4:	0800bc2c 	.word	0x0800bc2c
 8000ab8:	200000e4 	.word	0x200000e4
 8000abc:	20000090 	.word	0x20000090
 8000ac0:	0800bc48 	.word	0x0800bc48
 8000ac4:	0800bc58 	.word	0x0800bc58
 8000ac8:	200002e8 	.word	0x200002e8
 8000acc:	20000748 	.word	0x20000748
 8000ad0:	0800bc5c 	.word	0x0800bc5c
 8000ad4:	0800bc74 	.word	0x0800bc74
 8000ad8:	0800bc8c 	.word	0x0800bc8c
 8000adc:	0800bcd4 	.word	0x0800bcd4
 8000ae0:	20000518 	.word	0x20000518
 8000ae4:	0800bce0 	.word	0x0800bce0
 8000ae8:	0800bd10 	.word	0x0800bd10
 8000aec:	200002e4 	.word	0x200002e4
 8000af0:	3f99999a 	.word	0x3f99999a
 8000af4:	3fcccccd 	.word	0x3fcccccd
 8000af8:	404ccccd 	.word	0x404ccccd
 8000afc:	0800bd24 	.word	0x0800bd24
 8000b00:	0800bd48 	.word	0x0800bd48
 8000b04:	0800bd60 	.word	0x0800bd60
 8000b08:	200002e0 	.word	0x200002e0
 8000b0c:	20000178 	.word	0x20000178
 8000b10:	0800bd78 	.word	0x0800bd78
 8000b14:	200002dc 	.word	0x200002dc
			}
			else
			{
				myprint("f_write error (%i)\r\n", fres);
 8000b18:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <main+0x3d8>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <main+0x3dc>)
 8000b20:	f7ff fdf2 	bl	8000708 <myprint>
//			{
//				myprint("f_write error (%i)\r\n", fres);
//			}


			myprint("ok2\r\n");
 8000b24:	4803      	ldr	r0, [pc, #12]	@ (8000b34 <main+0x3e0>)
 8000b26:	f7ff fdef 	bl	8000708 <myprint>
	dataReadyFlag = 1;
 8000b2a:	e74f      	b.n	80009cc <main+0x278>
 8000b2c:	20000748 	.word	0x20000748
 8000b30:	0800bd48 	.word	0x0800bd48
 8000b34:	0800bd80 	.word	0x0800bd80

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b098      	sub	sp, #96	@ 0x60
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	2248      	movs	r2, #72	@ 0x48
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f00a fb7e 	bl	800b248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b5a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b5e:	f002 f9bd 	bl	8002edc <HAL_PWREx_ControlVoltageScaling>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b68:	f000 f9e2 	bl	8000f30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b70:	2301      	movs	r3, #1
 8000b72:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000b78:	23b0      	movs	r3, #176	@ 0xb0
 8000b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b80:	f107 0318 	add.w	r3, r7, #24
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 fa49 	bl	800301c <HAL_RCC_OscConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000b90:	f000 f9ce 	bl	8000f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b94:	230f      	movs	r3, #15
 8000b96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2102      	movs	r1, #2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f002 ff0b 	bl	80039c8 <HAL_RCC_ClockConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bb8:	f000 f9ba 	bl	8000f30 <Error_Handler>
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3760      	adds	r7, #96	@ 0x60
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000bca:	4a1c      	ldr	r2, [pc, #112]	@ (8000c3c <MX_I2C1_Init+0x78>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000bce:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c40 <MX_I2C1_Init+0x7c>)
 8000bd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bda:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be0:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bec:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bfe:	480e      	ldr	r0, [pc, #56]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000c00:	f001 fb0a 	bl	8002218 <HAL_I2C_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c0a:	f000 f991 	bl	8000f30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000c12:	f002 f88d 	bl	8002d30 <HAL_I2CEx_ConfigAnalogFilter>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c1c:	f000 f988 	bl	8000f30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c20:	2100      	movs	r1, #0
 8000c22:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000c24:	f002 f8cf 	bl	8002dc6 <HAL_I2CEx_ConfigDigitalFilter>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c2e:	f000 f97f 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000090 	.word	0x20000090
 8000c3c:	40005400 	.word	0x40005400
 8000c40:	20303e5d 	.word	0x20303e5d

08000c44 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f002 f909 	bl	8002e60 <HAL_ICACHE_ConfigAssociativityMode>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000c54:	f000 f96c 	bl	8000f30 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000c58:	f002 f922 	bl	8002ea0 <HAL_ICACHE_Enable>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000c62:	f000 f965 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c70:	4b22      	ldr	r3, [pc, #136]	@ (8000cfc <MX_LPUART1_UART_Init+0x90>)
 8000c72:	4a23      	ldr	r2, [pc, #140]	@ (8000d00 <MX_LPUART1_UART_Init+0x94>)
 8000c74:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 460800;
 8000c76:	4b21      	ldr	r3, [pc, #132]	@ (8000cfc <MX_LPUART1_UART_Init+0x90>)
 8000c78:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8000c7c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cfc <MX_LPUART1_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <MX_LPUART1_UART_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <MX_LPUART1_UART_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	@ (8000cfc <MX_LPUART1_UART_Init+0x90>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <MX_LPUART1_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	@ (8000cfc <MX_LPUART1_UART_Init+0x90>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <MX_LPUART1_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <MX_LPUART1_UART_Init+0x90>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000cae:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <MX_LPUART1_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000cb4:	4811      	ldr	r0, [pc, #68]	@ (8000cfc <MX_LPUART1_UART_Init+0x90>)
 8000cb6:	f006 fbb5 	bl	8007424 <HAL_UART_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cc0:	f000 f936 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <MX_LPUART1_UART_Init+0x90>)
 8000cc8:	f007 f9e2 	bl	8008090 <HAL_UARTEx_SetTxFifoThreshold>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cd2:	f000 f92d 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4808      	ldr	r0, [pc, #32]	@ (8000cfc <MX_LPUART1_UART_Init+0x90>)
 8000cda:	f007 fa17 	bl	800810c <HAL_UARTEx_SetRxFifoThreshold>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ce4:	f000 f924 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <MX_LPUART1_UART_Init+0x90>)
 8000cea:	f007 f998 	bl	800801e <HAL_UARTEx_DisableFifoMode>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cf4:	f000 f91c 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200000e4 	.word	0x200000e4
 8000d00:	40008000 	.word	0x40008000

08000d04 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000d08:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <MX_SAI1_Init+0x60>)
 8000d0a:	4a17      	ldr	r2, [pc, #92]	@ (8000d68 <MX_SAI1_Init+0x64>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <MX_SAI1_Init+0x60>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d14:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <MX_SAI1_Init+0x60>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8000d1a:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <MX_SAI1_Init+0x60>)
 8000d1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d20:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d22:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <MX_SAI1_Init+0x60>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <MX_SAI1_Init+0x60>)
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <MX_SAI1_Init+0x60>)
 8000d30:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000d34:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <MX_SAI1_Init+0x60>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <MX_SAI1_Init+0x60>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d42:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <MX_SAI1_Init+0x60>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 8) != HAL_OK)
 8000d48:	2308      	movs	r3, #8
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <MX_SAI1_Init+0x60>)
 8000d50:	f004 ff7e 	bl	8005c50 <HAL_SAI_InitProtocol>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_SAI1_Init+0x5a>
  {
    Error_Handler();
 8000d5a:	f000 f8e9 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000178 	.word	0x20000178
 8000d68:	40015404 	.word	0x40015404

08000d6c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <MX_SPI3_Init+0x74>)
 8000d72:	4a1c      	ldr	r2, [pc, #112]	@ (8000de4 <MX_SPI3_Init+0x78>)
 8000d74:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <MX_SPI3_Init+0x74>)
 8000d78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d7c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <MX_SPI3_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d84:	4b16      	ldr	r3, [pc, #88]	@ (8000de0 <MX_SPI3_Init+0x74>)
 8000d86:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000d8a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <MX_SPI3_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d92:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <MX_SPI3_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d98:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <MX_SPI3_Init+0x74>)
 8000d9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d9e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <MX_SPI3_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <MX_SPI3_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <MX_SPI3_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <MX_SPI3_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <MX_SPI3_Init+0x74>)
 8000dba:	2207      	movs	r2, #7
 8000dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <MX_SPI3_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <MX_SPI3_Init+0x74>)
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_SPI3_Init+0x74>)
 8000dcc:	f005 fd8b 	bl	80068e6 <HAL_SPI_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000dd6:	f000 f8ab 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000278 	.word	0x20000278
 8000de4:	40003c00 	.word	0x40003c00

08000de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000dee:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <MX_DMA_Init+0x50>)
 8000df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000df2:	4a11      	ldr	r2, [pc, #68]	@ (8000e38 <MX_DMA_Init+0x50>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <MX_DMA_Init+0x50>)
 8000dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e06:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <MX_DMA_Init+0x50>)
 8000e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e38 <MX_DMA_Init+0x50>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e12:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <MX_DMA_Init+0x50>)
 8000e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	201d      	movs	r0, #29
 8000e24:	f000 fd35 	bl	8001892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e28:	201d      	movs	r0, #29
 8000e2a:	f000 fd4c 	bl	80018c6 <HAL_NVIC_EnableIRQ>

}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000

08000e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	@ 0x28
 8000e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e52:	4b34      	ldr	r3, [pc, #208]	@ (8000f24 <MX_GPIO_Init+0xe8>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	4a33      	ldr	r2, [pc, #204]	@ (8000f24 <MX_GPIO_Init+0xe8>)
 8000e58:	f043 0310 	orr.w	r3, r3, #16
 8000e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5e:	4b31      	ldr	r3, [pc, #196]	@ (8000f24 <MX_GPIO_Init+0xe8>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f24 <MX_GPIO_Init+0xe8>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6e:	4a2d      	ldr	r2, [pc, #180]	@ (8000f24 <MX_GPIO_Init+0xe8>)
 8000e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e76:	4b2b      	ldr	r3, [pc, #172]	@ (8000f24 <MX_GPIO_Init+0xe8>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000e82:	f002 f887 	bl	8002f94 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	4b27      	ldr	r3, [pc, #156]	@ (8000f24 <MX_GPIO_Init+0xe8>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	4a26      	ldr	r2, [pc, #152]	@ (8000f24 <MX_GPIO_Init+0xe8>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e92:	4b24      	ldr	r3, [pc, #144]	@ (8000f24 <MX_GPIO_Init+0xe8>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9e:	4b21      	ldr	r3, [pc, #132]	@ (8000f24 <MX_GPIO_Init+0xe8>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	4a20      	ldr	r2, [pc, #128]	@ (8000f24 <MX_GPIO_Init+0xe8>)
 8000ea4:	f043 0308 	orr.w	r3, r3, #8
 8000ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8000f24 <MX_GPIO_Init+0xe8>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <MX_GPIO_Init+0xe8>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	4a1a      	ldr	r2, [pc, #104]	@ (8000f24 <MX_GPIO_Init+0xe8>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec2:	4b18      	ldr	r3, [pc, #96]	@ (8000f24 <MX_GPIO_Init+0xe8>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	4815      	ldr	r0, [pc, #84]	@ (8000f28 <MX_GPIO_Init+0xec>)
 8000ed4:	f001 f988 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2180      	movs	r1, #128	@ 0x80
 8000edc:	4813      	ldr	r0, [pc, #76]	@ (8000f2c <MX_GPIO_Init+0xf0>)
 8000ede:	f001 f983 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480b      	ldr	r0, [pc, #44]	@ (8000f28 <MX_GPIO_Init+0xec>)
 8000efa:	f000 fff5 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000efe:	2380      	movs	r3, #128	@ 0x80
 8000f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <MX_GPIO_Init+0xf0>)
 8000f16:	f000 ffe7 	bl	8001ee8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f1a:	bf00      	nop
 8000f1c:	3728      	adds	r7, #40	@ 0x28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	42020c00 	.word	0x42020c00
 8000f2c:	42020400 	.word	0x42020400

08000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <Error_Handler+0x8>

08000f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <HAL_MspInit+0x44>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f46:	4a0e      	ldr	r2, [pc, #56]	@ (8000f80 <HAL_MspInit+0x44>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <HAL_MspInit+0x44>)
 8000f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <HAL_MspInit+0x44>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5e:	4a08      	ldr	r2, [pc, #32]	@ (8000f80 <HAL_MspInit+0x44>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f64:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_MspInit+0x44>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f72:	f002 f81f 	bl	8002fb4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000

08000f84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0ae      	sub	sp, #184	@ 0xb8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	2294      	movs	r2, #148	@ 0x94
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f00a f94f 	bl	800b248 <memset>
  if(hi2c->Instance==I2C1)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a21      	ldr	r2, [pc, #132]	@ (8001034 <HAL_I2C_MspInit+0xb0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d13b      	bne.n	800102c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fb4:	2340      	movs	r3, #64	@ 0x40
 8000fb6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 ffe1 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fcc:	f7ff ffb0 	bl	8000f30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd0:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <HAL_I2C_MspInit+0xb4>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd4:	4a18      	ldr	r2, [pc, #96]	@ (8001038 <HAL_I2C_MspInit+0xb4>)
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
 8000fda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fdc:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <HAL_I2C_MspInit+0xb4>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fe8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff0:	2312      	movs	r3, #18
 8000ff2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001002:	2304      	movs	r3, #4
 8001004:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001008:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800100c:	4619      	mov	r1, r3
 800100e:	480b      	ldr	r0, [pc, #44]	@ (800103c <HAL_I2C_MspInit+0xb8>)
 8001010:	f000 ff6a 	bl	8001ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <HAL_I2C_MspInit+0xb4>)
 8001016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001018:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <HAL_I2C_MspInit+0xb4>)
 800101a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800101e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <HAL_I2C_MspInit+0xb4>)
 8001022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800102c:	bf00      	nop
 800102e:	37b8      	adds	r7, #184	@ 0xb8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40005400 	.word	0x40005400
 8001038:	40021000 	.word	0x40021000
 800103c:	42020400 	.word	0x42020400

08001040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b0ae      	sub	sp, #184	@ 0xb8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	2294      	movs	r2, #148	@ 0x94
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f00a f8f1 	bl	800b248 <memset>
  if(huart->Instance==LPUART1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a22      	ldr	r2, [pc, #136]	@ (80010f4 <HAL_UART_MspInit+0xb4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d13d      	bne.n	80010ec <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001070:	2320      	movs	r3, #32
 8001072:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001074:	2300      	movs	r3, #0
 8001076:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4618      	mov	r0, r3
 800107e:	f002 ff83 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001088:	f7ff ff52 	bl	8000f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800108c:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <HAL_UART_MspInit+0xb8>)
 800108e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001090:	4a19      	ldr	r2, [pc, #100]	@ (80010f8 <HAL_UART_MspInit+0xb8>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <HAL_UART_MspInit+0xb8>)
 800109a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <HAL_UART_MspInit+0xb8>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a8:	4a13      	ldr	r2, [pc, #76]	@ (80010f8 <HAL_UART_MspInit+0xb8>)
 80010aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <HAL_UART_MspInit+0xb8>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80010bc:	f001 ff6a 	bl	8002f94 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80010c0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80010c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80010da:	2308      	movs	r3, #8
 80010dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010e4:	4619      	mov	r1, r3
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <HAL_UART_MspInit+0xbc>)
 80010e8:	f000 fefe 	bl	8001ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	37b8      	adds	r7, #184	@ 0xb8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40008000 	.word	0x40008000
 80010f8:	40021000 	.word	0x40021000
 80010fc:	42021800 	.word	0x42021800

08001100 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	@ 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a17      	ldr	r2, [pc, #92]	@ (800117c <HAL_SPI_MspInit+0x7c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d128      	bne.n	8001174 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001122:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <HAL_SPI_MspInit+0x80>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001126:	4a16      	ldr	r2, [pc, #88]	@ (8001180 <HAL_SPI_MspInit+0x80>)
 8001128:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800112c:	6593      	str	r3, [r2, #88]	@ 0x58
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <HAL_SPI_MspInit+0x80>)
 8001130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001132:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <HAL_SPI_MspInit+0x80>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113e:	4a10      	ldr	r2, [pc, #64]	@ (8001180 <HAL_SPI_MspInit+0x80>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <HAL_SPI_MspInit+0x80>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001152:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001164:	2306      	movs	r3, #6
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	4805      	ldr	r0, [pc, #20]	@ (8001184 <HAL_SPI_MspInit+0x84>)
 8001170:	f000 feba 	bl	8001ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	@ 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40003c00 	.word	0x40003c00
 8001180:	40021000 	.word	0x40021000
 8001184:	42020800 	.word	0x42020800

08001188 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0ae      	sub	sp, #184	@ 0xb8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	2294      	movs	r2, #148	@ 0x94
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f00a f855 	bl	800b248 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a4a      	ldr	r2, [pc, #296]	@ (80012cc <HAL_SAI_MspInit+0x144>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	f040 808d 	bne.w	80012c4 <HAL_SAI_MspInit+0x13c>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80011aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 80011b4:	2301      	movs	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 7;
 80011b8:	2307      	movs	r3, #7
 80011ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 28;
 80011bc:	231c      	movs	r3, #28
 80011be:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 80011c0:	2311      	movs	r3, #17
 80011c2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011c4:	2302      	movs	r3, #2
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011c8:	2302      	movs	r3, #2
 80011ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80011cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fed6 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_SAI_MspInit+0x5e>
    {
      Error_Handler();
 80011e2:	f7ff fea5 	bl	8000f30 <Error_Handler>
    }

    if (SAI1_client == 0)
 80011e6:	4b3a      	ldr	r3, [pc, #232]	@ (80012d0 <HAL_SAI_MspInit+0x148>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d113      	bne.n	8001216 <HAL_SAI_MspInit+0x8e>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80011ee:	4b39      	ldr	r3, [pc, #228]	@ (80012d4 <HAL_SAI_MspInit+0x14c>)
 80011f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011f2:	4a38      	ldr	r2, [pc, #224]	@ (80012d4 <HAL_SAI_MspInit+0x14c>)
 80011f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80011fa:	4b36      	ldr	r3, [pc, #216]	@ (80012d4 <HAL_SAI_MspInit+0x14c>)
 80011fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	205a      	movs	r0, #90	@ 0x5a
 800120c:	f000 fb41 	bl	8001892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001210:	205a      	movs	r0, #90	@ 0x5a
 8001212:	f000 fb58 	bl	80018c6 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8001216:	4b2e      	ldr	r3, [pc, #184]	@ (80012d0 <HAL_SAI_MspInit+0x148>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	4a2c      	ldr	r2, [pc, #176]	@ (80012d0 <HAL_SAI_MspInit+0x148>)
 800121e:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001220:	2370      	movs	r3, #112	@ 0x70
 8001222:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001238:	230d      	movs	r3, #13
 800123a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001242:	4619      	mov	r1, r3
 8001244:	4824      	ldr	r0, [pc, #144]	@ (80012d8 <HAL_SAI_MspInit+0x150>)
 8001246:	f000 fe4f 	bl	8001ee8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Channel1;
 800124a:	4b24      	ldr	r3, [pc, #144]	@ (80012dc <HAL_SAI_MspInit+0x154>)
 800124c:	4a24      	ldr	r2, [pc, #144]	@ (80012e0 <HAL_SAI_MspInit+0x158>)
 800124e:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001250:	4b22      	ldr	r3, [pc, #136]	@ (80012dc <HAL_SAI_MspInit+0x154>)
 8001252:	2225      	movs	r2, #37	@ 0x25
 8001254:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001256:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <HAL_SAI_MspInit+0x154>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800125c:	4b1f      	ldr	r3, [pc, #124]	@ (80012dc <HAL_SAI_MspInit+0x154>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001262:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <HAL_SAI_MspInit+0x154>)
 8001264:	2280      	movs	r2, #128	@ 0x80
 8001266:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001268:	4b1c      	ldr	r3, [pc, #112]	@ (80012dc <HAL_SAI_MspInit+0x154>)
 800126a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800126e:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001270:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <HAL_SAI_MspInit+0x154>)
 8001272:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001276:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001278:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <HAL_SAI_MspInit+0x154>)
 800127a:	2220      	movs	r2, #32
 800127c:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 800127e:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <HAL_SAI_MspInit+0x154>)
 8001280:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001284:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001286:	4815      	ldr	r0, [pc, #84]	@ (80012dc <HAL_SAI_MspInit+0x154>)
 8001288:	f000 fb38 	bl	80018fc <HAL_DMA_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_SAI_MspInit+0x10e>
    {
      Error_Handler();
 8001292:	f7ff fe4d 	bl	8000f30 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_sai1_a, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001296:	2110      	movs	r1, #16
 8001298:	4810      	ldr	r0, [pc, #64]	@ (80012dc <HAL_SAI_MspInit+0x154>)
 800129a:	f000 fd92 	bl	8001dc2 <HAL_DMA_ConfigChannelAttributes>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_SAI_MspInit+0x120>
    {
      Error_Handler();
 80012a4:	f7ff fe44 	bl	8000f30 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a0c      	ldr	r2, [pc, #48]	@ (80012dc <HAL_SAI_MspInit+0x154>)
 80012ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80012b0:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <HAL_SAI_MspInit+0x154>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6293      	str	r3, [r2, #40]	@ 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a08      	ldr	r2, [pc, #32]	@ (80012dc <HAL_SAI_MspInit+0x154>)
 80012ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80012be:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <HAL_SAI_MspInit+0x154>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6293      	str	r3, [r2, #40]	@ 0x28

    }
}
 80012c4:	bf00      	nop
 80012c6:	37b8      	adds	r7, #184	@ 0xb8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40015404 	.word	0x40015404
 80012d0:	2000084c 	.word	0x2000084c
 80012d4:	40021000 	.word	0x40021000
 80012d8:	42021000 	.word	0x42021000
 80012dc:	20000210 	.word	0x20000210
 80012e0:	40020008 	.word	0x40020008

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <NMI_Handler+0x4>

080012ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <MemManage_Handler+0x4>

080012fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <UsageFault_Handler+0x4>

0800130c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133a:	f000 f98b 	bl	8001654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001348:	4802      	ldr	r0, [pc, #8]	@ (8001354 <DMA1_Channel1_IRQHandler+0x10>)
 800134a:	f000 fc3a 	bl	8001bc2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000210 	.word	0x20000210

08001358 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <SAI1_IRQHandler+0x10>)
 800135e:	f004 ff5b 	bl	8006218 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000178 	.word	0x20000178

0800136c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001374:	4a14      	ldr	r2, [pc, #80]	@ (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	@ (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800139c:	f009 ff5c 	bl	800b258 <__errno>
 80013a0:	4603      	mov	r3, r0
 80013a2:	220c      	movs	r2, #12
 80013a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	e009      	b.n	80013c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b2:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <_sbrk+0x64>)
 80013bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20030000 	.word	0x20030000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	20000850 	.word	0x20000850
 80013d4:	200009e8 	.word	0x200009e8

080013d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001402:	4b4f      	ldr	r3, [pc, #316]	@ (8001540 <SystemCoreClockUpdate+0x144>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	2b00      	cmp	r3, #0
 800140c:	d107      	bne.n	800141e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800140e:	4b4c      	ldr	r3, [pc, #304]	@ (8001540 <SystemCoreClockUpdate+0x144>)
 8001410:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	e005      	b.n	800142a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800141e:	4b48      	ldr	r3, [pc, #288]	@ (8001540 <SystemCoreClockUpdate+0x144>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	f003 030f 	and.w	r3, r3, #15
 8001428:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800142a:	4a46      	ldr	r2, [pc, #280]	@ (8001544 <SystemCoreClockUpdate+0x148>)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001434:	4b42      	ldr	r3, [pc, #264]	@ (8001540 <SystemCoreClockUpdate+0x144>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 030c 	and.w	r3, r3, #12
 800143c:	2b0c      	cmp	r3, #12
 800143e:	d866      	bhi.n	800150e <SystemCoreClockUpdate+0x112>
 8001440:	a201      	add	r2, pc, #4	@ (adr r2, 8001448 <SystemCoreClockUpdate+0x4c>)
 8001442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001446:	bf00      	nop
 8001448:	0800147d 	.word	0x0800147d
 800144c:	0800150f 	.word	0x0800150f
 8001450:	0800150f 	.word	0x0800150f
 8001454:	0800150f 	.word	0x0800150f
 8001458:	08001485 	.word	0x08001485
 800145c:	0800150f 	.word	0x0800150f
 8001460:	0800150f 	.word	0x0800150f
 8001464:	0800150f 	.word	0x0800150f
 8001468:	0800148d 	.word	0x0800148d
 800146c:	0800150f 	.word	0x0800150f
 8001470:	0800150f 	.word	0x0800150f
 8001474:	0800150f 	.word	0x0800150f
 8001478:	08001495 	.word	0x08001495
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800147c:	4a32      	ldr	r2, [pc, #200]	@ (8001548 <SystemCoreClockUpdate+0x14c>)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	6013      	str	r3, [r2, #0]
      break;
 8001482:	e048      	b.n	8001516 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001484:	4b30      	ldr	r3, [pc, #192]	@ (8001548 <SystemCoreClockUpdate+0x14c>)
 8001486:	4a31      	ldr	r2, [pc, #196]	@ (800154c <SystemCoreClockUpdate+0x150>)
 8001488:	601a      	str	r2, [r3, #0]
      break;
 800148a:	e044      	b.n	8001516 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800148c:	4b2e      	ldr	r3, [pc, #184]	@ (8001548 <SystemCoreClockUpdate+0x14c>)
 800148e:	4a2f      	ldr	r2, [pc, #188]	@ (800154c <SystemCoreClockUpdate+0x150>)
 8001490:	601a      	str	r2, [r3, #0]
      break;
 8001492:	e040      	b.n	8001516 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001494:	4b2a      	ldr	r3, [pc, #168]	@ (8001540 <SystemCoreClockUpdate+0x144>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800149e:	4b28      	ldr	r3, [pc, #160]	@ (8001540 <SystemCoreClockUpdate+0x144>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	f003 030f 	and.w	r3, r3, #15
 80014a8:	3301      	adds	r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d003      	beq.n	80014ba <SystemCoreClockUpdate+0xbe>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d006      	beq.n	80014c6 <SystemCoreClockUpdate+0xca>
 80014b8:	e00b      	b.n	80014d2 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80014ba:	4a24      	ldr	r2, [pc, #144]	@ (800154c <SystemCoreClockUpdate+0x150>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	613b      	str	r3, [r7, #16]
          break;
 80014c4:	e00b      	b.n	80014de <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80014c6:	4a21      	ldr	r2, [pc, #132]	@ (800154c <SystemCoreClockUpdate+0x150>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ce:	613b      	str	r3, [r7, #16]
          break;
 80014d0:	e005      	b.n	80014de <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014da:	613b      	str	r3, [r7, #16]
          break;
 80014dc:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80014de:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <SystemCoreClockUpdate+0x144>)
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	0a1b      	lsrs	r3, r3, #8
 80014e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80014f0:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <SystemCoreClockUpdate+0x144>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0e5b      	lsrs	r3, r3, #25
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	3301      	adds	r3, #1
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	fbb2 f3f3 	udiv	r3, r2, r3
 8001508:	4a0f      	ldr	r2, [pc, #60]	@ (8001548 <SystemCoreClockUpdate+0x14c>)
 800150a:	6013      	str	r3, [r2, #0]
      break;
 800150c:	e003      	b.n	8001516 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800150e:	4a0e      	ldr	r2, [pc, #56]	@ (8001548 <SystemCoreClockUpdate+0x14c>)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	6013      	str	r3, [r2, #0]
      break;
 8001514:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001516:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <SystemCoreClockUpdate+0x144>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	091b      	lsrs	r3, r3, #4
 800151c:	f003 030f 	and.w	r3, r3, #15
 8001520:	4a0b      	ldr	r2, [pc, #44]	@ (8001550 <SystemCoreClockUpdate+0x154>)
 8001522:	5cd3      	ldrb	r3, [r2, r3]
 8001524:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001526:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <SystemCoreClockUpdate+0x14c>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	fa22 f303 	lsr.w	r3, r2, r3
 8001530:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <SystemCoreClockUpdate+0x14c>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	40021000 	.word	0x40021000
 8001544:	0800bde4 	.word	0x0800bde4
 8001548:	20000000 	.word	0x20000000
 800154c:	00f42400 	.word	0x00f42400
 8001550:	0800bdcc 	.word	0x0800bdcc

08001554 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800158c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001558:	f7ff ff3e 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800155c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800155e:	e003      	b.n	8001568 <LoopCopyDataInit>

08001560 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001560:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001562:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001564:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001566:	3104      	adds	r1, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001568:	480a      	ldr	r0, [pc, #40]	@ (8001594 <LoopForever+0xa>)
	ldr	r3, =_edata
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <LoopForever+0xe>)
	adds	r2, r0, r1
 800156c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800156e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001570:	d3f6      	bcc.n	8001560 <CopyDataInit>
	ldr	r2, =_sbss
 8001572:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001574:	e002      	b.n	800157c <LoopFillZerobss>

08001576 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001576:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001578:	f842 3b04 	str.w	r3, [r2], #4

0800157c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800157c:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <LoopForever+0x16>)
	cmp	r2, r3
 800157e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001580:	d3f9      	bcc.n	8001576 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001582:	f009 fe6f 	bl	800b264 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001586:	f7ff f8e5 	bl	8000754 <main>

0800158a <LoopForever>:

LoopForever:
    b LoopForever
 800158a:	e7fe      	b.n	800158a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800158c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001590:	0800bf10 	.word	0x0800bf10
	ldr	r0, =_sdata
 8001594:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001598:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 800159c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80015a0:	200009e4 	.word	0x200009e4

080015a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC1_2_IRQHandler>

080015a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80015b0:	2004      	movs	r0, #4
 80015b2:	f000 f963 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80015b6:	f7ff ff21 	bl	80013fc <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ba:	2007      	movs	r0, #7
 80015bc:	f000 f80e 	bl	80015dc <HAL_InitTick>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	71fb      	strb	r3, [r7, #7]
 80015ca:	e001      	b.n	80015d0 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015cc:	f7ff fcb6 	bl	8000f3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015d0:	79fb      	ldrb	r3, [r7, #7]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015e8:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <HAL_InitTick+0x6c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d023      	beq.n	8001638 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015f0:	4b16      	ldr	r3, [pc, #88]	@ (800164c <HAL_InitTick+0x70>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <HAL_InitTick+0x6c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f96b 	bl	80018e2 <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10f      	bne.n	8001632 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b07      	cmp	r3, #7
 8001616:	d809      	bhi.n	800162c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 f937 	bl	8001892 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001624:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <HAL_InitTick+0x74>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e007      	b.n	800163c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
 8001630:	e004      	b.n	800163c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	e001      	b.n	800163c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000008 	.word	0x20000008
 800164c:	20000000 	.word	0x20000000
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000008 	.word	0x20000008
 8001678:	20000854 	.word	0x20000854

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	@ (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000854 	.word	0x20000854

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff ffee 	bl	800167c <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016ae:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <HAL_Delay+0x44>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffde 	bl	800167c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000008 	.word	0x20000008

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	@ (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4907      	ldr	r1, [pc, #28]	@ (8001778 <__NVIC_EnableIRQ+0x38>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	@ (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0152      	lsls	r2, r2, #5
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	@ (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0152      	lsls	r2, r2, #5
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	@ 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	bf28      	it	cs
 80017ee:	2303      	movcs	r3, #3
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3303      	adds	r3, #3
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b04      	subs	r3, #4
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	@ 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001848:	d301      	bcc.n	800184e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184a:	2301      	movs	r3, #1
 800184c:	e00f      	b.n	800186e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <SysTick_Config+0x40>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001856:	2107      	movs	r1, #7
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f7ff ff8e 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <SysTick_Config+0x40>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <SysTick_Config+0x40>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff29 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a0:	f7ff ff40 	bl	8001724 <__NVIC_GetPriorityGrouping>
 80018a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f7ff ff90 	bl	80017d0 <NVIC_EncodePriority>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff5f 	bl	800177c <__NVIC_SetPriority>
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff33 	bl	8001740 <__NVIC_EnableIRQ>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ffa4 	bl	8001838 <SysTick_Config>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e08d      	b.n	8001a2a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	4b47      	ldr	r3, [pc, #284]	@ (8001a34 <HAL_DMA_Init+0x138>)
 8001916:	429a      	cmp	r2, r3
 8001918:	d80f      	bhi.n	800193a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	4b45      	ldr	r3, [pc, #276]	@ (8001a38 <HAL_DMA_Init+0x13c>)
 8001922:	4413      	add	r3, r2
 8001924:	4a45      	ldr	r2, [pc, #276]	@ (8001a3c <HAL_DMA_Init+0x140>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	091b      	lsrs	r3, r3, #4
 800192c:	009a      	lsls	r2, r3, #2
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA1;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a42      	ldr	r2, [pc, #264]	@ (8001a40 <HAL_DMA_Init+0x144>)
 8001936:	649a      	str	r2, [r3, #72]	@ 0x48
 8001938:	e00e      	b.n	8001958 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	4b40      	ldr	r3, [pc, #256]	@ (8001a44 <HAL_DMA_Init+0x148>)
 8001942:	4413      	add	r3, r2
 8001944:	4a3d      	ldr	r2, [pc, #244]	@ (8001a3c <HAL_DMA_Init+0x140>)
 8001946:	fba2 2303 	umull	r2, r3, r2, r3
 800194a:	091b      	lsrs	r3, r3, #4
 800194c:	009a      	lsls	r2, r3, #2
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA2;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a3c      	ldr	r2, [pc, #240]	@ (8001a48 <HAL_DMA_Init+0x14c>)
 8001956:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 800196e:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8001972:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800197c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001988:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001994:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 fa3a 	bl	8001e24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019b8:	d102      	bne.n	80019c0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80019d4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d010      	beq.n	8001a00 <HAL_DMA_Init+0x104>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d80c      	bhi.n	8001a00 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 fa5a 	bl	8001ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	e008      	b.n	8001a12 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	65da      	str	r2, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40020407 	.word	0x40020407
 8001a38:	bffdfff8 	.word	0xbffdfff8
 8001a3c:	cccccccd 	.word	0xcccccccd
 8001a40:	40020000 	.word	0x40020000
 8001a44:	bffdfbf8 	.word	0xbffdfbf8
 8001a48:	40020400 	.word	0x40020400

08001a4c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d008      	beq.n	8001a76 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2204      	movs	r2, #4
 8001a68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e040      	b.n	8001af8 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 020e 	bic.w	r2, r2, #14
 8001a84:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0201 	bic.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	f003 021c 	and.w	r2, r3, #28
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001ac2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00c      	beq.n	8001ae6 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ada:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8001ae4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d005      	beq.n	8001b28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2204      	movs	r2, #4
 8001b20:	645a      	str	r2, [r3, #68]	@ 0x44

    status = HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	73fb      	strb	r3, [r7, #15]
 8001b26:	e047      	b.n	8001bb8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 020e 	bic.w	r2, r2, #14
 8001b36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0201 	bic.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5c:	f003 021c 	and.w	r2, r3, #28
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b64:	2101      	movs	r1, #1
 8001b66:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001b74:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00c      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8001b96:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	4798      	blx	r3
    }
  }
  return status;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bde:	f003 031c 	and.w	r3, r3, #28
 8001be2:	2204      	movs	r2, #4
 8001be4:	409a      	lsls	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d053      	beq.n	8001c96 <HAL_DMA_IRQHandler+0xd4>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d04e      	beq.n	8001c96 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d024      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	f003 021c 	and.w	r2, r3, #28
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c12:	2104      	movs	r1, #4
 8001c14:	fa01 f202 	lsl.w	r2, r1, r2
 8001c18:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80c0 	beq.w	8001db2 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001c3a:	e0ba      	b.n	8001db2 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80b6 	beq.w	8001db2 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001c4e:	e0b0      	b.n	8001db2 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d107      	bne.n	8001c6e <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0204 	bic.w	r2, r2, #4
 8001c6c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c72:	f003 021c 	and.w	r2, r3, #28
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c80:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8093 	beq.w	8001db2 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001c94:	e08d      	b.n	8001db2 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9a:	f003 031c 	and.w	r3, r3, #28
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d04e      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x186>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d049      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d018      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d108      	bne.n	8001ce2 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d06e      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001ce0:	e069      	b.n	8001db6 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d065      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001cf2:	e060      	b.n	8001db6 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10b      	bne.n	8001d1a <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 020a 	bic.w	r2, r2, #10
 8001d10:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1e:	f003 021c 	and.w	r2, r3, #28
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d26:	2102      	movs	r1, #2
 8001d28:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2c:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if(hdma->XferCpltCallback != NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d03b      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001d46:	e036      	b.n	8001db6 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4c:	f003 031c 	and.w	r3, r3, #28
 8001d50:	2208      	movs	r2, #8
 8001d52:	409a      	lsls	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d02e      	beq.n	8001dba <HAL_DMA_IRQHandler+0x1f8>
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d029      	beq.n	8001dba <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 020e 	bic.w	r2, r2, #14
 8001d74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7a:	f003 021c 	and.w	r2, r3, #28
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f202 	lsl.w	r2, r1, r2
 8001d88:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001db0:	e002      	b.n	8001db8 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001db2:	bf00      	nop
 8001db4:	e000      	b.n	8001db8 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001db6:	bf00      	nop
  return;
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
}
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d103      	bne.n	8001dde <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	72fb      	strb	r3, [r7, #11]
    return status;
 8001dda:	7afb      	ldrb	r3, [r7, #11]
 8001ddc:	e01b      	b.n	8001e16 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00d      	beq.n	8001e0c <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d004      	beq.n	8001e04 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	e003      	b.n	8001e0c <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001e0a:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	601a      	str	r2, [r3, #0]

  return status;
 8001e14:	7afb      	ldrb	r3, [r7, #11]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b17      	ldr	r3, [pc, #92]	@ (8001e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d80a      	bhi.n	8001e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001e44:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8001e4c:	e007      	b.n	8001e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	009a      	lsls	r2, r3, #2
 8001e56:	4b0f      	ldr	r3, [pc, #60]	@ (8001e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001e58:	4413      	add	r3, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	3b08      	subs	r3, #8
 8001e66:	4a0c      	ldr	r2, [pc, #48]	@ (8001e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001e68:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001e74:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	40020407 	.word	0x40020407
 8001e94:	40020820 	.word	0x40020820
 8001e98:	cccccccd 	.word	0xcccccccd
 8001e9c:	40020880 	.word	0x40020880

08001ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	461a      	mov	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	65da      	str	r2, [r3, #92]	@ 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a08      	ldr	r2, [pc, #32]	@ (8001ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001ec2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2201      	movs	r2, #1
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	1000823f 	.word	0x1000823f
 8001ee4:	40020940 	.word	0x40020940

08001ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ef6:	e158      	b.n	80021aa <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	4013      	ands	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 814a 	beq.w	80021a4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d005      	beq.n	8001f28 <HAL_GPIO_Init+0x40>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d130      	bne.n	8001f8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	2203      	movs	r2, #3
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f5e:	2201      	movs	r2, #1
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	091b      	lsrs	r3, r3, #4
 8001f74:	f003 0201 	and.w	r2, r3, #1
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d017      	beq.n	8001fc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d123      	bne.n	800201a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	08da      	lsrs	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3208      	adds	r2, #8
 8001fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	220f      	movs	r2, #15
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	08da      	lsrs	r2, r3, #3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3208      	adds	r2, #8
 8002014:	6939      	ldr	r1, [r7, #16]
 8002016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0203 	and.w	r2, r3, #3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 80a4 	beq.w	80021a4 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800205c:	4a5a      	ldr	r2, [pc, #360]	@ (80021c8 <HAL_GPIO_Init+0x2e0>)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	3318      	adds	r3, #24
 8002064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	220f      	movs	r2, #15
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a52      	ldr	r2, [pc, #328]	@ (80021cc <HAL_GPIO_Init+0x2e4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d025      	beq.n	80020d4 <HAL_GPIO_Init+0x1ec>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a51      	ldr	r2, [pc, #324]	@ (80021d0 <HAL_GPIO_Init+0x2e8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d01f      	beq.n	80020d0 <HAL_GPIO_Init+0x1e8>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a50      	ldr	r2, [pc, #320]	@ (80021d4 <HAL_GPIO_Init+0x2ec>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d019      	beq.n	80020cc <HAL_GPIO_Init+0x1e4>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a4f      	ldr	r2, [pc, #316]	@ (80021d8 <HAL_GPIO_Init+0x2f0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d013      	beq.n	80020c8 <HAL_GPIO_Init+0x1e0>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a4e      	ldr	r2, [pc, #312]	@ (80021dc <HAL_GPIO_Init+0x2f4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00d      	beq.n	80020c4 <HAL_GPIO_Init+0x1dc>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a4d      	ldr	r2, [pc, #308]	@ (80021e0 <HAL_GPIO_Init+0x2f8>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d007      	beq.n	80020c0 <HAL_GPIO_Init+0x1d8>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a4c      	ldr	r2, [pc, #304]	@ (80021e4 <HAL_GPIO_Init+0x2fc>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d101      	bne.n	80020bc <HAL_GPIO_Init+0x1d4>
 80020b8:	2306      	movs	r3, #6
 80020ba:	e00c      	b.n	80020d6 <HAL_GPIO_Init+0x1ee>
 80020bc:	2307      	movs	r3, #7
 80020be:	e00a      	b.n	80020d6 <HAL_GPIO_Init+0x1ee>
 80020c0:	2305      	movs	r3, #5
 80020c2:	e008      	b.n	80020d6 <HAL_GPIO_Init+0x1ee>
 80020c4:	2304      	movs	r3, #4
 80020c6:	e006      	b.n	80020d6 <HAL_GPIO_Init+0x1ee>
 80020c8:	2303      	movs	r3, #3
 80020ca:	e004      	b.n	80020d6 <HAL_GPIO_Init+0x1ee>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e002      	b.n	80020d6 <HAL_GPIO_Init+0x1ee>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <HAL_GPIO_Init+0x1ee>
 80020d4:	2300      	movs	r3, #0
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	f002 0203 	and.w	r2, r2, #3
 80020dc:	00d2      	lsls	r2, r2, #3
 80020de:	4093      	lsls	r3, r2
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80020e6:	4938      	ldr	r1, [pc, #224]	@ (80021c8 <HAL_GPIO_Init+0x2e0>)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	3318      	adds	r3, #24
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020f4:	4b34      	ldr	r3, [pc, #208]	@ (80021c8 <HAL_GPIO_Init+0x2e0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002118:	4a2b      	ldr	r2, [pc, #172]	@ (80021c8 <HAL_GPIO_Init+0x2e0>)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800211e:	4b2a      	ldr	r3, [pc, #168]	@ (80021c8 <HAL_GPIO_Init+0x2e0>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	43db      	mvns	r3, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002142:	4a21      	ldr	r2, [pc, #132]	@ (80021c8 <HAL_GPIO_Init+0x2e0>)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002148:	4b1f      	ldr	r3, [pc, #124]	@ (80021c8 <HAL_GPIO_Init+0x2e0>)
 800214a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800214e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	43db      	mvns	r3, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800216e:	4a16      	ldr	r2, [pc, #88]	@ (80021c8 <HAL_GPIO_Init+0x2e0>)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8002176:	4b14      	ldr	r3, [pc, #80]	@ (80021c8 <HAL_GPIO_Init+0x2e0>)
 8002178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	43db      	mvns	r3, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800219c:	4a0a      	ldr	r2, [pc, #40]	@ (80021c8 <HAL_GPIO_Init+0x2e0>)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	3301      	adds	r3, #1
 80021a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	fa22 f303 	lsr.w	r3, r2, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f47f ae9f 	bne.w	8001ef8 <HAL_GPIO_Init+0x10>
  }
}
 80021ba:	bf00      	nop
 80021bc:	bf00      	nop
 80021be:	371c      	adds	r7, #28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	4002f400 	.word	0x4002f400
 80021cc:	42020000 	.word	0x42020000
 80021d0:	42020400 	.word	0x42020400
 80021d4:	42020800 	.word	0x42020800
 80021d8:	42020c00 	.word	0x42020c00
 80021dc:	42021000 	.word	0x42021000
 80021e0:	42021400 	.word	0x42021400
 80021e4:	42021800 	.word	0x42021800

080021e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]
 80021f4:	4613      	mov	r3, r2
 80021f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021f8:	787b      	ldrb	r3, [r7, #1]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021fe:	887a      	ldrh	r2, [r7, #2]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002204:	e002      	b.n	800220c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002206:	887a      	ldrh	r2, [r7, #2]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e08d      	b.n	8002346 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d106      	bne.n	8002244 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7fe fea0 	bl	8000f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2224      	movs	r2, #36	@ 0x24
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002268:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002278:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d107      	bne.n	8002292 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	e006      	b.n	80022a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800229e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d108      	bne.n	80022ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	e007      	b.n	80022ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69d9      	ldr	r1, [r3, #28]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1a      	ldr	r2, [r3, #32]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af02      	add	r7, sp, #8
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	4608      	mov	r0, r1
 800235a:	4611      	mov	r1, r2
 800235c:	461a      	mov	r2, r3
 800235e:	4603      	mov	r3, r0
 8002360:	817b      	strh	r3, [r7, #10]
 8002362:	460b      	mov	r3, r1
 8002364:	813b      	strh	r3, [r7, #8]
 8002366:	4613      	mov	r3, r2
 8002368:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b20      	cmp	r3, #32
 8002374:	f040 80f9 	bne.w	800256a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <HAL_I2C_Mem_Write+0x34>
 800237e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800238a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0ed      	b.n	800256c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_I2C_Mem_Write+0x4e>
 800239a:	2302      	movs	r3, #2
 800239c:	e0e6      	b.n	800256c <HAL_I2C_Mem_Write+0x21c>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023a6:	f7ff f969 	bl	800167c <HAL_GetTick>
 80023aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2319      	movs	r3, #25
 80023b2:	2201      	movs	r2, #1
 80023b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 fac3 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0d1      	b.n	800256c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2221      	movs	r2, #33	@ 0x21
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2240      	movs	r2, #64	@ 0x40
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a3a      	ldr	r2, [r7, #32]
 80023e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023f0:	88f8      	ldrh	r0, [r7, #6]
 80023f2:	893a      	ldrh	r2, [r7, #8]
 80023f4:	8979      	ldrh	r1, [r7, #10]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	4603      	mov	r3, r0
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f9d3 	bl	80027ac <I2C_RequestMemoryWrite>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0a9      	b.n	800256c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	2bff      	cmp	r3, #255	@ 0xff
 8002420:	d90e      	bls.n	8002440 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	22ff      	movs	r2, #255	@ 0xff
 8002426:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242c:	b2da      	uxtb	r2, r3
 800242e:	8979      	ldrh	r1, [r7, #10]
 8002430:	2300      	movs	r3, #0
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 fc47 	bl	8002ccc <I2C_TransferConfig>
 800243e:	e00f      	b.n	8002460 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244e:	b2da      	uxtb	r2, r3
 8002450:	8979      	ldrh	r1, [r7, #10]
 8002452:	2300      	movs	r3, #0
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fc36 	bl	8002ccc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 fac6 	bl	80029f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e07b      	b.n	800256c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002478:	781a      	ldrb	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d034      	beq.n	8002518 <HAL_I2C_Mem_Write+0x1c8>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d130      	bne.n	8002518 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024bc:	2200      	movs	r2, #0
 80024be:	2180      	movs	r1, #128	@ 0x80
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 fa3f 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e04d      	b.n	800256c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2bff      	cmp	r3, #255	@ 0xff
 80024d8:	d90e      	bls.n	80024f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	22ff      	movs	r2, #255	@ 0xff
 80024de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	8979      	ldrh	r1, [r7, #10]
 80024e8:	2300      	movs	r3, #0
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 fbeb 	bl	8002ccc <I2C_TransferConfig>
 80024f6:	e00f      	b.n	8002518 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002506:	b2da      	uxtb	r2, r3
 8002508:	8979      	ldrh	r1, [r7, #10]
 800250a:	2300      	movs	r3, #0
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 fbda 	bl	8002ccc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d19e      	bne.n	8002460 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 faac 	bl	8002a84 <I2C_WaitOnSTOPFlagUntilTimeout>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e01a      	b.n	800256c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2220      	movs	r2, #32
 800253c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <HAL_I2C_Mem_Write+0x224>)
 800254a:	400b      	ands	r3, r1
 800254c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800256a:	2302      	movs	r3, #2
  }
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	fe00e800 	.word	0xfe00e800

08002578 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af02      	add	r7, sp, #8
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	4608      	mov	r0, r1
 8002582:	4611      	mov	r1, r2
 8002584:	461a      	mov	r2, r3
 8002586:	4603      	mov	r3, r0
 8002588:	817b      	strh	r3, [r7, #10]
 800258a:	460b      	mov	r3, r1
 800258c:	813b      	strh	r3, [r7, #8]
 800258e:	4613      	mov	r3, r2
 8002590:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b20      	cmp	r3, #32
 800259c:	f040 80fd 	bne.w	800279a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_I2C_Mem_Read+0x34>
 80025a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d105      	bne.n	80025b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025b2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0f1      	b.n	800279c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_I2C_Mem_Read+0x4e>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e0ea      	b.n	800279c <HAL_I2C_Mem_Read+0x224>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025ce:	f7ff f855 	bl	800167c <HAL_GetTick>
 80025d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	2319      	movs	r3, #25
 80025da:	2201      	movs	r2, #1
 80025dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f9af 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0d5      	b.n	800279c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2222      	movs	r2, #34	@ 0x22
 80025f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2240      	movs	r2, #64	@ 0x40
 80025fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a3a      	ldr	r2, [r7, #32]
 800260a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002610:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002618:	88f8      	ldrh	r0, [r7, #6]
 800261a:	893a      	ldrh	r2, [r7, #8]
 800261c:	8979      	ldrh	r1, [r7, #10]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	4603      	mov	r3, r0
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f913 	bl	8002854 <I2C_RequestMemoryRead>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0ad      	b.n	800279c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	2bff      	cmp	r3, #255	@ 0xff
 8002648:	d90e      	bls.n	8002668 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	22ff      	movs	r2, #255	@ 0xff
 800264e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002654:	b2da      	uxtb	r2, r3
 8002656:	8979      	ldrh	r1, [r7, #10]
 8002658:	4b52      	ldr	r3, [pc, #328]	@ (80027a4 <HAL_I2C_Mem_Read+0x22c>)
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 fb33 	bl	8002ccc <I2C_TransferConfig>
 8002666:	e00f      	b.n	8002688 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002676:	b2da      	uxtb	r2, r3
 8002678:	8979      	ldrh	r1, [r7, #10]
 800267a:	4b4a      	ldr	r3, [pc, #296]	@ (80027a4 <HAL_I2C_Mem_Read+0x22c>)
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fb22 	bl	8002ccc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268e:	2200      	movs	r2, #0
 8002690:	2104      	movs	r1, #4
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f956 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e07c      	b.n	800279c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d034      	beq.n	8002748 <HAL_I2C_Mem_Read+0x1d0>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d130      	bne.n	8002748 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ec:	2200      	movs	r2, #0
 80026ee:	2180      	movs	r1, #128	@ 0x80
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f927 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e04d      	b.n	800279c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002704:	b29b      	uxth	r3, r3
 8002706:	2bff      	cmp	r3, #255	@ 0xff
 8002708:	d90e      	bls.n	8002728 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	22ff      	movs	r2, #255	@ 0xff
 800270e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002714:	b2da      	uxtb	r2, r3
 8002716:	8979      	ldrh	r1, [r7, #10]
 8002718:	2300      	movs	r3, #0
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fad3 	bl	8002ccc <I2C_TransferConfig>
 8002726:	e00f      	b.n	8002748 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002736:	b2da      	uxtb	r2, r3
 8002738:	8979      	ldrh	r1, [r7, #10]
 800273a:	2300      	movs	r3, #0
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 fac2 	bl	8002ccc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d19a      	bne.n	8002688 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f994 	bl	8002a84 <I2C_WaitOnSTOPFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e01a      	b.n	800279c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2220      	movs	r2, #32
 800276c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <HAL_I2C_Mem_Read+0x230>)
 800277a:	400b      	ands	r3, r1
 800277c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2220      	movs	r2, #32
 8002782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e000      	b.n	800279c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800279a:	2302      	movs	r3, #2
  }
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	80002400 	.word	0x80002400
 80027a8:	fe00e800 	.word	0xfe00e800

080027ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	4608      	mov	r0, r1
 80027b6:	4611      	mov	r1, r2
 80027b8:	461a      	mov	r2, r3
 80027ba:	4603      	mov	r3, r0
 80027bc:	817b      	strh	r3, [r7, #10]
 80027be:	460b      	mov	r3, r1
 80027c0:	813b      	strh	r3, [r7, #8]
 80027c2:	4613      	mov	r3, r2
 80027c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	8979      	ldrh	r1, [r7, #10]
 80027cc:	4b20      	ldr	r3, [pc, #128]	@ (8002850 <I2C_RequestMemoryWrite+0xa4>)
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 fa79 	bl	8002ccc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	69b9      	ldr	r1, [r7, #24]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f909 	bl	80029f6 <I2C_WaitOnTXISFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e02c      	b.n	8002848 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027ee:	88fb      	ldrh	r3, [r7, #6]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d105      	bne.n	8002800 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027f4:	893b      	ldrh	r3, [r7, #8]
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80027fe:	e015      	b.n	800282c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002800:	893b      	ldrh	r3, [r7, #8]
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	b29b      	uxth	r3, r3
 8002806:	b2da      	uxtb	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	69b9      	ldr	r1, [r7, #24]
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f8ef 	bl	80029f6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e012      	b.n	8002848 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002822:	893b      	ldrh	r3, [r7, #8]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2200      	movs	r2, #0
 8002834:	2180      	movs	r1, #128	@ 0x80
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 f884 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	80002000 	.word	0x80002000

08002854 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	4608      	mov	r0, r1
 800285e:	4611      	mov	r1, r2
 8002860:	461a      	mov	r2, r3
 8002862:	4603      	mov	r3, r0
 8002864:	817b      	strh	r3, [r7, #10]
 8002866:	460b      	mov	r3, r1
 8002868:	813b      	strh	r3, [r7, #8]
 800286a:	4613      	mov	r3, r2
 800286c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	8979      	ldrh	r1, [r7, #10]
 8002874:	4b20      	ldr	r3, [pc, #128]	@ (80028f8 <I2C_RequestMemoryRead+0xa4>)
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2300      	movs	r3, #0
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fa26 	bl	8002ccc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	69b9      	ldr	r1, [r7, #24]
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f8b6 	bl	80029f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e02c      	b.n	80028ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d105      	bne.n	80028a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800289a:	893b      	ldrh	r3, [r7, #8]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80028a4:	e015      	b.n	80028d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028a6:	893b      	ldrh	r3, [r7, #8]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	69b9      	ldr	r1, [r7, #24]
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f89c 	bl	80029f6 <I2C_WaitOnTXISFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e012      	b.n	80028ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028c8:	893b      	ldrh	r3, [r7, #8]
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	2200      	movs	r2, #0
 80028da:	2140      	movs	r1, #64	@ 0x40
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f831 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	80002000 	.word	0x80002000

080028fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b02      	cmp	r3, #2
 8002910:	d103      	bne.n	800291a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2200      	movs	r2, #0
 8002918:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b01      	cmp	r3, #1
 8002926:	d007      	beq.n	8002938 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	619a      	str	r2, [r3, #24]
  }
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	4613      	mov	r3, r2
 8002952:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002954:	e03b      	b.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	6839      	ldr	r1, [r7, #0]
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f8d6 	bl	8002b0c <I2C_IsErrorOccurred>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e041      	b.n	80029ee <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d02d      	beq.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002972:	f7fe fe83 	bl	800167c <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d302      	bcc.n	8002988 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d122      	bne.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	4013      	ands	r3, r2
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	429a      	cmp	r2, r3
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d113      	bne.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029aa:	f043 0220 	orr.w	r2, r3, #32
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e00f      	b.n	80029ee <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699a      	ldr	r2, [r3, #24]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4013      	ands	r3, r2
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	429a      	cmp	r2, r3
 80029dc:	bf0c      	ite	eq
 80029de:	2301      	moveq	r3, #1
 80029e0:	2300      	movne	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d0b4      	beq.n	8002956 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a02:	e033      	b.n	8002a6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f87f 	bl	8002b0c <I2C_IsErrorOccurred>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e031      	b.n	8002a7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1e:	d025      	beq.n	8002a6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a20:	f7fe fe2c 	bl	800167c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d302      	bcc.n	8002a36 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d11a      	bne.n	8002a6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d013      	beq.n	8002a6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a48:	f043 0220 	orr.w	r2, r3, #32
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e007      	b.n	8002a7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d1c4      	bne.n	8002a04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a90:	e02f      	b.n	8002af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f838 	bl	8002b0c <I2C_IsErrorOccurred>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e02d      	b.n	8002b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa6:	f7fe fde9 	bl	800167c <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d302      	bcc.n	8002abc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d11a      	bne.n	8002af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d013      	beq.n	8002af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ace:	f043 0220 	orr.w	r2, r3, #32
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e007      	b.n	8002b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d1c8      	bne.n	8002a92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08a      	sub	sp, #40	@ 0x28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d068      	beq.n	8002c0a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2210      	movs	r2, #16
 8002b3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b40:	e049      	b.n	8002bd6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d045      	beq.n	8002bd6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b4a:	f7fe fd97 	bl	800167c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d302      	bcc.n	8002b60 <I2C_IsErrorOccurred+0x54>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d13a      	bne.n	8002bd6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b82:	d121      	bne.n	8002bc8 <I2C_IsErrorOccurred+0xbc>
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b8a:	d01d      	beq.n	8002bc8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d01a      	beq.n	8002bc8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ba0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ba2:	f7fe fd6b 	bl	800167c <HAL_GetTick>
 8002ba6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba8:	e00e      	b.n	8002bc8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002baa:	f7fe fd67 	bl	800167c <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b19      	cmp	r3, #25
 8002bb6:	d907      	bls.n	8002bc8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	f043 0320 	orr.w	r3, r3, #32
 8002bbe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002bc6:	e006      	b.n	8002bd6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d1e9      	bne.n	8002baa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f003 0320 	and.w	r3, r3, #32
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	d003      	beq.n	8002bec <I2C_IsErrorOccurred+0xe0>
 8002be4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0aa      	beq.n	8002b42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d103      	bne.n	8002bfc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	f043 0304 	orr.w	r3, r3, #4
 8002c02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00b      	beq.n	8002c34 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00b      	beq.n	8002c56 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	f043 0308 	orr.w	r3, r3, #8
 8002c44:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00b      	beq.n	8002c78 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	f043 0302 	orr.w	r3, r3, #2
 8002c66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d01c      	beq.n	8002cba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f7ff fe3b 	bl	80028fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <I2C_IsErrorOccurred+0x1bc>)
 8002c92:	400b      	ands	r3, r1
 8002c94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002cba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3728      	adds	r7, #40	@ 0x28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	fe00e800 	.word	0xfe00e800

08002ccc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	817b      	strh	r3, [r7, #10]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cde:	897b      	ldrh	r3, [r7, #10]
 8002ce0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ce4:	7a7b      	ldrb	r3, [r7, #9]
 8002ce6:	041b      	lsls	r3, r3, #16
 8002ce8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cfa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	0d5b      	lsrs	r3, r3, #21
 8002d06:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002d0a:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <I2C_TransferConfig+0x60>)
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	ea02 0103 	and.w	r1, r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d1e:	bf00      	nop
 8002d20:	371c      	adds	r7, #28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	03ff63ff 	.word	0x03ff63ff

08002d30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d138      	bne.n	8002db8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e032      	b.n	8002dba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2224      	movs	r2, #36	@ 0x24
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6819      	ldr	r1, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e000      	b.n	8002dba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002db8:	2302      	movs	r3, #2
  }
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b085      	sub	sp, #20
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d139      	bne.n	8002e50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e033      	b.n	8002e52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2224      	movs	r2, #36	@ 0x24
 8002df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0201 	bic.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e000      	b.n	8002e52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e50:	2302      	movs	r3, #2
  }
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
 8002e7c:	e007      	b.n	8002e8e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002e7e:	4b07      	ldr	r3, [pc, #28]	@ (8002e9c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 0204 	bic.w	r2, r3, #4
 8002e86:	4905      	ldr	r1, [pc, #20]	@ (8002e9c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	40030400 	.word	0x40030400

08002ea0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002ea4:	4b05      	ldr	r3, [pc, #20]	@ (8002ebc <HAL_ICACHE_Enable+0x1c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a04      	ldr	r2, [pc, #16]	@ (8002ebc <HAL_ICACHE_Enable+0x1c>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	40030400 	.word	0x40030400

08002ec0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002ec4:	4b04      	ldr	r3, [pc, #16]	@ (8002ed8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40007000 	.word	0x40007000

08002edc <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002ee4:	4b27      	ldr	r3, [pc, #156]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002eec:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002eee:	f000 f871 	bl	8002fd4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ef8:	d101      	bne.n	8002efe <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e03e      	b.n	8002f7c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002efe:	4b21      	ldr	r3, [pc, #132]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f0a:	d101      	bne.n	8002f10 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e035      	b.n	8002f7c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d101      	bne.n	8002f1c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e02f      	b.n	8002f7c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002f1c:	4b19      	ldr	r3, [pc, #100]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8002f24:	4917      	ldr	r1, [pc, #92]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002f2c:	4b16      	ldr	r3, [pc, #88]	@ (8002f88 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	4a16      	ldr	r2, [pc, #88]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002f34:	fba2 2303 	umull	r2, r3, r2, r3
 8002f38:	09db      	lsrs	r3, r3, #7
 8002f3a:	2232      	movs	r2, #50	@ 0x32
 8002f3c:	fb02 f303 	mul.w	r3, r2, r3
 8002f40:	4a13      	ldr	r2, [pc, #76]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	08db      	lsrs	r3, r3, #3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f4c:	e002      	b.n	8002f54 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	3b01      	subs	r3, #1
 8002f52:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f54:	4b0b      	ldr	r3, [pc, #44]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f60:	d102      	bne.n	8002f68 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f2      	bne.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f68:	4b06      	ldr	r3, [pc, #24]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f74:	d101      	bne.n	8002f7a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e000      	b.n	8002f7c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40007000 	.word	0x40007000
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	0a7c5ac5 	.word	0x0a7c5ac5
 8002f90:	cccccccd 	.word	0xcccccccd

08002f94 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002f98:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4a04      	ldr	r2, [pc, #16]	@ (8002fb0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fa2:	6053      	str	r3, [r2, #4]
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40007000 	.word	0x40007000

08002fb4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002fb8:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	4a04      	ldr	r2, [pc, #16]	@ (8002fd0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002fbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fc2:	6093      	str	r3, [r2, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40007000 	.word	0x40007000

08002fd4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002fda:	4b0f      	ldr	r3, [pc, #60]	@ (8003018 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002fea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fee:	607b      	str	r3, [r7, #4]
 8002ff0:	e00a      	b.n	8003008 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d103      	bne.n	8003004 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002ffc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	e001      	b.n	8003008 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003004:	2300      	movs	r3, #0
 8003006:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003008:	687b      	ldr	r3, [r7, #4]
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40007000 	.word	0x40007000

0800301c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	f000 bcc2 	b.w	80039b4 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003030:	4b99      	ldr	r3, [pc, #612]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800303a:	4b97      	ldr	r3, [pc, #604]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80e9 	beq.w	8003224 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d006      	beq.n	8003066 <HAL_RCC_OscConfig+0x4a>
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	2b0c      	cmp	r3, #12
 800305c:	f040 8083 	bne.w	8003166 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d17f      	bne.n	8003166 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003066:	4b8c      	ldr	r3, [pc, #560]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <HAL_RCC_OscConfig+0x64>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	f000 bc9a 	b.w	80039b4 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003084:	4b84      	ldr	r3, [pc, #528]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d004      	beq.n	800309a <HAL_RCC_OscConfig+0x7e>
 8003090:	4b81      	ldr	r3, [pc, #516]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003098:	e005      	b.n	80030a6 <HAL_RCC_OscConfig+0x8a>
 800309a:	4b7f      	ldr	r3, [pc, #508]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 800309c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d224      	bcs.n	80030f4 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fe9a 	bl	8003de8 <RCC_SetFlashLatencyFromMSIRange>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	f000 bc7a 	b.w	80039b4 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030c0:	4b75      	ldr	r3, [pc, #468]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a74      	ldr	r2, [pc, #464]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 80030c6:	f043 0308 	orr.w	r3, r3, #8
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	4b72      	ldr	r3, [pc, #456]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	496f      	ldr	r1, [pc, #444]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030de:	4b6e      	ldr	r3, [pc, #440]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	496a      	ldr	r1, [pc, #424]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
 80030f2:	e026      	b.n	8003142 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f4:	4b68      	ldr	r3, [pc, #416]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a67      	ldr	r2, [pc, #412]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 80030fa:	f043 0308 	orr.w	r3, r3, #8
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	4b65      	ldr	r3, [pc, #404]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	4962      	ldr	r1, [pc, #392]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003112:	4b61      	ldr	r3, [pc, #388]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	495d      	ldr	r1, [pc, #372]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003122:	4313      	orrs	r3, r2
 8003124:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10a      	bne.n	8003142 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fe59 	bl	8003de8 <RCC_SetFlashLatencyFromMSIRange>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	f000 bc39 	b.w	80039b4 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003142:	f000 fe15 	bl	8003d70 <HAL_RCC_GetHCLKFreq>
 8003146:	4603      	mov	r3, r0
 8003148:	4a54      	ldr	r2, [pc, #336]	@ (800329c <HAL_RCC_OscConfig+0x280>)
 800314a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800314c:	4b54      	ldr	r3, [pc, #336]	@ (80032a0 <HAL_RCC_OscConfig+0x284>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f7fe fa43 	bl	80015dc <HAL_InitTick>
 8003156:	4603      	mov	r3, r0
 8003158:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d060      	beq.n	8003222 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	f000 bc27 	b.w	80039b4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d039      	beq.n	80031e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800316e:	4b4a      	ldr	r3, [pc, #296]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a49      	ldr	r2, [pc, #292]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800317a:	f7fe fa7f 	bl	800167c <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003180:	e00f      	b.n	80031a2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003182:	f7fe fa7b 	bl	800167c <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d908      	bls.n	80031a2 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003190:	4b41      	ldr	r3, [pc, #260]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d102      	bne.n	80031a2 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	f000 bc09 	b.w	80039b4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0e9      	beq.n	8003182 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a39      	ldr	r2, [pc, #228]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 80031b4:	f043 0308 	orr.w	r3, r3, #8
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	4b37      	ldr	r3, [pc, #220]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	4934      	ldr	r1, [pc, #208]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031cc:	4b32      	ldr	r3, [pc, #200]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	492f      	ldr	r1, [pc, #188]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
 80031e0:	e020      	b.n	8003224 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031ee:	f7fe fa45 	bl	800167c <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031f4:	e00e      	b.n	8003214 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031f6:	f7fe fa41 	bl	800167c <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d907      	bls.n	8003214 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003204:	4b24      	ldr	r3, [pc, #144]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e3cf      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003214:	4b20      	ldr	r3, [pc, #128]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1ea      	bne.n	80031f6 <HAL_RCC_OscConfig+0x1da>
 8003220:	e000      	b.n	8003224 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003222:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d07e      	beq.n	800332e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2b08      	cmp	r3, #8
 8003234:	d005      	beq.n	8003242 <HAL_RCC_OscConfig+0x226>
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	2b0c      	cmp	r3, #12
 800323a:	d10e      	bne.n	800325a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2b03      	cmp	r3, #3
 8003240:	d10b      	bne.n	800325a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003242:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d06e      	beq.n	800332c <HAL_RCC_OscConfig+0x310>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d16a      	bne.n	800332c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e3ac      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003262:	d106      	bne.n	8003272 <HAL_RCC_OscConfig+0x256>
 8003264:	4b0c      	ldr	r3, [pc, #48]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a0b      	ldr	r2, [pc, #44]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 800326a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	e024      	b.n	80032bc <HAL_RCC_OscConfig+0x2a0>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800327a:	d113      	bne.n	80032a4 <HAL_RCC_OscConfig+0x288>
 800327c:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a05      	ldr	r2, [pc, #20]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003282:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	4b03      	ldr	r3, [pc, #12]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a02      	ldr	r2, [pc, #8]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 800328e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	e012      	b.n	80032bc <HAL_RCC_OscConfig+0x2a0>
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000
 800329c:	20000000 	.word	0x20000000
 80032a0:	20000004 	.word	0x20000004
 80032a4:	4b8b      	ldr	r3, [pc, #556]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a8a      	ldr	r2, [pc, #552]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 80032aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b88      	ldr	r3, [pc, #544]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a87      	ldr	r2, [pc, #540]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 80032b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d019      	beq.n	80032f8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe f9da 	bl	800167c <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ca:	e00e      	b.n	80032ea <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fe f9d6 	bl	800167c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	@ 0x64
 80032d8:	d907      	bls.n	80032ea <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032da:	4b7e      	ldr	r3, [pc, #504]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e364      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ea:	4b7a      	ldr	r3, [pc, #488]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0ea      	beq.n	80032cc <HAL_RCC_OscConfig+0x2b0>
 80032f6:	e01a      	b.n	800332e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f8:	f7fe f9c0 	bl	800167c <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032fe:	e00e      	b.n	800331e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003300:	f7fe f9bc 	bl	800167c <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b64      	cmp	r3, #100	@ 0x64
 800330c:	d907      	bls.n	800331e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800330e:	4b71      	ldr	r3, [pc, #452]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e34a      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800331e:	4b6d      	ldr	r3, [pc, #436]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1ea      	bne.n	8003300 <HAL_RCC_OscConfig+0x2e4>
 800332a:	e000      	b.n	800332e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d06c      	beq.n	8003414 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2b04      	cmp	r3, #4
 800333e:	d005      	beq.n	800334c <HAL_RCC_OscConfig+0x330>
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2b0c      	cmp	r3, #12
 8003344:	d119      	bne.n	800337a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d116      	bne.n	800337a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800334c:	4b61      	ldr	r3, [pc, #388]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_RCC_OscConfig+0x348>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e327      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003364:	4b5b      	ldr	r3, [pc, #364]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	061b      	lsls	r3, r3, #24
 8003372:	4958      	ldr	r1, [pc, #352]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 8003374:	4313      	orrs	r3, r2
 8003376:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003378:	e04c      	b.n	8003414 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d029      	beq.n	80033d6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003382:	4b54      	ldr	r3, [pc, #336]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a53      	ldr	r2, [pc, #332]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 8003388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800338c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338e:	f7fe f975 	bl	800167c <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003394:	e00e      	b.n	80033b4 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003396:	f7fe f971 	bl	800167c <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d907      	bls.n	80033b4 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033a4:	4b4b      	ldr	r3, [pc, #300]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e2ff      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b4:	4b47      	ldr	r3, [pc, #284]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0ea      	beq.n	8003396 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c0:	4b44      	ldr	r3, [pc, #272]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	061b      	lsls	r3, r3, #24
 80033ce:	4941      	ldr	r1, [pc, #260]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
 80033d4:	e01e      	b.n	8003414 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d6:	4b3f      	ldr	r3, [pc, #252]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a3e      	ldr	r2, [pc, #248]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 80033dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fe f94b 	bl	800167c <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033e8:	e00e      	b.n	8003408 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ea:	f7fe f947 	bl	800167c <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d907      	bls.n	8003408 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033f8:	4b36      	ldr	r3, [pc, #216]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e2d5      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003408:	4b32      	ldr	r3, [pc, #200]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ea      	bne.n	80033ea <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d062      	beq.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d038      	beq.n	800349a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d108      	bne.n	8003442 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003430:	4b28      	ldr	r3, [pc, #160]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 8003432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003436:	4a27      	ldr	r2, [pc, #156]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 8003438:	f023 0310 	bic.w	r3, r3, #16
 800343c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003440:	e007      	b.n	8003452 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003442:	4b24      	ldr	r3, [pc, #144]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 8003444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003448:	4a22      	ldr	r2, [pc, #136]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 800344a:	f043 0310 	orr.w	r3, r3, #16
 800344e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003452:	4b20      	ldr	r3, [pc, #128]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 8003454:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003458:	4a1e      	ldr	r2, [pc, #120]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003462:	f7fe f90b 	bl	800167c <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003468:	e00f      	b.n	800348a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346a:	f7fe f907 	bl	800167c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b07      	cmp	r3, #7
 8003476:	d908      	bls.n	800348a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003478:	4b16      	ldr	r3, [pc, #88]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 800347a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e294      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800348a:	4b12      	ldr	r3, [pc, #72]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 800348c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0e8      	beq.n	800346a <HAL_RCC_OscConfig+0x44e>
 8003498:	e025      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800349a:	4b0e      	ldr	r3, [pc, #56]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 800349c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034a0:	4a0c      	ldr	r2, [pc, #48]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 80034a2:	f023 0301 	bic.w	r3, r3, #1
 80034a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034aa:	f7fe f8e7 	bl	800167c <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034b0:	e012      	b.n	80034d8 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b2:	f7fe f8e3 	bl	800167c <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b07      	cmp	r3, #7
 80034be:	d90b      	bls.n	80034d8 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034c0:	4b04      	ldr	r3, [pc, #16]	@ (80034d4 <HAL_RCC_OscConfig+0x4b8>)
 80034c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d004      	beq.n	80034d8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e270      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034d8:	4ba8      	ldr	r3, [pc, #672]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 80034da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e5      	bne.n	80034b2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 812d 	beq.w	800374e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f4:	2300      	movs	r3, #0
 80034f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034f8:	4ba0      	ldr	r3, [pc, #640]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 80034fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10d      	bne.n	8003520 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003504:	4b9d      	ldr	r3, [pc, #628]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 8003506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003508:	4a9c      	ldr	r2, [pc, #624]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 800350a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800350e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003510:	4b9a      	ldr	r3, [pc, #616]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 8003512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351c:	2301      	movs	r3, #1
 800351e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003520:	4b97      	ldr	r3, [pc, #604]	@ (8003780 <HAL_RCC_OscConfig+0x764>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d11e      	bne.n	800356a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800352c:	4b94      	ldr	r3, [pc, #592]	@ (8003780 <HAL_RCC_OscConfig+0x764>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a93      	ldr	r2, [pc, #588]	@ (8003780 <HAL_RCC_OscConfig+0x764>)
 8003532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003536:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003538:	f7fe f8a0 	bl	800167c <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800353e:	e00e      	b.n	800355e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003540:	f7fe f89c 	bl	800167c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d907      	bls.n	800355e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800354e:	4b8c      	ldr	r3, [pc, #560]	@ (8003780 <HAL_RCC_OscConfig+0x764>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e22a      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800355e:	4b88      	ldr	r3, [pc, #544]	@ (8003780 <HAL_RCC_OscConfig+0x764>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0ea      	beq.n	8003540 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01f      	beq.n	80035b6 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	d010      	beq.n	80035a4 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003582:	4b7e      	ldr	r3, [pc, #504]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003588:	4a7c      	ldr	r2, [pc, #496]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 800358a:	f043 0304 	orr.w	r3, r3, #4
 800358e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003592:	4b7a      	ldr	r3, [pc, #488]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003598:	4a78      	ldr	r2, [pc, #480]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035a2:	e018      	b.n	80035d6 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80035a4:	4b75      	ldr	r3, [pc, #468]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035aa:	4a74      	ldr	r2, [pc, #464]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035b4:	e00f      	b.n	80035d6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80035b6:	4b71      	ldr	r3, [pc, #452]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035bc:	4a6f      	ldr	r2, [pc, #444]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 80035be:	f023 0301 	bic.w	r3, r3, #1
 80035c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80035c6:	4b6d      	ldr	r3, [pc, #436]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 80035c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035cc:	4a6b      	ldr	r2, [pc, #428]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 80035ce:	f023 0304 	bic.w	r3, r3, #4
 80035d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d068      	beq.n	80036b0 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035de:	f7fe f84d 	bl	800167c <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e4:	e011      	b.n	800360a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e6:	f7fe f849 	bl	800167c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d908      	bls.n	800360a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f8:	4b60      	ldr	r3, [pc, #384]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e1d4      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800360a:	4b5c      	ldr	r3, [pc, #368]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0e6      	beq.n	80035e6 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003620:	2b00      	cmp	r3, #0
 8003622:	d022      	beq.n	800366a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003624:	4b55      	ldr	r3, [pc, #340]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362a:	4a54      	ldr	r2, [pc, #336]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 800362c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003634:	e011      	b.n	800365a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fe f821 	bl	800167c <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d908      	bls.n	800365a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003648:	4b4c      	ldr	r3, [pc, #304]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e1ac      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800365a:	4b48      	ldr	r3, [pc, #288]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 800365c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0e6      	beq.n	8003636 <HAL_RCC_OscConfig+0x61a>
 8003668:	e068      	b.n	800373c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800366a:	4b44      	ldr	r3, [pc, #272]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003670:	4a42      	ldr	r2, [pc, #264]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 8003672:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003676:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800367a:	e011      	b.n	80036a0 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367c:	f7fd fffe 	bl	800167c <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d908      	bls.n	80036a0 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800368e:	4b3b      	ldr	r3, [pc, #236]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 8003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e189      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80036a0:	4b36      	ldr	r3, [pc, #216]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1e6      	bne.n	800367c <HAL_RCC_OscConfig+0x660>
 80036ae:	e045      	b.n	800373c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b0:	f7fd ffe4 	bl	800167c <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036b6:	e011      	b.n	80036dc <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b8:	f7fd ffe0 	bl	800167c <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d908      	bls.n	80036dc <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ca:	4b2c      	ldr	r3, [pc, #176]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 80036cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e16b      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036dc:	4b27      	ldr	r3, [pc, #156]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1e6      	bne.n	80036b8 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80036ea:	4b24      	ldr	r3, [pc, #144]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d021      	beq.n	800373c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80036f8:	4b20      	ldr	r3, [pc, #128]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 80036fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036fe:	4a1f      	ldr	r2, [pc, #124]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 8003700:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003708:	e011      	b.n	800372e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370a:	f7fd ffb7 	bl	800167c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003718:	4293      	cmp	r3, r2
 800371a:	d908      	bls.n	800372e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800371c:	4b17      	ldr	r3, [pc, #92]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e142      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800372e:	4b13      	ldr	r3, [pc, #76]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 8003730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003734:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e6      	bne.n	800370a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800373c:	7ffb      	ldrb	r3, [r7, #31]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d105      	bne.n	800374e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003742:	4b0e      	ldr	r3, [pc, #56]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 8003744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003746:	4a0d      	ldr	r2, [pc, #52]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 8003748:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800374c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d04f      	beq.n	80037fa <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375e:	2b00      	cmp	r3, #0
 8003760:	d028      	beq.n	80037b4 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003762:	4b06      	ldr	r3, [pc, #24]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 8003764:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003768:	4a04      	ldr	r2, [pc, #16]	@ (800377c <HAL_RCC_OscConfig+0x760>)
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003772:	f7fd ff83 	bl	800167c <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003778:	e014      	b.n	80037a4 <HAL_RCC_OscConfig+0x788>
 800377a:	bf00      	nop
 800377c:	40021000 	.word	0x40021000
 8003780:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003784:	f7fd ff7a 	bl	800167c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d908      	bls.n	80037a4 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003792:	4b8a      	ldr	r3, [pc, #552]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 8003794:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e107      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037a4:	4b85      	ldr	r3, [pc, #532]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 80037a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0e8      	beq.n	8003784 <HAL_RCC_OscConfig+0x768>
 80037b2:	e022      	b.n	80037fa <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037b4:	4b81      	ldr	r3, [pc, #516]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 80037b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037ba:	4a80      	ldr	r2, [pc, #512]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fd ff5a 	bl	800167c <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037ca:	e00f      	b.n	80037ec <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037cc:	f7fd ff56 	bl	800167c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d908      	bls.n	80037ec <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037da:	4b78      	ldr	r3, [pc, #480]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 80037dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e0e3      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037ec:	4b73      	ldr	r3, [pc, #460]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 80037ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e8      	bne.n	80037cc <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 80d7 	beq.w	80039b2 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003804:	4b6d      	ldr	r3, [pc, #436]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 030c 	and.w	r3, r3, #12
 800380c:	2b0c      	cmp	r3, #12
 800380e:	f000 8091 	beq.w	8003934 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003816:	2b02      	cmp	r3, #2
 8003818:	d166      	bne.n	80038e8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381a:	4b68      	ldr	r3, [pc, #416]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a67      	ldr	r2, [pc, #412]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 8003820:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003826:	f7fd ff29 	bl	800167c <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800382c:	e00e      	b.n	800384c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800382e:	f7fd ff25 	bl	800167c <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d907      	bls.n	800384c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800383c:	4b5f      	ldr	r3, [pc, #380]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e0b3      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800384c:	4b5b      	ldr	r3, [pc, #364]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ea      	bne.n	800382e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003858:	4b58      	ldr	r3, [pc, #352]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	4b58      	ldr	r3, [pc, #352]	@ (80039c0 <HAL_RCC_OscConfig+0x9a4>)
 800385e:	4013      	ands	r3, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003868:	3a01      	subs	r2, #1
 800386a:	0112      	lsls	r2, r2, #4
 800386c:	4311      	orrs	r1, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003872:	0212      	lsls	r2, r2, #8
 8003874:	4311      	orrs	r1, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800387a:	0852      	lsrs	r2, r2, #1
 800387c:	3a01      	subs	r2, #1
 800387e:	0552      	lsls	r2, r2, #21
 8003880:	4311      	orrs	r1, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003886:	0852      	lsrs	r2, r2, #1
 8003888:	3a01      	subs	r2, #1
 800388a:	0652      	lsls	r2, r2, #25
 800388c:	4311      	orrs	r1, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003892:	06d2      	lsls	r2, r2, #27
 8003894:	430a      	orrs	r2, r1
 8003896:	4949      	ldr	r1, [pc, #292]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 8003898:	4313      	orrs	r3, r2
 800389a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800389c:	4b47      	ldr	r3, [pc, #284]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a46      	ldr	r2, [pc, #280]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 80038a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038a8:	4b44      	ldr	r3, [pc, #272]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a43      	ldr	r2, [pc, #268]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 80038ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fd fee2 	bl	800167c <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ba:	e00e      	b.n	80038da <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fd fede 	bl	800167c <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d907      	bls.n	80038da <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ca:	4b3c      	ldr	r3, [pc, #240]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e06c      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038da:	4b38      	ldr	r3, [pc, #224]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0ea      	beq.n	80038bc <HAL_RCC_OscConfig+0x8a0>
 80038e6:	e064      	b.n	80039b2 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e8:	4b34      	ldr	r3, [pc, #208]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a33      	ldr	r2, [pc, #204]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 80038ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f4:	f7fd fec2 	bl	800167c <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038fa:	e00e      	b.n	800391a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fc:	f7fd febe 	bl	800167c <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d907      	bls.n	800391a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800390a:	4b2c      	ldr	r3, [pc, #176]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e04c      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800391a:	4b28      	ldr	r3, [pc, #160]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1ea      	bne.n	80038fc <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003926:	4b25      	ldr	r3, [pc, #148]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	4924      	ldr	r1, [pc, #144]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 800392c:	4b25      	ldr	r3, [pc, #148]	@ (80039c4 <HAL_RCC_OscConfig+0x9a8>)
 800392e:	4013      	ands	r3, r2
 8003930:	60cb      	str	r3, [r1, #12]
 8003932:	e03e      	b.n	80039b2 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e039      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003940:	4b1e      	ldr	r3, [pc, #120]	@ (80039bc <HAL_RCC_OscConfig+0x9a0>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f003 0203 	and.w	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003950:	429a      	cmp	r2, r3
 8003952:	d12c      	bne.n	80039ae <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800395e:	3b01      	subs	r3, #1
 8003960:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d123      	bne.n	80039ae <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003970:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d11b      	bne.n	80039ae <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003980:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d113      	bne.n	80039ae <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	3b01      	subs	r3, #1
 8003994:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d109      	bne.n	80039ae <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a4:	085b      	lsrs	r3, r3, #1
 80039a6:	3b01      	subs	r3, #1
 80039a8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d001      	beq.n	80039b2 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40021000 	.word	0x40021000
 80039c0:	019f800c 	.word	0x019f800c
 80039c4:	feeefffc 	.word	0xfeeefffc

080039c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e11c      	b.n	8003c1a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039e0:	4b90      	ldr	r3, [pc, #576]	@ (8003c24 <HAL_RCC_ClockConfig+0x25c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d910      	bls.n	8003a10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003c24 <HAL_RCC_ClockConfig+0x25c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f023 020f 	bic.w	r2, r3, #15
 80039f6:	498b      	ldr	r1, [pc, #556]	@ (8003c24 <HAL_RCC_ClockConfig+0x25c>)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b89      	ldr	r3, [pc, #548]	@ (8003c24 <HAL_RCC_ClockConfig+0x25c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e104      	b.n	8003c1a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d010      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	4b81      	ldr	r3, [pc, #516]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d908      	bls.n	8003a3e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a2c:	4b7e      	ldr	r3, [pc, #504]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	497b      	ldr	r1, [pc, #492]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 8085 	beq.w	8003b56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d11f      	bne.n	8003a94 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a54:	4b74      	ldr	r3, [pc, #464]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0da      	b.n	8003c1a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a64:	f000 fa24 	bl	8003eb0 <RCC_GetSysClockFreqFromPLLSource>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4a6f      	ldr	r2, [pc, #444]	@ (8003c2c <HAL_RCC_ClockConfig+0x264>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d947      	bls.n	8003b02 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a72:	4b6d      	ldr	r3, [pc, #436]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d141      	bne.n	8003b02 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a86:	4a68      	ldr	r2, [pc, #416]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a8e:	2380      	movs	r3, #128	@ 0x80
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	e036      	b.n	8003b02 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d107      	bne.n	8003aac <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a9c:	4b62      	ldr	r3, [pc, #392]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d115      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0b6      	b.n	8003c1a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d107      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ab4:	4b5c      	ldr	r3, [pc, #368]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d109      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0aa      	b.n	8003c1a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac4:	4b58      	ldr	r3, [pc, #352]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0a2      	b.n	8003c1a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ad4:	f000 f8b0 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4a53      	ldr	r2, [pc, #332]	@ (8003c2c <HAL_RCC_ClockConfig+0x264>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d90f      	bls.n	8003b02 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ae2:	4b51      	ldr	r3, [pc, #324]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003aee:	4b4e      	ldr	r3, [pc, #312]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003af6:	4a4c      	ldr	r2, [pc, #304]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003afc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003afe:	2380      	movs	r3, #128	@ 0x80
 8003b00:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b02:	4b49      	ldr	r3, [pc, #292]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f023 0203 	bic.w	r2, r3, #3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	4946      	ldr	r1, [pc, #280]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b14:	f7fd fdb2 	bl	800167c <HAL_GetTick>
 8003b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1a:	e013      	b.n	8003b44 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b1c:	f7fd fdae 	bl	800167c <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d90a      	bls.n	8003b44 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 020c 	and.w	r2, r3, #12
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e06a      	b.n	8003c1a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b44:	4b38      	ldr	r3, [pc, #224]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 020c 	and.w	r2, r3, #12
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d1e2      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b80      	cmp	r3, #128	@ 0x80
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b5c:	4b32      	ldr	r3, [pc, #200]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	4a31      	ldr	r2, [pc, #196]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003b62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b66:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d010      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	4b2b      	ldr	r3, [pc, #172]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d208      	bcs.n	8003b96 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	4b28      	ldr	r3, [pc, #160]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	4925      	ldr	r1, [pc, #148]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b96:	4b23      	ldr	r3, [pc, #140]	@ (8003c24 <HAL_RCC_ClockConfig+0x25c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d210      	bcs.n	8003bc6 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c24 <HAL_RCC_ClockConfig+0x25c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f023 020f 	bic.w	r2, r3, #15
 8003bac:	491d      	ldr	r1, [pc, #116]	@ (8003c24 <HAL_RCC_ClockConfig+0x25c>)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c24 <HAL_RCC_ClockConfig+0x25c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 030f 	and.w	r3, r3, #15
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d001      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e029      	b.n	8003c1a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd2:	4b15      	ldr	r3, [pc, #84]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	4912      	ldr	r1, [pc, #72]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d009      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	490a      	ldr	r1, [pc, #40]	@ (8003c28 <HAL_RCC_ClockConfig+0x260>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c04:	f000 f8b4 	bl	8003d70 <HAL_RCC_GetHCLKFreq>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	4a09      	ldr	r2, [pc, #36]	@ (8003c30 <HAL_RCC_ClockConfig+0x268>)
 8003c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c0e:	4b09      	ldr	r3, [pc, #36]	@ (8003c34 <HAL_RCC_ClockConfig+0x26c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fd fce2 	bl	80015dc <HAL_InitTick>
 8003c18:	4603      	mov	r3, r0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40022000 	.word	0x40022000
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	04c4b400 	.word	0x04c4b400
 8003c30:	20000000 	.word	0x20000000
 8003c34:	20000004 	.word	0x20000004

08003c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b089      	sub	sp, #36	@ 0x24
 8003c3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	2300      	movs	r3, #0
 8003c44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c46:	4b47      	ldr	r3, [pc, #284]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c50:	4b44      	ldr	r3, [pc, #272]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 0303 	and.w	r3, r3, #3
 8003c58:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0x34>
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	2b0c      	cmp	r3, #12
 8003c64:	d121      	bne.n	8003caa <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d11e      	bne.n	8003caa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c6c:	4b3d      	ldr	r3, [pc, #244]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d107      	bne.n	8003c88 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c78:	4b3a      	ldr	r3, [pc, #232]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c7e:	0a1b      	lsrs	r3, r3, #8
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	61fb      	str	r3, [r7, #28]
 8003c86:	e005      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c88:	4b36      	ldr	r3, [pc, #216]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003c94:	4a34      	ldr	r2, [pc, #208]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x130>)
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10d      	bne.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ca8:	e00a      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d102      	bne.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x134>)
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	e004      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d101      	bne.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x134>)
 8003cbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	2b0c      	cmp	r3, #12
 8003cc4:	d146      	bne.n	8003d54 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003cc6:	4b27      	ldr	r3, [pc, #156]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cd0:	4b24      	ldr	r3, [pc, #144]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	3301      	adds	r3, #1
 8003cdc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d003      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0xb4>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d00d      	beq.n	8003d06 <HAL_RCC_GetSysClockFreq+0xce>
 8003cea:	e019      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cec:	4a1f      	ldr	r2, [pc, #124]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x134>)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003cf6:	68d2      	ldr	r2, [r2, #12]
 8003cf8:	0a12      	lsrs	r2, r2, #8
 8003cfa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cfe:	fb02 f303 	mul.w	r3, r2, r3
 8003d02:	617b      	str	r3, [r7, #20]
        break;
 8003d04:	e019      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d06:	4a19      	ldr	r2, [pc, #100]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x134>)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0e:	4a15      	ldr	r2, [pc, #84]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003d10:	68d2      	ldr	r2, [r2, #12]
 8003d12:	0a12      	lsrs	r2, r2, #8
 8003d14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d18:	fb02 f303 	mul.w	r3, r2, r3
 8003d1c:	617b      	str	r3, [r7, #20]
        break;
 8003d1e:	e00c      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d20:	69fa      	ldr	r2, [r7, #28]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d28:	4a0e      	ldr	r2, [pc, #56]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003d2a:	68d2      	ldr	r2, [r2, #12]
 8003d2c:	0a12      	lsrs	r2, r2, #8
 8003d2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
 8003d36:	617b      	str	r3, [r7, #20]
        break;
 8003d38:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	0e5b      	lsrs	r3, r3, #25
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	3301      	adds	r3, #1
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d54:	69bb      	ldr	r3, [r7, #24]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3724      	adds	r7, #36	@ 0x24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000
 8003d68:	0800bde4 	.word	0x0800bde4
 8003d6c:	00f42400 	.word	0x00f42400

08003d70 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003d74:	f7ff ff60 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	4b05      	ldr	r3, [pc, #20]	@ (8003d90 <HAL_RCC_GetHCLKFreq+0x20>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	091b      	lsrs	r3, r3, #4
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	4903      	ldr	r1, [pc, #12]	@ (8003d94 <HAL_RCC_GetHCLKFreq+0x24>)
 8003d86:	5ccb      	ldrb	r3, [r1, r3]
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40021000 	.word	0x40021000
 8003d94:	0800bdcc 	.word	0x0800bdcc

08003d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d9c:	f7ff ffe8 	bl	8003d70 <HAL_RCC_GetHCLKFreq>
 8003da0:	4602      	mov	r2, r0
 8003da2:	4b05      	ldr	r3, [pc, #20]	@ (8003db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	4903      	ldr	r1, [pc, #12]	@ (8003dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dae:	5ccb      	ldrb	r3, [r1, r3]
 8003db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	0800bddc 	.word	0x0800bddc

08003dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dc4:	f7ff ffd4 	bl	8003d70 <HAL_RCC_GetHCLKFreq>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4b05      	ldr	r3, [pc, #20]	@ (8003de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	0adb      	lsrs	r3, r3, #11
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	4903      	ldr	r1, [pc, #12]	@ (8003de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd6:	5ccb      	ldrb	r3, [r1, r3]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40021000 	.word	0x40021000
 8003de4:	0800bddc 	.word	0x0800bddc

08003de8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003df4:	4b2c      	ldr	r3, [pc, #176]	@ (8003ea8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e00:	f7ff f85e 	bl	8002ec0 <HAL_PWREx_GetVoltageRange>
 8003e04:	6138      	str	r0, [r7, #16]
 8003e06:	e014      	b.n	8003e32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e08:	4b27      	ldr	r3, [pc, #156]	@ (8003ea8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0c:	4a26      	ldr	r2, [pc, #152]	@ (8003ea8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e12:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e14:	4b24      	ldr	r3, [pc, #144]	@ (8003ea8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e20:	f7ff f84e 	bl	8002ec0 <HAL_PWREx_GetVoltageRange>
 8003e24:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e26:	4b20      	ldr	r3, [pc, #128]	@ (8003ea8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003e2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e30:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e3e:	d10b      	bne.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b80      	cmp	r3, #128	@ 0x80
 8003e44:	d919      	bls.n	8003e7a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e4a:	d902      	bls.n	8003e52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003e50:	e013      	b.n	8003e7a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e52:	2301      	movs	r3, #1
 8003e54:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003e56:	e010      	b.n	8003e7a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b80      	cmp	r3, #128	@ 0x80
 8003e5c:	d902      	bls.n	8003e64 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e5e:	2303      	movs	r3, #3
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	e00a      	b.n	8003e7a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b80      	cmp	r3, #128	@ 0x80
 8003e68:	d102      	bne.n	8003e70 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	e004      	b.n	8003e7a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b70      	cmp	r3, #112	@ 0x70
 8003e74:	d101      	bne.n	8003e7a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e76:	2301      	movs	r3, #1
 8003e78:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003eac <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 020f 	bic.w	r2, r3, #15
 8003e82:	490a      	ldr	r1, [pc, #40]	@ (8003eac <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003e8a:	4b08      	ldr	r3, [pc, #32]	@ (8003eac <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	40022000 	.word	0x40022000

08003eb0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eb6:	4b31      	ldr	r3, [pc, #196]	@ (8003f7c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8003f7c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	3301      	adds	r3, #1
 8003ecc:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d015      	beq.n	8003f00 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d839      	bhi.n	8003f4e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d01c      	beq.n	8003f1a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d133      	bne.n	8003f4e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ee6:	4a26      	ldr	r2, [pc, #152]	@ (8003f80 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eee:	4a23      	ldr	r2, [pc, #140]	@ (8003f7c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003ef0:	68d2      	ldr	r2, [r2, #12]
 8003ef2:	0a12      	lsrs	r2, r2, #8
 8003ef4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ef8:	fb02 f303 	mul.w	r3, r2, r3
 8003efc:	613b      	str	r3, [r7, #16]
      break;
 8003efe:	e029      	b.n	8003f54 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f00:	4a1f      	ldr	r2, [pc, #124]	@ (8003f80 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	4a1c      	ldr	r2, [pc, #112]	@ (8003f7c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003f0a:	68d2      	ldr	r2, [r2, #12]
 8003f0c:	0a12      	lsrs	r2, r2, #8
 8003f0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f12:	fb02 f303 	mul.w	r3, r2, r3
 8003f16:	613b      	str	r3, [r7, #16]
      break;
 8003f18:	e01c      	b.n	8003f54 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f1a:	4b18      	ldr	r3, [pc, #96]	@ (8003f7c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d107      	bne.n	8003f36 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f26:	4b15      	ldr	r3, [pc, #84]	@ (8003f7c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f2c:	0a1b      	lsrs	r3, r3, #8
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	e005      	b.n	8003f42 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f36:	4b11      	ldr	r3, [pc, #68]	@ (8003f7c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	091b      	lsrs	r3, r3, #4
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8003f42:	4a10      	ldr	r2, [pc, #64]	@ (8003f84 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4a:	613b      	str	r3, [r7, #16]
        break;
 8003f4c:	e002      	b.n	8003f54 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	613b      	str	r3, [r7, #16]
      break;
 8003f52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003f54:	4b09      	ldr	r3, [pc, #36]	@ (8003f7c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	0e5b      	lsrs	r3, r3, #25
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	3301      	adds	r3, #1
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003f6e:	683b      	ldr	r3, [r7, #0]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	00f42400 	.word	0x00f42400
 8003f84:	0800bde4 	.word	0x0800bde4

08003f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f90:	2300      	movs	r3, #0
 8003f92:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f94:	2300      	movs	r3, #0
 8003f96:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d040      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fa8:	2b80      	cmp	r3, #128	@ 0x80
 8003faa:	d02a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003fac:	2b80      	cmp	r3, #128	@ 0x80
 8003fae:	d825      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003fb0:	2b60      	cmp	r3, #96	@ 0x60
 8003fb2:	d026      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003fb4:	2b60      	cmp	r3, #96	@ 0x60
 8003fb6:	d821      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003fb8:	2b40      	cmp	r3, #64	@ 0x40
 8003fba:	d006      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003fbc:	2b40      	cmp	r3, #64	@ 0x40
 8003fbe:	d81d      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d009      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d010      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003fc8:	e018      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fca:	4b8f      	ldr	r3, [pc, #572]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	4a8e      	ldr	r2, [pc, #568]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd4:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fd6:	e015      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	2100      	movs	r1, #0
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f001 faf4 	bl	80055cc <RCCEx_PLLSAI1_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fe8:	e00c      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3320      	adds	r3, #32
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f001 fbd1 	bl	8005798 <RCCEx_PLLSAI2_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ffa:	e003      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	77fb      	strb	r3, [r7, #31]
        break;
 8004000:	e000      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8004002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004004:	7ffb      	ldrb	r3, [r7, #31]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10b      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800400a:	4b7f      	ldr	r3, [pc, #508]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800400c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004010:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004018:	497b      	ldr	r1, [pc, #492]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004020:	e001      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004022:	7ffb      	ldrb	r3, [r7, #31]
 8004024:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d047      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800403a:	d030      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800403c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004040:	d82a      	bhi.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004042:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004046:	d02a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004048:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800404c:	d824      	bhi.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800404e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004052:	d008      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004058:	d81e      	bhi.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800405e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004062:	d010      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004064:	e018      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004066:	4b68      	ldr	r3, [pc, #416]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	4a67      	ldr	r2, [pc, #412]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800406c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004070:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004072:	e015      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3304      	adds	r3, #4
 8004078:	2100      	movs	r1, #0
 800407a:	4618      	mov	r0, r3
 800407c:	f001 faa6 	bl	80055cc <RCCEx_PLLSAI1_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004084:	e00c      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3320      	adds	r3, #32
 800408a:	2100      	movs	r1, #0
 800408c:	4618      	mov	r0, r3
 800408e:	f001 fb83 	bl	8005798 <RCCEx_PLLSAI2_Config>
 8004092:	4603      	mov	r3, r0
 8004094:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004096:	e003      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	77fb      	strb	r3, [r7, #31]
        break;
 800409c:	e000      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800409e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a0:	7ffb      	ldrb	r3, [r7, #31]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10b      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040a6:	4b58      	ldr	r3, [pc, #352]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b4:	4954      	ldr	r1, [pc, #336]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80040bc:	e001      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040be:	7ffb      	ldrb	r3, [r7, #31]
 80040c0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 80ab 	beq.w	8004226 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040d0:	2300      	movs	r3, #0
 80040d2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040d4:	4b4c      	ldr	r3, [pc, #304]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10d      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e0:	4b49      	ldr	r3, [pc, #292]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e4:	4a48      	ldr	r2, [pc, #288]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ec:	4b46      	ldr	r3, [pc, #280]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040f8:	2301      	movs	r3, #1
 80040fa:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040fc:	4b43      	ldr	r3, [pc, #268]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a42      	ldr	r2, [pc, #264]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004106:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004108:	f7fd fab8 	bl	800167c <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800410e:	e00f      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004110:	f7fd fab4 	bl	800167c <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d908      	bls.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800411e:	4b3b      	ldr	r3, [pc, #236]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800412e:	e006      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004130:	4b36      	ldr	r3, [pc, #216]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0e9      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800413c:	e000      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800413e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004140:	7ffb      	ldrb	r3, [r7, #31]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d164      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004146:	4b30      	ldr	r3, [pc, #192]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800414c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004150:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01f      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	429a      	cmp	r2, r3
 8004162:	d019      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004164:	4b28      	ldr	r3, [pc, #160]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800416a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800416e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004170:	4b25      	ldr	r3, [pc, #148]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004176:	4a24      	ldr	r2, [pc, #144]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800417c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004180:	4b21      	ldr	r3, [pc, #132]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004186:	4a20      	ldr	r2, [pc, #128]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800418c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004190:	4a1d      	ldr	r2, [pc, #116]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d01f      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a2:	f7fd fa6b 	bl	800167c <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041a8:	e012      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041aa:	f7fd fa67 	bl	800167c <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d909      	bls.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041bc:	4b12      	ldr	r3, [pc, #72]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10a      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80041ce:	e007      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0e5      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x222>
 80041de:	e000      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80041e0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80041e2:	7ffb      	ldrb	r3, [r7, #31]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10c      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041e8:	4b07      	ldr	r3, [pc, #28]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f8:	4903      	ldr	r1, [pc, #12]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004200:	e008      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004202:	7ffb      	ldrb	r3, [r7, #31]
 8004204:	77bb      	strb	r3, [r7, #30]
 8004206:	e005      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8004208:	40021000 	.word	0x40021000
 800420c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004210:	7ffb      	ldrb	r3, [r7, #31]
 8004212:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004214:	7dfb      	ldrb	r3, [r7, #23]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d105      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800421a:	4b9c      	ldr	r3, [pc, #624]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800421c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421e:	4a9b      	ldr	r2, [pc, #620]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004220:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004224:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004232:	4b96      	ldr	r3, [pc, #600]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004238:	f023 0203 	bic.w	r2, r3, #3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004240:	4992      	ldr	r1, [pc, #584]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004254:	4b8d      	ldr	r3, [pc, #564]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425a:	f023 020c 	bic.w	r2, r3, #12
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004262:	498a      	ldr	r1, [pc, #552]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004276:	4b85      	ldr	r3, [pc, #532]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004284:	4981      	ldr	r1, [pc, #516]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004298:	4b7c      	ldr	r3, [pc, #496]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	4979      	ldr	r1, [pc, #484]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042ba:	4b74      	ldr	r3, [pc, #464]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c8:	4970      	ldr	r1, [pc, #448]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042dc:	4b6b      	ldr	r3, [pc, #428]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ea:	4968      	ldr	r1, [pc, #416]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042fe:	4b63      	ldr	r3, [pc, #396]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004304:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800430c:	495f      	ldr	r1, [pc, #380]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004320:	4b5a      	ldr	r3, [pc, #360]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004326:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800432e:	4957      	ldr	r1, [pc, #348]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004342:	4b52      	ldr	r3, [pc, #328]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004348:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004350:	494e      	ldr	r1, [pc, #312]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d031      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004368:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800436c:	d00e      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800436e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004372:	d814      	bhi.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d015      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800437c:	d10f      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800437e:	4b43      	ldr	r3, [pc, #268]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	4a42      	ldr	r2, [pc, #264]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004384:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004388:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800438a:	e00c      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
 8004390:	2100      	movs	r1, #0
 8004392:	4618      	mov	r0, r3
 8004394:	f001 f91a 	bl	80055cc <RCCEx_PLLSAI1_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800439c:	e003      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	77fb      	strb	r3, [r7, #31]
        break;
 80043a2:	e000      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80043a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a6:	7ffb      	ldrb	r3, [r7, #31]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10b      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043ac:	4b37      	ldr	r3, [pc, #220]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043ba:	4934      	ldr	r1, [pc, #208]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80043c2:	e001      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c4:	7ffb      	ldrb	r3, [r7, #31]
 80043c6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043d4:	4b2d      	ldr	r3, [pc, #180]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043da:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e2:	492a      	ldr	r1, [pc, #168]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043f6:	4b25      	ldr	r3, [pc, #148]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004404:	4921      	ldr	r1, [pc, #132]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004418:	4b1c      	ldr	r3, [pc, #112]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004426:	4919      	ldr	r1, [pc, #100]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800443a:	4b14      	ldr	r3, [pc, #80]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800443c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004440:	f023 0203 	bic.w	r2, r3, #3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004448:	4910      	ldr	r1, [pc, #64]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d02b      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800445c:	4b0b      	ldr	r3, [pc, #44]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004462:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800446a:	4908      	ldr	r1, [pc, #32]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004476:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800447a:	d109      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800447c:	4b03      	ldr	r3, [pc, #12]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4a02      	ldr	r2, [pc, #8]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004482:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004486:	60d3      	str	r3, [r2, #12]
 8004488:	e014      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004494:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004498:	d10c      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3304      	adds	r3, #4
 800449e:	2101      	movs	r1, #1
 80044a0:	4618      	mov	r0, r3
 80044a2:	f001 f893 	bl	80055cc <RCCEx_PLLSAI1_Config>
 80044a6:	4603      	mov	r3, r0
 80044a8:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80044aa:	7ffb      	ldrb	r3, [r7, #31]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80044b0:	7ffb      	ldrb	r3, [r7, #31]
 80044b2:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d04a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044c8:	d108      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x554>
 80044ca:	4b70      	ldr	r3, [pc, #448]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044d0:	4a6e      	ldr	r2, [pc, #440]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044d6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80044da:	e012      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80044dc:	4b6b      	ldr	r3, [pc, #428]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044ea:	4968      	ldr	r1, [pc, #416]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80044f2:	4b66      	ldr	r3, [pc, #408]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044f8:	4a64      	ldr	r2, [pc, #400]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044fe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004506:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800450a:	d10d      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3304      	adds	r3, #4
 8004510:	2101      	movs	r1, #1
 8004512:	4618      	mov	r0, r3
 8004514:	f001 f85a 	bl	80055cc <RCCEx_PLLSAI1_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800451c:	7ffb      	ldrb	r3, [r7, #31]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d019      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8004522:	7ffb      	ldrb	r3, [r7, #31]
 8004524:	77bb      	strb	r3, [r7, #30]
 8004526:	e016      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800452c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004530:	d106      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004532:	4b56      	ldr	r3, [pc, #344]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	4a55      	ldr	r2, [pc, #340]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004538:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800453c:	60d3      	str	r3, [r2, #12]
 800453e:	e00a      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004548:	d105      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800454a:	4b50      	ldr	r3, [pc, #320]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	4a4f      	ldr	r2, [pc, #316]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004554:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d028      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004562:	4b4a      	ldr	r3, [pc, #296]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004568:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004570:	4946      	ldr	r1, [pc, #280]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800457c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004580:	d106      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004582:	4b42      	ldr	r3, [pc, #264]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	4a41      	ldr	r2, [pc, #260]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800458c:	60d3      	str	r3, [r2, #12]
 800458e:	e011      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004594:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004598:	d10c      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3304      	adds	r3, #4
 800459e:	2101      	movs	r1, #1
 80045a0:	4618      	mov	r0, r3
 80045a2:	f001 f813 	bl	80055cc <RCCEx_PLLSAI1_Config>
 80045a6:	4603      	mov	r3, r0
 80045a8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80045aa:	7ffb      	ldrb	r3, [r7, #31]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80045b0:	7ffb      	ldrb	r3, [r7, #31]
 80045b2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d01e      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045c0:	4b32      	ldr	r3, [pc, #200]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045d0:	492e      	ldr	r1, [pc, #184]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045e2:	d10c      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3304      	adds	r3, #4
 80045e8:	2102      	movs	r1, #2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 ffee 	bl	80055cc <RCCEx_PLLSAI1_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80045f4:	7ffb      	ldrb	r3, [r7, #31]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80045fa:	7ffb      	ldrb	r3, [r7, #31]
 80045fc:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00b      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800460a:	4b20      	ldr	r3, [pc, #128]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800460c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004610:	f023 0204 	bic.w	r2, r3, #4
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800461a:	491c      	ldr	r1, [pc, #112]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800462e:	4b17      	ldr	r3, [pc, #92]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004630:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004634:	f023 0218 	bic.w	r2, r3, #24
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463e:	4913      	ldr	r1, [pc, #76]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d017      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004652:	4b0e      	ldr	r3, [pc, #56]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004654:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004658:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004662:	490a      	ldr	r1, [pc, #40]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004670:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004674:	d105      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004676:	4b05      	ldr	r3, [pc, #20]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	4a04      	ldr	r2, [pc, #16]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800467c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004680:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004682:	7fbb      	ldrb	r3, [r7, #30]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3720      	adds	r7, #32
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40021000 	.word	0x40021000

08004690 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  *            @arg @ref RCC_PERIPHCLK_FDCAN  FDCAN peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;   /* Default is 0 */
 8004698:	2300      	movs	r3, #0
 800469a:	61fb      	str	r3, [r7, #28]
  uint32_t pll_oscsource;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046a2:	d13e      	bne.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80046a4:	4b45      	ldr	r3, [pc, #276]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ae:	60fb      	str	r3, [r7, #12]

    switch (srcclk)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046b6:	d028      	beq.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046be:	f200 8771 	bhi.w	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046c8:	d005      	beq.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046d0:	d00e      	beq.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 80046d2:	f000 bf67 	b.w	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80046d6:	4b39      	ldr	r3, [pc, #228]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	f040 8761 	bne.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
          frequency = LSE_VALUE;
 80046e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ea:	61fb      	str	r3, [r7, #28]
        break;
 80046ec:	f000 bf5c 	b.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80046f0:	4b32      	ldr	r3, [pc, #200]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80046f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	f040 8756 	bne.w	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
          frequency = LSI_VALUE;
 8004700:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004704:	61fb      	str	r3, [r7, #28]
        break;
 8004706:	f000 bf51 	b.w	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800470a:	4b2c      	ldr	r3, [pc, #176]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004716:	f040 874b 	bne.w	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = HSE_VALUE / 32U;
 800471a:	4b29      	ldr	r3, [pc, #164]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
 800471c:	61fb      	str	r3, [r7, #28]
        break;
 800471e:	f000 bf47 	b.w	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004722:	4b26      	ldr	r3, [pc, #152]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch (pll_oscsource)
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b03      	cmp	r3, #3
 8004730:	d036      	beq.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	2b03      	cmp	r3, #3
 8004736:	d849      	bhi.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d003      	beq.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d020      	beq.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004744:	e042      	b.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {
      case RCC_PLLSOURCE_MSI:   /* MSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004746:	4b1d      	ldr	r3, [pc, #116]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b02      	cmp	r3, #2
 8004750:	d116      	bne.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        {
          /*MSI frequency range in HZ*/
          pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004752:	4b1a      	ldr	r3, [pc, #104]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d005      	beq.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800475e:	4b17      	ldr	r3, [pc, #92]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	091b      	lsrs	r3, r3, #4
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	e005      	b.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800476a:	4b14      	ldr	r3, [pc, #80]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800476c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004770:	0a1b      	lsrs	r3, r3, #8
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	4a13      	ldr	r2, [pc, #76]	@ (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
 8004778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477c:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 800477e:	e028      	b.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          pllvco = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	61bb      	str	r3, [r7, #24]
        break;
 8004784:	e025      	b.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      case RCC_PLLSOURCE_HSI:   /* HSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004786:	4b0d      	ldr	r3, [pc, #52]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800478e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004792:	d102      	bne.n	800479a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
        {
          pllvco = HSI_VALUE;
 8004794:	4b0c      	ldr	r3, [pc, #48]	@ (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>)
 8004796:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 8004798:	e01b      	b.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          pllvco = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	61bb      	str	r3, [r7, #24]
        break;
 800479e:	e018      	b.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      case RCC_PLLSOURCE_HSE:   /* HSE ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80047a0:	4b06      	ldr	r3, [pc, #24]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047ac:	d102      	bne.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          pllvco = HSE_VALUE;
 80047ae:	4b06      	ldr	r3, [pc, #24]	@ (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>)
 80047b0:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 80047b2:	e00e      	b.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          pllvco = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61bb      	str	r3, [r7, #24]
        break;
 80047b8:	e00b      	b.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000
 80047c0:	0007a120 	.word	0x0007a120
 80047c4:	0800bde4 	.word	0x0800bde4
 80047c8:	00f42400 	.word	0x00f42400
      default:
        /* No source */
        pllvco = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61bb      	str	r3, [r7, #24]
        break;
 80047d0:	bf00      	nop
    }

    switch (PeriphClk)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047d8:	f000 8659 	beq.w	800548e <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047e2:	f200 86e7 	bhi.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047ec:	f000 8605 	beq.w	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047f6:	f200 86dd 	bhi.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004800:	f000 8468 	beq.w	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800480a:	f200 86d3 	bhi.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004814:	f000 8530 	beq.w	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800481e:	f200 86c9 	bhi.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004828:	f000 8180 	beq.w	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004832:	f200 86bf 	bhi.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800483c:	f000 80c2 	beq.w	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004846:	f200 86b5 	bhi.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004850:	f000 842f 	beq.w	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800485a:	f200 86ab 	bhi.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004864:	f000 83e7 	beq.w	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800486e:	f200 86a1 	bhi.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004878:	f000 80a4 	beq.w	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004882:	f200 8697 	bhi.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800488c:	f000 8092 	beq.w	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004896:	f200 868d 	bhi.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048a0:	f000 8080 	beq.w	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048aa:	f200 8683 	bhi.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b4:	f000 8553 	beq.w	800535e <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048be:	f200 8679 	bhi.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048c8:	f000 84ff 	beq.w	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048d2:	f200 866f 	bhi.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048dc:	f000 84a0 	beq.w	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048e6:	f200 8665 	bhi.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b80      	cmp	r3, #128	@ 0x80
 80048ee:	f000 846b 	beq.w	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b80      	cmp	r3, #128	@ 0x80
 80048f6:	f200 865d 	bhi.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d84b      	bhi.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 8656 	beq.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3b01      	subs	r3, #1
 800490c:	2b1f      	cmp	r3, #31
 800490e:	f200 8651 	bhi.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 8004912:	a201      	add	r2, pc, #4	@ (adr r2, 8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004918:	08004d31 	.word	0x08004d31
 800491c:	08004da5 	.word	0x08004da5
 8004920:	080055b5 	.word	0x080055b5
 8004924:	08004e37 	.word	0x08004e37
 8004928:	080055b5 	.word	0x080055b5
 800492c:	080055b5 	.word	0x080055b5
 8004930:	080055b5 	.word	0x080055b5
 8004934:	08004eaf 	.word	0x08004eaf
 8004938:	080055b5 	.word	0x080055b5
 800493c:	080055b5 	.word	0x080055b5
 8004940:	080055b5 	.word	0x080055b5
 8004944:	080055b5 	.word	0x080055b5
 8004948:	080055b5 	.word	0x080055b5
 800494c:	080055b5 	.word	0x080055b5
 8004950:	080055b5 	.word	0x080055b5
 8004954:	08004f33 	.word	0x08004f33
 8004958:	080055b5 	.word	0x080055b5
 800495c:	080055b5 	.word	0x080055b5
 8004960:	080055b5 	.word	0x080055b5
 8004964:	080055b5 	.word	0x080055b5
 8004968:	080055b5 	.word	0x080055b5
 800496c:	080055b5 	.word	0x080055b5
 8004970:	080055b5 	.word	0x080055b5
 8004974:	080055b5 	.word	0x080055b5
 8004978:	080055b5 	.word	0x080055b5
 800497c:	080055b5 	.word	0x080055b5
 8004980:	080055b5 	.word	0x080055b5
 8004984:	080055b5 	.word	0x080055b5
 8004988:	080055b5 	.word	0x080055b5
 800498c:	080055b5 	.word	0x080055b5
 8004990:	080055b5 	.word	0x080055b5
 8004994:	08004fb5 	.word	0x08004fb5
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b40      	cmp	r3, #64	@ 0x40
 800499c:	f000 83e8 	beq.w	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>

        break;

      default:
        /* Unexpected case, frequency default init at 0 */
        break;
 80049a0:	f000 be08 	b.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80049a4:	69b9      	ldr	r1, [r7, #24]
 80049a6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80049aa:	f001 f851 	bl	8005a50 <RCCEx_GetSAIxPeriphCLKFreq>
 80049ae:	61f8      	str	r0, [r7, #28]
        break;
 80049b0:	f000 be03 	b.w	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80049b4:	69b9      	ldr	r1, [r7, #24]
 80049b6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80049ba:	f001 f849 	bl	8005a50 <RCCEx_GetSAIxPeriphCLKFreq>
 80049be:	61f8      	str	r0, [r7, #28]
        break;
 80049c0:	f000 bdfb 	b.w	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 80049c4:	4b9c      	ldr	r3, [pc, #624]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ca:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80049d6:	d015      	beq.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80049de:	f200 8096 	bhi.w	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049e8:	d02a      	beq.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049f0:	f200 808d 	bhi.w	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d07f      	beq.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a00:	d04b      	beq.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
            break;
 8004a02:	e084      	b.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004a04:	4b8c      	ldr	r3, [pc, #560]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	f040 8081 	bne.w	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004a12:	4b89      	ldr	r3, [pc, #548]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0308 	and.w	r3, r3, #8
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8004a1e:	4b86      	ldr	r3, [pc, #536]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	091b      	lsrs	r3, r3, #4
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	e005      	b.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8004a2a:	4b83      	ldr	r3, [pc, #524]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a30:	0a1b      	lsrs	r3, r3, #8
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	4a81      	ldr	r2, [pc, #516]	@ (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a3c:	61fb      	str	r3, [r7, #28]
            break;
 8004a3e:	e069      	b.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004a40:	4b7d      	ldr	r3, [pc, #500]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a4c:	d165      	bne.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004a4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a5a:	d15e      	bne.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a5c:	4b76      	ldr	r3, [pc, #472]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	091b      	lsrs	r3, r3, #4
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	3301      	adds	r3, #1
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6e:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004a70:	4b71      	ldr	r3, [pc, #452]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	0a1b      	lsrs	r3, r3, #8
 8004a76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a7a:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	fb03 f202 	mul.w	r2, r3, r2
 8004a84:	4b6c      	ldr	r3, [pc, #432]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	0d5b      	lsrs	r3, r3, #21
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	3301      	adds	r3, #1
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a96:	61fb      	str	r3, [r7, #28]
            break;
 8004a98:	e03f      	b.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004a9a:	4b67      	ldr	r3, [pc, #412]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aa6:	d13b      	bne.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
              if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004aa8:	4b63      	ldr	r3, [pc, #396]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ab0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ab4:	d134      	bne.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
                pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8004ab6:	f000 ff1b 	bl	80058f0 <RCCEx_PLLSAI1_GetVCOFreq>
 8004aba:	61b8      	str	r0, [r7, #24]
                pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004abc:	4b5e      	ldr	r3, [pc, #376]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ace:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004ad0:	4b59      	ldr	r3, [pc, #356]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	0a1b      	lsrs	r3, r3, #8
 8004ad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ada:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	fb03 f202 	mul.w	r2, r3, r2
 8004ae4:	4b54      	ldr	r3, [pc, #336]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	0d5b      	lsrs	r3, r3, #21
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	3301      	adds	r3, #1
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af6:	61fb      	str	r3, [r7, #28]
            break;
 8004af8:	e012      	b.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
            if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004afa:	4b4f      	ldr	r3, [pc, #316]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004afc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d10e      	bne.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
              frequency = HSI48_VALUE;
 8004b08:	4b4d      	ldr	r3, [pc, #308]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8004b0a:	61fb      	str	r3, [r7, #28]
            break;
 8004b0c:	e00b      	b.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
            break;
 8004b0e:	bf00      	nop
 8004b10:	f000 bd53 	b.w	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8004b14:	bf00      	nop
 8004b16:	f000 bd50 	b.w	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8004b1a:	bf00      	nop
 8004b1c:	f000 bd4d 	b.w	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8004b20:	bf00      	nop
 8004b22:	f000 bd4a 	b.w	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8004b26:	bf00      	nop
        break;
 8004b28:	f000 bd47 	b.w	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        if (HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL)) /* PLLP ? */
 8004b2c:	4b42      	ldr	r3, [pc, #264]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b3a:	d13d      	bne.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004b3c:	4b3e      	ldr	r3, [pc, #248]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b48:	f040 8536 	bne.w	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
            if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8004b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b58:	f040 852e 	bne.w	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004b5c:	4b36      	ldr	r3, [pc, #216]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	3301      	adds	r3, #1
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6e:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004b70:	4b31      	ldr	r3, [pc, #196]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	0a1b      	lsrs	r3, r3, #8
 8004b76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b7a:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	0edb      	lsrs	r3, r3, #27
 8004b82:	f003 031f 	and.w	r3, r3, #31
 8004b86:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
                  pllp = 17U;
 8004b9a:	2311      	movs	r3, #17
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	e001      	b.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                  pllp = 7U;
 8004ba0:	2307      	movs	r3, #7
 8004ba2:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	fb03 f202 	mul.w	r2, r3, r2
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb2:	61fb      	str	r3, [r7, #28]
        break;
 8004bb4:	f000 bd00 	b.w	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
          srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8004bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bbe:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004bca:	d016      	beq.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004bd2:	f200 809e 	bhi.w	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bdc:	d032      	beq.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004be4:	f200 8095 	bhi.w	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 8087 	beq.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bf6:	d052      	beq.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
              break;
 8004bf8:	e08b      	b.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	f040 8088 	bne.w	8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
                frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004c08:	4b0b      	ldr	r3, [pc, #44]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8004c14:	4b08      	ldr	r3, [pc, #32]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	091b      	lsrs	r3, r3, #4
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	e005      	b.n	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8004c20:	4b05      	ldr	r3, [pc, #20]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8004c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c26:	0a1b      	lsrs	r3, r3, #8
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	4a03      	ldr	r2, [pc, #12]	@ (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c32:	61fb      	str	r3, [r7, #28]
              break;
 8004c34:	e070      	b.n	8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 8004c36:	bf00      	nop
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	0800bde4 	.word	0x0800bde4
 8004c40:	02dc6c00 	.word	0x02dc6c00
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004c44:	4baa      	ldr	r3, [pc, #680]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c50:	d165      	bne.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
                if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004c52:	4ba7      	ldr	r3, [pc, #668]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c5e:	d15e      	bne.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004c60:	4ba3      	ldr	r3, [pc, #652]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	091b      	lsrs	r3, r3, #4
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c72:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004c74:	4b9e      	ldr	r3, [pc, #632]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	0a1b      	lsrs	r3, r3, #8
 8004c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c7e:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	fb03 f202 	mul.w	r2, r3, r2
 8004c88:	4b99      	ldr	r3, [pc, #612]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	0d5b      	lsrs	r3, r3, #21
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	3301      	adds	r3, #1
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9a:	61fb      	str	r3, [r7, #28]
              break;
 8004c9c:	e03f      	b.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004c9e:	4b94      	ldr	r3, [pc, #592]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ca6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004caa:	d13b      	bne.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
                if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004cac:	4b90      	ldr	r3, [pc, #576]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cb8:	d134      	bne.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
                  pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8004cba:	f000 fe19 	bl	80058f0 <RCCEx_PLLSAI1_GetVCOFreq>
 8004cbe:	61b8      	str	r0, [r7, #24]
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004cc0:	4b8b      	ldr	r3, [pc, #556]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	3301      	adds	r3, #1
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd2:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004cd4:	4b86      	ldr	r3, [pc, #536]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	0a1b      	lsrs	r3, r3, #8
 8004cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cde:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	fb03 f202 	mul.w	r2, r3, r2
 8004ce8:	4b81      	ldr	r3, [pc, #516]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	0d5b      	lsrs	r3, r3, #21
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfa:	61fb      	str	r3, [r7, #28]
              break;
 8004cfc:	e012      	b.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
              if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004cfe:	4b7c      	ldr	r3, [pc, #496]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d10e      	bne.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
                frequency = HSI48_VALUE;
 8004d0c:	4b79      	ldr	r3, [pc, #484]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004d0e:	61fb      	str	r3, [r7, #28]
              break;
 8004d10:	e00b      	b.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
              break;
 8004d12:	bf00      	nop
 8004d14:	f000 bc50 	b.w	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
              break;
 8004d18:	bf00      	nop
 8004d1a:	f000 bc4d 	b.w	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
              break;
 8004d1e:	bf00      	nop
 8004d20:	f000 bc4a 	b.w	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
              break;
 8004d24:	bf00      	nop
 8004d26:	f000 bc47 	b.w	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
              break;
 8004d2a:	bf00      	nop
        break;
 8004d2c:	f000 bc44 	b.w	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004d30:	4b6f      	ldr	r3, [pc, #444]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d827      	bhi.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004d42:	a201      	add	r2, pc, #4	@ (adr r2, 8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004d61 	.word	0x08004d61
 8004d50:	08004d69 	.word	0x08004d69
 8004d54:	08004d7d 	.word	0x08004d7d
            frequency = HAL_RCC_GetPCLK2Freq();
 8004d58:	f7ff f832 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 8004d5c:	61f8      	str	r0, [r7, #28]
            break;
 8004d5e:	e01f      	b.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
            frequency = HAL_RCC_GetSysClockFreq();
 8004d60:	f7fe ff6a 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8004d64:	61f8      	str	r0, [r7, #28]
            break;
 8004d66:	e01b      	b.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d68:	4b61      	ldr	r3, [pc, #388]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d74:	d110      	bne.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
              frequency = HSI_VALUE;
 8004d76:	4b60      	ldr	r3, [pc, #384]	@ (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 8004d78:	61fb      	str	r3, [r7, #28]
            break;
 8004d7a:	e00d      	b.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d7c:	4b5c      	ldr	r3, [pc, #368]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d109      	bne.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
              frequency = LSE_VALUE;
 8004d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d8e:	61fb      	str	r3, [r7, #28]
            break;
 8004d90:	e005      	b.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
            break;
 8004d92:	bf00      	nop
 8004d94:	f000 bc11 	b.w	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8004d98:	bf00      	nop
 8004d9a:	f000 bc0e 	b.w	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8004d9e:	bf00      	nop
        break;
 8004da0:	f000 bc0b 	b.w	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004da4:	4b52      	ldr	r3, [pc, #328]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004daa:	f003 030c 	and.w	r3, r3, #12
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b0c      	cmp	r3, #12
 8004db4:	d839      	bhi.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8004db6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>)
 8004db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbc:	08004df1 	.word	0x08004df1
 8004dc0:	08004e2b 	.word	0x08004e2b
 8004dc4:	08004e2b 	.word	0x08004e2b
 8004dc8:	08004e2b 	.word	0x08004e2b
 8004dcc:	08004df9 	.word	0x08004df9
 8004dd0:	08004e2b 	.word	0x08004e2b
 8004dd4:	08004e2b 	.word	0x08004e2b
 8004dd8:	08004e2b 	.word	0x08004e2b
 8004ddc:	08004e01 	.word	0x08004e01
 8004de0:	08004e2b 	.word	0x08004e2b
 8004de4:	08004e2b 	.word	0x08004e2b
 8004de8:	08004e2b 	.word	0x08004e2b
 8004dec:	08004e15 	.word	0x08004e15
            frequency = HAL_RCC_GetPCLK1Freq();
 8004df0:	f7fe ffd2 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 8004df4:	61f8      	str	r0, [r7, #28]
            break;
 8004df6:	e01d      	b.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            frequency = HAL_RCC_GetSysClockFreq();
 8004df8:	f7fe ff1e 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8004dfc:	61f8      	str	r0, [r7, #28]
            break;
 8004dfe:	e019      	b.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e00:	4b3b      	ldr	r3, [pc, #236]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e0c:	d10f      	bne.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
              frequency = HSI_VALUE;
 8004e0e:	4b3a      	ldr	r3, [pc, #232]	@ (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 8004e10:	61fb      	str	r3, [r7, #28]
            break;
 8004e12:	e00c      	b.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e14:	4b36      	ldr	r3, [pc, #216]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d107      	bne.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
              frequency = LSE_VALUE;
 8004e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e26:	61fb      	str	r3, [r7, #28]
            break;
 8004e28:	e003      	b.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
            break;
 8004e2a:	bf00      	nop
 8004e2c:	e3c5      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8004e2e:	bf00      	nop
 8004e30:	e3c3      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8004e32:	bf00      	nop
        break;
 8004e34:	e3c1      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004e36:	4b2e      	ldr	r3, [pc, #184]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b30      	cmp	r3, #48	@ 0x30
 8004e46:	d021      	beq.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b30      	cmp	r3, #48	@ 0x30
 8004e4c:	d829      	bhi.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d011      	beq.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b20      	cmp	r3, #32
 8004e58:	d823      	bhi.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b10      	cmp	r3, #16
 8004e64:	d004      	beq.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
            break;
 8004e66:	e01c      	b.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004e68:	f7fe ff96 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 8004e6c:	61f8      	str	r0, [r7, #28]
            break;
 8004e6e:	e01d      	b.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
            frequency = HAL_RCC_GetSysClockFreq();
 8004e70:	f7fe fee2 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8004e74:	61f8      	str	r0, [r7, #28]
            break;
 8004e76:	e019      	b.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e78:	4b1d      	ldr	r3, [pc, #116]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e84:	d10f      	bne.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
              frequency = HSI_VALUE;
 8004e86:	4b1c      	ldr	r3, [pc, #112]	@ (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 8004e88:	61fb      	str	r3, [r7, #28]
            break;
 8004e8a:	e00c      	b.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e8c:	4b18      	ldr	r3, [pc, #96]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d107      	bne.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
              frequency = LSE_VALUE;
 8004e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e9e:	61fb      	str	r3, [r7, #28]
            break;
 8004ea0:	e003      	b.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            break;
 8004ea2:	bf00      	nop
 8004ea4:	e389      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8004ea6:	bf00      	nop
 8004ea8:	e387      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8004eaa:	bf00      	nop
        break;
 8004eac:	e385      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004eae:	4b10      	ldr	r3, [pc, #64]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ebe:	d027      	beq.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ec4:	d82f      	bhi.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b80      	cmp	r3, #128	@ 0x80
 8004eca:	d017      	beq.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b80      	cmp	r3, #128	@ 0x80
 8004ed0:	d829      	bhi.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b40      	cmp	r3, #64	@ 0x40
 8004edc:	d004      	beq.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
            break;
 8004ede:	e022      	b.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004ee0:	f7fe ff5a 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 8004ee4:	61f8      	str	r0, [r7, #28]
            break;
 8004ee6:	e023      	b.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
            frequency = HAL_RCC_GetSysClockFreq();
 8004ee8:	f7fe fea6 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8004eec:	61f8      	str	r0, [r7, #28]
            break;
 8004eee:	e01f      	b.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	02dc6c00 	.word	0x02dc6c00
 8004ef8:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004efc:	4b99      	ldr	r3, [pc, #612]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f08:	d10f      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
              frequency = HSI_VALUE;
 8004f0a:	4b97      	ldr	r3, [pc, #604]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004f0c:	61fb      	str	r3, [r7, #28]
            break;
 8004f0e:	e00c      	b.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f10:	4b94      	ldr	r3, [pc, #592]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d107      	bne.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
              frequency = LSE_VALUE;
 8004f1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f22:	61fb      	str	r3, [r7, #28]
            break;
 8004f24:	e003      	b.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
            break;
 8004f26:	bf00      	nop
 8004f28:	e347      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8004f2a:	bf00      	nop
 8004f2c:	e345      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8004f2e:	bf00      	nop
        break;
 8004f30:	e343      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004f32:	4b8c      	ldr	r3, [pc, #560]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f44:	d025      	beq.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0x902>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f4c:	d82c      	bhi.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f54:	d013      	beq.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f5c:	d824      	bhi.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d004      	beq.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f6a:	d004      	beq.n	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
            break;
 8004f6c:	e01c      	b.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004f6e:	f7fe ff13 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 8004f72:	61f8      	str	r0, [r7, #28]
            break;
 8004f74:	e01d      	b.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
            frequency = HAL_RCC_GetSysClockFreq();
 8004f76:	f7fe fe5f 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8004f7a:	61f8      	str	r0, [r7, #28]
            break;
 8004f7c:	e019      	b.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f7e:	4b79      	ldr	r3, [pc, #484]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f8a:	d10f      	bne.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
              frequency = HSI_VALUE;
 8004f8c:	4b76      	ldr	r3, [pc, #472]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004f8e:	61fb      	str	r3, [r7, #28]
            break;
 8004f90:	e00c      	b.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f92:	4b74      	ldr	r3, [pc, #464]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d107      	bne.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
              frequency = LSE_VALUE;
 8004fa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fa4:	61fb      	str	r3, [r7, #28]
            break;
 8004fa6:	e003      	b.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
            break;
 8004fa8:	bf00      	nop
 8004faa:	e306      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8004fac:	bf00      	nop
 8004fae:	e304      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8004fb0:	bf00      	nop
        break;
 8004fb2:	e302      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004fb4:	4b6b      	ldr	r3, [pc, #428]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fba:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fc6:	d025      	beq.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fce:	d82c      	bhi.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fd6:	d013      	beq.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fde:	d824      	bhi.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d004      	beq.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fec:	d004      	beq.n	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
            break;
 8004fee:	e01c      	b.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004ff0:	f7fe fed2 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 8004ff4:	61f8      	str	r0, [r7, #28]
            break;
 8004ff6:	e01d      	b.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
            frequency = HAL_RCC_GetSysClockFreq();
 8004ff8:	f7fe fe1e 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8004ffc:	61f8      	str	r0, [r7, #28]
            break;
 8004ffe:	e019      	b.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005000:	4b58      	ldr	r3, [pc, #352]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800500c:	d10f      	bne.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
              frequency = HSI_VALUE;
 800500e:	4b56      	ldr	r3, [pc, #344]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005010:	61fb      	str	r3, [r7, #28]
            break;
 8005012:	e00c      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005014:	4b53      	ldr	r3, [pc, #332]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b02      	cmp	r3, #2
 8005020:	d107      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
              frequency = LSE_VALUE;
 8005022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005026:	61fb      	str	r3, [r7, #28]
            break;
 8005028:	e003      	b.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
            break;
 800502a:	bf00      	nop
 800502c:	e2c5      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 800502e:	bf00      	nop
 8005030:	e2c3      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8005032:	bf00      	nop
        break;
 8005034:	e2c1      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005036:	4b4b      	ldr	r3, [pc, #300]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005048:	d007      	beq.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005050:	d12b      	bne.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
            frequency = HAL_RCC_GetSysClockFreq();
 8005052:	f7fe fdf1 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8005056:	61f8      	str	r0, [r7, #28]
            break;
 8005058:	e02a      	b.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 800505a:	4b42      	ldr	r3, [pc, #264]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d023      	beq.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005066:	f000 fc43 	bl	80058f0 <RCCEx_PLLSAI1_GetVCOFreq>
 800506a:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800506c:	4b3d      	ldr	r3, [pc, #244]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	091b      	lsrs	r3, r3, #4
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	3301      	adds	r3, #1
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	fbb2 f3f3 	udiv	r3, r2, r3
 800507e:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005080:	4b38      	ldr	r3, [pc, #224]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	0a1b      	lsrs	r3, r3, #8
 8005086:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800508a:	60bb      	str	r3, [r7, #8]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	fb03 f202 	mul.w	r2, r3, r2
 8005094:	4b33      	ldr	r3, [pc, #204]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	0e5b      	lsrs	r3, r3, #25
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	3301      	adds	r3, #1
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a6:	61fb      	str	r3, [r7, #28]
            break;
 80050a8:	e001      	b.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
            break;
 80050aa:	bf00      	nop
 80050ac:	e285      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 80050ae:	bf00      	nop
        break;
 80050b0:	e283      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80050b2:	4b2c      	ldr	r3, [pc, #176]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80050b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d103      	bne.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
          frequency = HAL_RCC_GetPCLK2Freq();
 80050c4:	f7fe fe7c 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 80050c8:	61f8      	str	r0, [r7, #28]
        break;
 80050ca:	e276      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
          frequency = HAL_RCC_GetSysClockFreq();
 80050cc:	f7fe fdb4 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 80050d0:	61f8      	str	r0, [r7, #28]
        break;
 80050d2:	e272      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80050d4:	4b23      	ldr	r3, [pc, #140]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80050d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050da:	f003 0318 	and.w	r3, r3, #24
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b10      	cmp	r3, #16
 80050e4:	d010      	beq.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b10      	cmp	r3, #16
 80050ea:	d834      	bhi.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d024      	beq.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            break;
 80050f8:	e02d      	b.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
            frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80050fa:	69b9      	ldr	r1, [r7, #24]
 80050fc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005100:	f000 fca6 	bl	8005a50 <RCCEx_GetSAIxPeriphCLKFreq>
 8005104:	61f8      	str	r0, [r7, #28]
            break;
 8005106:	e02b      	b.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005108:	4b16      	ldr	r3, [pc, #88]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b02      	cmp	r3, #2
 8005112:	d122      	bne.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005114:	4b13      	ldr	r3, [pc, #76]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005120:	4b10      	ldr	r3, [pc, #64]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	091b      	lsrs	r3, r3, #4
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	e005      	b.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
 800512c:	4b0d      	ldr	r3, [pc, #52]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800512e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005132:	0a1b      	lsrs	r3, r3, #8
 8005134:	f003 030f 	and.w	r3, r3, #15
 8005138:	4a0c      	ldr	r2, [pc, #48]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800513a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800513e:	61fb      	str	r3, [r7, #28]
            break;
 8005140:	e00b      	b.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005142:	4b08      	ldr	r3, [pc, #32]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800514a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800514e:	d106      	bne.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0xace>
              frequency = HSI_VALUE;
 8005150:	4b05      	ldr	r3, [pc, #20]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005152:	61fb      	str	r3, [r7, #28]
            break;
 8005154:	e003      	b.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0xace>
            break;
 8005156:	bf00      	nop
 8005158:	e22f      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 800515a:	bf00      	nop
 800515c:	e22d      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 800515e:	bf00      	nop
        break;
 8005160:	e22b      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8005162:	bf00      	nop
 8005164:	40021000 	.word	0x40021000
 8005168:	00f42400 	.word	0x00f42400
 800516c:	0800bde4 	.word	0x0800bde4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005170:	4b96      	ldr	r3, [pc, #600]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005176:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005182:	d013      	beq.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xb1c>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800518a:	d819      	bhi.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d004      	beq.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005198:	d004      	beq.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
            break;
 800519a:	e011      	b.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
            frequency = HAL_RCC_GetPCLK1Freq();
 800519c:	f7fe fdfc 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 80051a0:	61f8      	str	r0, [r7, #28]
            break;
 80051a2:	e010      	b.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb36>
            frequency = HAL_RCC_GetSysClockFreq();
 80051a4:	f7fe fd48 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 80051a8:	61f8      	str	r0, [r7, #28]
            break;
 80051aa:	e00c      	b.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb36>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051ac:	4b87      	ldr	r3, [pc, #540]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051b8:	d104      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
              frequency = HSI_VALUE;
 80051ba:	4b85      	ldr	r3, [pc, #532]	@ (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80051bc:	61fb      	str	r3, [r7, #28]
            break;
 80051be:	e001      	b.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
            break;
 80051c0:	bf00      	nop
 80051c2:	e1fa      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 80051c4:	bf00      	nop
        break;
 80051c6:	e1f8      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80051c8:	4b80      	ldr	r3, [pc, #512]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051da:	d013      	beq.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xb74>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051e2:	d819      	bhi.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d004      	beq.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051f0:	d004      	beq.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            break;
 80051f2:	e011      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            frequency = HAL_RCC_GetPCLK1Freq();
 80051f4:	f7fe fdd0 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 80051f8:	61f8      	str	r0, [r7, #28]
            break;
 80051fa:	e010      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
            frequency = HAL_RCC_GetSysClockFreq();
 80051fc:	f7fe fd1c 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8005200:	61f8      	str	r0, [r7, #28]
            break;
 8005202:	e00c      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005204:	4b71      	ldr	r3, [pc, #452]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800520c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005210:	d104      	bne.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
              frequency = HSI_VALUE;
 8005212:	4b6f      	ldr	r3, [pc, #444]	@ (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005214:	61fb      	str	r3, [r7, #28]
            break;
 8005216:	e001      	b.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
            break;
 8005218:	bf00      	nop
 800521a:	e1ce      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 800521c:	bf00      	nop
        break;
 800521e:	e1cc      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005220:	4b6a      	ldr	r3, [pc, #424]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005226:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005232:	d013      	beq.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800523a:	d819      	bhi.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d004      	beq.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005248:	d004      	beq.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
            break;
 800524a:	e011      	b.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
            frequency = HAL_RCC_GetPCLK1Freq();
 800524c:	f7fe fda4 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 8005250:	61f8      	str	r0, [r7, #28]
            break;
 8005252:	e010      	b.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
            frequency = HAL_RCC_GetSysClockFreq();
 8005254:	f7fe fcf0 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8005258:	61f8      	str	r0, [r7, #28]
            break;
 800525a:	e00c      	b.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800525c:	4b5b      	ldr	r3, [pc, #364]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005264:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005268:	d104      	bne.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
              frequency = HSI_VALUE;
 800526a:	4b59      	ldr	r3, [pc, #356]	@ (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800526c:	61fb      	str	r3, [r7, #28]
            break;
 800526e:	e001      	b.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
            break;
 8005270:	bf00      	nop
 8005272:	e1a2      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8005274:	bf00      	nop
        break;
 8005276:	e1a0      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005278:	4b54      	ldr	r3, [pc, #336]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 800527a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d011      	beq.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xc1e>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d818      	bhi.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc32>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d004      	beq.n	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
            break;
 800529c:	e011      	b.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc32>
            frequency = HAL_RCC_GetPCLK1Freq();
 800529e:	f7fe fd7b 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 80052a2:	61f8      	str	r0, [r7, #28]
            break;
 80052a4:	e010      	b.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
            frequency = HAL_RCC_GetSysClockFreq();
 80052a6:	f7fe fcc7 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 80052aa:	61f8      	str	r0, [r7, #28]
            break;
 80052ac:	e00c      	b.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052ae:	4b47      	ldr	r3, [pc, #284]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ba:	d104      	bne.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
              frequency = HSI_VALUE;
 80052bc:	4b44      	ldr	r3, [pc, #272]	@ (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80052be:	61fb      	str	r3, [r7, #28]
            break;
 80052c0:	e001      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
            break;
 80052c2:	bf00      	nop
 80052c4:	e179      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 80052c6:	bf00      	nop
        break;
 80052c8:	e177      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80052ca:	4b40      	ldr	r3, [pc, #256]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 80052cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80052dc:	d02c      	beq.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80052e4:	d833      	bhi.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80052ec:	d01a      	beq.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xc94>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80052f4:	d82b      	bhi.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005302:	d004      	beq.n	800530e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
            break;
 8005304:	e023      	b.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005306:	f7fe fd47 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 800530a:	61f8      	str	r0, [r7, #28]
            break;
 800530c:	e026      	b.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800530e:	4b2f      	ldr	r3, [pc, #188]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 8005310:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b02      	cmp	r3, #2
 800531a:	d11a      	bne.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
              frequency = LSI_VALUE;
 800531c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005320:	61fb      	str	r3, [r7, #28]
            break;
 8005322:	e016      	b.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005324:	4b29      	ldr	r3, [pc, #164]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800532c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005330:	d111      	bne.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = HSI_VALUE;
 8005332:	4b27      	ldr	r3, [pc, #156]	@ (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005334:	61fb      	str	r3, [r7, #28]
            break;
 8005336:	e00e      	b.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005338:	4b24      	ldr	r3, [pc, #144]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 800533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b02      	cmp	r3, #2
 8005344:	d109      	bne.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
              frequency = LSE_VALUE;
 8005346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800534a:	61fb      	str	r3, [r7, #28]
            break;
 800534c:	e005      	b.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            break;
 800534e:	bf00      	nop
 8005350:	e133      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8005352:	bf00      	nop
 8005354:	e131      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8005356:	bf00      	nop
 8005358:	e12f      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 800535a:	bf00      	nop
        break;
 800535c:	e12d      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800535e:	4b1b      	ldr	r3, [pc, #108]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005364:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005370:	d030      	beq.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005378:	d837      	bhi.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005380:	d01a      	beq.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005388:	d82f      	bhi.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d004      	beq.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0xd0a>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005396:	d004      	beq.n	80053a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd12>
            break;
 8005398:	e027      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            frequency = HAL_RCC_GetPCLK1Freq();
 800539a:	f7fe fcfd 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 800539e:	61f8      	str	r0, [r7, #28]
            break;
 80053a0:	e02a      	b.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80053a2:	4b0a      	ldr	r3, [pc, #40]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 80053a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d11e      	bne.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
              frequency = LSI_VALUE;
 80053b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80053b4:	61fb      	str	r3, [r7, #28]
            break;
 80053b6:	e01a      	b.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053b8:	4b04      	ldr	r3, [pc, #16]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053c4:	d115      	bne.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
              frequency = HSI_VALUE;
 80053c6:	4b02      	ldr	r3, [pc, #8]	@ (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80053c8:	61fb      	str	r3, [r7, #28]
            break;
 80053ca:	e012      	b.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
 80053cc:	40021000 	.word	0x40021000
 80053d0:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80053d4:	4b7b      	ldr	r3, [pc, #492]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 80053d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d109      	bne.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
              frequency = LSE_VALUE;
 80053e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053e6:	61fb      	str	r3, [r7, #28]
            break;
 80053e8:	e005      	b.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
            break;
 80053ea:	bf00      	nop
 80053ec:	e0e5      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 80053ee:	bf00      	nop
 80053f0:	e0e3      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 80053f2:	bf00      	nop
 80053f4:	e0e1      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 80053f6:	bf00      	nop
        break;
 80053f8:	e0df      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80053fa:	4b72      	ldr	r3, [pc, #456]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005400:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800540c:	d02c      	beq.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0xdd8>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005414:	d833      	bhi.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0xdee>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800541c:	d01a      	beq.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005424:	d82b      	bhi.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0xdee>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d004      	beq.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005432:	d004      	beq.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
            break;
 8005434:	e023      	b.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0xdee>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005436:	f7fe fcaf 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 800543a:	61f8      	str	r0, [r7, #28]
            break;
 800543c:	e026      	b.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800543e:	4b61      	ldr	r3, [pc, #388]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 8005440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b02      	cmp	r3, #2
 800544a:	d11a      	bne.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
              frequency = LSI_VALUE;
 800544c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005450:	61fb      	str	r3, [r7, #28]
            break;
 8005452:	e016      	b.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005454:	4b5b      	ldr	r3, [pc, #364]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800545c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005460:	d111      	bne.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
              frequency = HSI_VALUE;
 8005462:	4b59      	ldr	r3, [pc, #356]	@ (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8005464:	61fb      	str	r3, [r7, #28]
            break;
 8005466:	e00e      	b.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005468:	4b56      	ldr	r3, [pc, #344]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 800546a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b02      	cmp	r3, #2
 8005474:	d109      	bne.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
              frequency = LSE_VALUE;
 8005476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800547a:	61fb      	str	r3, [r7, #28]
            break;
 800547c:	e005      	b.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
            break;
 800547e:	bf00      	nop
 8005480:	e09b      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8005482:	bf00      	nop
 8005484:	e099      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8005486:	bf00      	nop
 8005488:	e097      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 800548a:	bf00      	nop
        break;
 800548c:	e095      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800548e:	4b4d      	ldr	r3, [pc, #308]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005494:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054a0:	d042      	beq.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054a8:	d874      	bhi.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d004      	beq.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
            break;
 80054b8:	e06c      	b.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80054ba:	4b42      	ldr	r3, [pc, #264]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054c6:	d167      	bne.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
              frequency = HSE_VALUE;
 80054c8:	4b3f      	ldr	r3, [pc, #252]	@ (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80054ca:	61fb      	str	r3, [r7, #28]
            break;
 80054cc:	e064      	b.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80054ce:	4b3d      	ldr	r3, [pc, #244]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054da:	d15f      	bne.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80054dc:	4b39      	ldr	r3, [pc, #228]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054e8:	d158      	bne.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80054ea:	4b36      	ldr	r3, [pc, #216]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	091b      	lsrs	r3, r3, #4
 80054f0:	f003 030f 	and.w	r3, r3, #15
 80054f4:	3301      	adds	r3, #1
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fc:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80054fe:	4b31      	ldr	r3, [pc, #196]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005508:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	fb03 f202 	mul.w	r2, r3, r2
 8005512:	4b2c      	ldr	r3, [pc, #176]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	0d5b      	lsrs	r3, r3, #21
 8005518:	f003 0303 	and.w	r3, r3, #3
 800551c:	3301      	adds	r3, #1
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	fbb2 f3f3 	udiv	r3, r2, r3
 8005524:	61fb      	str	r3, [r7, #28]
            break;
 8005526:	e039      	b.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8005528:	4b26      	ldr	r3, [pc, #152]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d035      	beq.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005534:	f000 f9dc 	bl	80058f0 <RCCEx_PLLSAI1_GetVCOFreq>
 8005538:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800553a:	4b22      	ldr	r3, [pc, #136]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	091b      	lsrs	r3, r3, #4
 8005540:	f003 030f 	and.w	r3, r3, #15
 8005544:	3301      	adds	r3, #1
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	fbb2 f3f3 	udiv	r3, r2, r3
 800554c:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800554e:	4b1d      	ldr	r3, [pc, #116]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	0a1b      	lsrs	r3, r3, #8
 8005554:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005558:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800555a:	4b1a      	ldr	r3, [pc, #104]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	0edb      	lsrs	r3, r3, #27
 8005560:	f003 031f 	and.w	r3, r3, #31
 8005564:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10a      	bne.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
                if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800556c:	4b15      	ldr	r3, [pc, #84]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf34>)
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0xeee>
                  pllp = 17U;
 8005578:	2311      	movs	r3, #17
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	e001      	b.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
                  pllp = 7U;
 800557e:	2307      	movs	r3, #7
 8005580:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	fb03 f202 	mul.w	r2, r3, r2
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005590:	61fb      	str	r3, [r7, #28]
            break;
 8005592:	e005      	b.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
            break;
 8005594:	bf00      	nop
 8005596:	e010      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 8005598:	bf00      	nop
 800559a:	e00e      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 800559c:	bf00      	nop
 800559e:	e00c      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
            break;
 80055a0:	bf00      	nop
        break;
 80055a2:	e00a      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        break;
 80055a4:	bf00      	nop
 80055a6:	e008      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        break;
 80055a8:	bf00      	nop
 80055aa:	e006      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        break;
 80055ac:	bf00      	nop
 80055ae:	e004      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        break;
 80055b0:	bf00      	nop
 80055b2:	e002      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        break;
 80055b4:	bf00      	nop
 80055b6:	e000      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        break;
 80055b8:	bf00      	nop
    }
  }

  return (frequency);
 80055ba:	69fb      	ldr	r3, [r7, #28]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3720      	adds	r7, #32
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40021000 	.word	0x40021000
 80055c8:	00f42400 	.word	0x00f42400

080055cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d018      	beq.n	8005614 <RCCEx_PLLSAI1_Config+0x48>
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d81f      	bhi.n	8005626 <RCCEx_PLLSAI1_Config+0x5a>
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d002      	beq.n	80055f0 <RCCEx_PLLSAI1_Config+0x24>
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d009      	beq.n	8005602 <RCCEx_PLLSAI1_Config+0x36>
 80055ee:	e01a      	b.n	8005626 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055f0:	4b65      	ldr	r3, [pc, #404]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d117      	bne.n	800562c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005600:	e014      	b.n	800562c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005602:	4b61      	ldr	r3, [pc, #388]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800560a:	2b00      	cmp	r3, #0
 800560c:	d110      	bne.n	8005630 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005612:	e00d      	b.n	8005630 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005614:	4b5c      	ldr	r3, [pc, #368]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d109      	bne.n	8005634 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005624:	e006      	b.n	8005634 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	73fb      	strb	r3, [r7, #15]
      break;
 800562a:	e004      	b.n	8005636 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800562c:	bf00      	nop
 800562e:	e002      	b.n	8005636 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005630:	bf00      	nop
 8005632:	e000      	b.n	8005636 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005634:	bf00      	nop
  }

  if (status == HAL_OK)
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	2b00      	cmp	r3, #0
 800563a:	f040 809f 	bne.w	800577c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800563e:	4b52      	ldr	r3, [pc, #328]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a51      	ldr	r2, [pc, #324]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005644:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005648:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800564a:	f7fc f817 	bl	800167c <HAL_GetTick>
 800564e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005650:	e00f      	b.n	8005672 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005652:	f7fc f813 	bl	800167c <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d908      	bls.n	8005672 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005660:	4b49      	ldr	r3, [pc, #292]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d009      	beq.n	8005680 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005670:	e006      	b.n	8005680 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005672:	4b45      	ldr	r3, [pc, #276]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e9      	bne.n	8005652 <RCCEx_PLLSAI1_Config+0x86>
 800567e:	e000      	b.n	8005682 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005680:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d179      	bne.n	800577c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d116      	bne.n	80056bc <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800568e:	4b3e      	ldr	r3, [pc, #248]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	4b3e      	ldr	r3, [pc, #248]	@ (800578c <RCCEx_PLLSAI1_Config+0x1c0>)
 8005694:	4013      	ands	r3, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6892      	ldr	r2, [r2, #8]
 800569a:	0211      	lsls	r1, r2, #8
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	68d2      	ldr	r2, [r2, #12]
 80056a0:	06d2      	lsls	r2, r2, #27
 80056a2:	4311      	orrs	r1, r2
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6852      	ldr	r2, [r2, #4]
 80056a8:	3a01      	subs	r2, #1
 80056aa:	0112      	lsls	r2, r2, #4
 80056ac:	4311      	orrs	r1, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	4934      	ldr	r1, [pc, #208]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	610b      	str	r3, [r1, #16]
 80056ba:	e033      	b.n	8005724 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d118      	bne.n	80056f4 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056c2:	4b31      	ldr	r3, [pc, #196]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	4b32      	ldr	r3, [pc, #200]	@ (8005790 <RCCEx_PLLSAI1_Config+0x1c4>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6892      	ldr	r2, [r2, #8]
 80056ce:	0211      	lsls	r1, r2, #8
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6912      	ldr	r2, [r2, #16]
 80056d4:	0852      	lsrs	r2, r2, #1
 80056d6:	3a01      	subs	r2, #1
 80056d8:	0552      	lsls	r2, r2, #21
 80056da:	4311      	orrs	r1, r2
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6852      	ldr	r2, [r2, #4]
 80056e0:	3a01      	subs	r2, #1
 80056e2:	0112      	lsls	r2, r2, #4
 80056e4:	4311      	orrs	r1, r2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6812      	ldr	r2, [r2, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	4926      	ldr	r1, [pc, #152]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	610b      	str	r3, [r1, #16]
 80056f2:	e017      	b.n	8005724 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056f4:	4b24      	ldr	r3, [pc, #144]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	4b26      	ldr	r3, [pc, #152]	@ (8005794 <RCCEx_PLLSAI1_Config+0x1c8>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6892      	ldr	r2, [r2, #8]
 8005700:	0211      	lsls	r1, r2, #8
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6952      	ldr	r2, [r2, #20]
 8005706:	0852      	lsrs	r2, r2, #1
 8005708:	3a01      	subs	r2, #1
 800570a:	0652      	lsls	r2, r2, #25
 800570c:	4311      	orrs	r1, r2
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6852      	ldr	r2, [r2, #4]
 8005712:	3a01      	subs	r2, #1
 8005714:	0112      	lsls	r2, r2, #4
 8005716:	4311      	orrs	r1, r2
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6812      	ldr	r2, [r2, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	491a      	ldr	r1, [pc, #104]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005720:	4313      	orrs	r3, r2
 8005722:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005724:	4b18      	ldr	r3, [pc, #96]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a17      	ldr	r2, [pc, #92]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 800572a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800572e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005730:	f7fb ffa4 	bl	800167c <HAL_GetTick>
 8005734:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005736:	e00f      	b.n	8005758 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005738:	f7fb ffa0 	bl	800167c <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d908      	bls.n	8005758 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005746:	4b10      	ldr	r3, [pc, #64]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d109      	bne.n	8005766 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005756:	e006      	b.n	8005766 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005758:	4b0b      	ldr	r3, [pc, #44]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0e9      	beq.n	8005738 <RCCEx_PLLSAI1_Config+0x16c>
 8005764:	e000      	b.n	8005768 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8005766:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800576e:	4b06      	ldr	r3, [pc, #24]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	4904      	ldr	r1, [pc, #16]	@ (8005788 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005778:	4313      	orrs	r3, r2
 800577a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800577c:	7bfb      	ldrb	r3, [r7, #15]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40021000 	.word	0x40021000
 800578c:	07ff800c 	.word	0x07ff800c
 8005790:	ff9f800c 	.word	0xff9f800c
 8005794:	f9ff800c 	.word	0xf9ff800c

08005798 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	d018      	beq.n	80057e0 <RCCEx_PLLSAI2_Config+0x48>
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d81f      	bhi.n	80057f2 <RCCEx_PLLSAI2_Config+0x5a>
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d002      	beq.n	80057bc <RCCEx_PLLSAI2_Config+0x24>
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d009      	beq.n	80057ce <RCCEx_PLLSAI2_Config+0x36>
 80057ba:	e01a      	b.n	80057f2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057bc:	4b4a      	ldr	r3, [pc, #296]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x150>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d117      	bne.n	80057f8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057cc:	e014      	b.n	80057f8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057ce:	4b46      	ldr	r3, [pc, #280]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x150>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d110      	bne.n	80057fc <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057de:	e00d      	b.n	80057fc <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80057e0:	4b41      	ldr	r3, [pc, #260]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x150>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d109      	bne.n	8005800 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f0:	e006      	b.n	8005800 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	73fb      	strb	r3, [r7, #15]
      break;
 80057f6:	e004      	b.n	8005802 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80057f8:	bf00      	nop
 80057fa:	e002      	b.n	8005802 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80057fc:	bf00      	nop
 80057fe:	e000      	b.n	8005802 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005800:	bf00      	nop
  }

  if (status == HAL_OK)
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d169      	bne.n	80058dc <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005808:	4b37      	ldr	r3, [pc, #220]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x150>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a36      	ldr	r2, [pc, #216]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x150>)
 800580e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005812:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005814:	f7fb ff32 	bl	800167c <HAL_GetTick>
 8005818:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800581a:	e00f      	b.n	800583c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800581c:	f7fb ff2e 	bl	800167c <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d908      	bls.n	800583c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800582a:	4b2f      	ldr	r3, [pc, #188]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x150>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d009      	beq.n	800584a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800583a:	e006      	b.n	800584a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800583c:	4b2a      	ldr	r3, [pc, #168]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x150>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e9      	bne.n	800581c <RCCEx_PLLSAI2_Config+0x84>
 8005848:	e000      	b.n	800584c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800584a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d144      	bne.n	80058dc <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d115      	bne.n	8005884 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005858:	4b23      	ldr	r3, [pc, #140]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x150>)
 800585a:	695a      	ldr	r2, [r3, #20]
 800585c:	4b23      	ldr	r3, [pc, #140]	@ (80058ec <RCCEx_PLLSAI2_Config+0x154>)
 800585e:	4013      	ands	r3, r2
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6892      	ldr	r2, [r2, #8]
 8005864:	0211      	lsls	r1, r2, #8
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	68d2      	ldr	r2, [r2, #12]
 800586a:	06d2      	lsls	r2, r2, #27
 800586c:	4311      	orrs	r1, r2
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6852      	ldr	r2, [r2, #4]
 8005872:	3a01      	subs	r2, #1
 8005874:	0112      	lsls	r2, r2, #4
 8005876:	4311      	orrs	r1, r2
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6812      	ldr	r2, [r2, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	491a      	ldr	r1, [pc, #104]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x150>)
 8005880:	4313      	orrs	r3, r2
 8005882:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005884:	4b18      	ldr	r3, [pc, #96]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x150>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a17      	ldr	r2, [pc, #92]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x150>)
 800588a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800588e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005890:	f7fb fef4 	bl	800167c <HAL_GetTick>
 8005894:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005896:	e00f      	b.n	80058b8 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005898:	f7fb fef0 	bl	800167c <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d908      	bls.n	80058b8 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058a6:	4b10      	ldr	r3, [pc, #64]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x150>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d109      	bne.n	80058c6 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80058b6:	e006      	b.n	80058c6 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058b8:	4b0b      	ldr	r3, [pc, #44]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x150>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0e9      	beq.n	8005898 <RCCEx_PLLSAI2_Config+0x100>
 80058c4:	e000      	b.n	80058c8 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80058c6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80058ce:	4b06      	ldr	r3, [pc, #24]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x150>)
 80058d0:	695a      	ldr	r2, [r3, #20]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	4904      	ldr	r1, [pc, #16]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x150>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40021000 	.word	0x40021000
 80058ec:	07ff800c 	.word	0x07ff800c

080058f0 <RCCEx_PLLSAI1_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI1 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI1_GetVCOFreq(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1SRC))
 80058fa:	4b26      	ldr	r3, [pc, #152]	@ (8005994 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	2b03      	cmp	r3, #3
 8005904:	d02d      	beq.n	8005962 <RCCEx_PLLSAI1_GetVCOFreq+0x72>
 8005906:	2b03      	cmp	r3, #3
 8005908:	d835      	bhi.n	8005976 <RCCEx_PLLSAI1_GetVCOFreq+0x86>
 800590a:	2b01      	cmp	r3, #1
 800590c:	d002      	beq.n	8005914 <RCCEx_PLLSAI1_GetVCOFreq+0x24>
 800590e:	2b02      	cmp	r3, #2
 8005910:	d01d      	beq.n	800594e <RCCEx_PLLSAI1_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 8005912:	e030      	b.n	8005976 <RCCEx_PLLSAI1_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005914:	4b1f      	ldr	r3, [pc, #124]	@ (8005994 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b02      	cmp	r3, #2
 800591e:	d12c      	bne.n	800597a <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005920:	4b1c      	ldr	r3, [pc, #112]	@ (8005994 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <RCCEx_PLLSAI1_GetVCOFreq+0x48>
 800592c:	4b19      	ldr	r3, [pc, #100]	@ (8005994 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	091b      	lsrs	r3, r3, #4
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	e005      	b.n	8005944 <RCCEx_PLLSAI1_GetVCOFreq+0x54>
 8005938:	4b16      	ldr	r3, [pc, #88]	@ (8005994 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800593a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800593e:	0a1b      	lsrs	r3, r3, #8
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	4a14      	ldr	r2, [pc, #80]	@ (8005998 <RCCEx_PLLSAI1_GetVCOFreq+0xa8>)
 8005946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800594a:	607b      	str	r3, [r7, #4]
      break;
 800594c:	e015      	b.n	800597a <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800594e:	4b11      	ldr	r3, [pc, #68]	@ (8005994 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800595a:	d110      	bne.n	800597e <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 800595c:	4b0f      	ldr	r3, [pc, #60]	@ (800599c <RCCEx_PLLSAI1_GetVCOFreq+0xac>)
 800595e:	607b      	str	r3, [r7, #4]
      break;
 8005960:	e00d      	b.n	800597e <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005962:	4b0c      	ldr	r3, [pc, #48]	@ (8005994 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800596a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800596e:	d108      	bne.n	8005982 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8005970:	4b0a      	ldr	r3, [pc, #40]	@ (800599c <RCCEx_PLLSAI1_GetVCOFreq+0xac>)
 8005972:	607b      	str	r3, [r7, #4]
      break;
 8005974:	e005      	b.n	8005982 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
      break;
 8005976:	bf00      	nop
 8005978:	e004      	b.n	8005984 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 800597a:	bf00      	nop
 800597c:	e002      	b.n	8005984 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 800597e:	bf00      	nop
 8005980:	e000      	b.n	8005984 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8005982:	bf00      	nop
  }

  return pllvco;
 8005984:	687b      	ldr	r3, [r7, #4]
}
 8005986:	4618      	mov	r0, r3
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40021000 	.word	0x40021000
 8005998:	0800bde4 	.word	0x0800bde4
 800599c:	00f42400 	.word	0x00f42400

080059a0 <RCCEx_PLLSAI2_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI2 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI2_GetVCOFreq(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2SRC))
 80059aa:	4b26      	ldr	r3, [pc, #152]	@ (8005a44 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d02d      	beq.n	8005a12 <RCCEx_PLLSAI2_GetVCOFreq+0x72>
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d835      	bhi.n	8005a26 <RCCEx_PLLSAI2_GetVCOFreq+0x86>
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d002      	beq.n	80059c4 <RCCEx_PLLSAI2_GetVCOFreq+0x24>
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d01d      	beq.n	80059fe <RCCEx_PLLSAI2_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 80059c2:	e030      	b.n	8005a26 <RCCEx_PLLSAI2_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80059c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005a44 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d12c      	bne.n	8005a2a <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80059d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005a44 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0308 	and.w	r3, r3, #8
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d005      	beq.n	80059e8 <RCCEx_PLLSAI2_GetVCOFreq+0x48>
 80059dc:	4b19      	ldr	r3, [pc, #100]	@ (8005a44 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	091b      	lsrs	r3, r3, #4
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	e005      	b.n	80059f4 <RCCEx_PLLSAI2_GetVCOFreq+0x54>
 80059e8:	4b16      	ldr	r3, [pc, #88]	@ (8005a44 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80059ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059ee:	0a1b      	lsrs	r3, r3, #8
 80059f0:	f003 030f 	and.w	r3, r3, #15
 80059f4:	4a14      	ldr	r2, [pc, #80]	@ (8005a48 <RCCEx_PLLSAI2_GetVCOFreq+0xa8>)
 80059f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059fa:	607b      	str	r3, [r7, #4]
      break;
 80059fc:	e015      	b.n	8005a2a <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059fe:	4b11      	ldr	r3, [pc, #68]	@ (8005a44 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a0a:	d110      	bne.n	8005a2e <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 8005a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a4c <RCCEx_PLLSAI2_GetVCOFreq+0xac>)
 8005a0e:	607b      	str	r3, [r7, #4]
      break;
 8005a10:	e00d      	b.n	8005a2e <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a12:	4b0c      	ldr	r3, [pc, #48]	@ (8005a44 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a1e:	d108      	bne.n	8005a32 <RCCEx_PLLSAI2_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8005a20:	4b0a      	ldr	r3, [pc, #40]	@ (8005a4c <RCCEx_PLLSAI2_GetVCOFreq+0xac>)
 8005a22:	607b      	str	r3, [r7, #4]
      break;
 8005a24:	e005      	b.n	8005a32 <RCCEx_PLLSAI2_GetVCOFreq+0x92>
      break;
 8005a26:	bf00      	nop
 8005a28:	e004      	b.n	8005a34 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8005a2a:	bf00      	nop
 8005a2c:	e002      	b.n	8005a34 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8005a2e:	bf00      	nop
 8005a30:	e000      	b.n	8005a34 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8005a32:	bf00      	nop
  }

  return pllvco;
 8005a34:	687b      	ldr	r3, [r7, #4]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40021000 	.word	0x40021000
 8005a48:	0800bde4 	.word	0x0800bde4
 8005a4c:	00f42400 	.word	0x00f42400

08005a50 <RCCEx_GetSAIxPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_SAI2  SAI2 peripheral clock
  * @param  InputFrequency pllvco frequency in Hz
  * @retval Frequency in Hz
  */
static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk, pllvco, plln, pllp;    /* no init needed */

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a64:	d10c      	bne.n	8005a80 <RCCEx_GetSAIxPeriphCLKFreq+0x30>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005a66:	4b78      	ldr	r3, [pc, #480]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a6c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005a70:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	2b60      	cmp	r3, #96	@ 0x60
 8005a76:	d110      	bne.n	8005a9a <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005a78:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	e00c      	b.n	8005a9a <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    }
    /* Else, PLL clock output to check below */
  }
  else /* RCC_PERIPHCLK_SAI2 */
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005a80:	4b71      	ldr	r3, [pc, #452]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a86:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a8a:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a92:	d102      	bne.n	8005a9a <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005a94:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005a98:	61fb      	str	r3, [r7, #28]
    }
    /* Else, PLL clock output to check below */
  }

  if (frequency == 0U)
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f040 80cd 	bne.w	8005c3c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	613b      	str	r3, [r7, #16]

    if ((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	2b40      	cmp	r3, #64	@ 0x40
 8005aaa:	d003      	beq.n	8005ab4 <RCCEx_GetSAIxPeriphCLKFreq+0x64>
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ab2:	d13b      	bne.n	8005b2c <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005ab4:	4b64      	ldr	r3, [pc, #400]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005abc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ac0:	f040 80bb 	bne.w	8005c3a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8005ac4:	4b60      	ldr	r3, [pc, #384]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 80b4 	beq.w	8005c3a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        {
          /* f(PLL Source) / PLLM */
          pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ad2:	4b5d      	ldr	r3, [pc, #372]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	091b      	lsrs	r3, r3, #4
 8005ad8:	f003 030f 	and.w	r3, r3, #15
 8005adc:	3301      	adds	r3, #1
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae4:	613b      	str	r3, [r7, #16]
          /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005ae6:	4b58      	ldr	r3, [pc, #352]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005af0:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005af2:	4b55      	ldr	r3, [pc, #340]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	0edb      	lsrs	r3, r3, #27
 8005af8:	f003 031f 	and.w	r3, r3, #31
 8005afc:	617b      	str	r3, [r7, #20]
          if (pllp == 0U)
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005b04:	4b50      	ldr	r3, [pc, #320]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
            {
              pllp = 17U;
 8005b10:	2311      	movs	r3, #17
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	e001      	b.n	8005b1a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
            }
            else
            {
              pllp = 7U;
 8005b16:	2307      	movs	r3, #7
 8005b18:	617b      	str	r3, [r7, #20]
            }
          }
          frequency = (pllvco * plln) / pllp;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	fb03 f202 	mul.w	r2, r3, r2
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b28:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005b2a:	e086      	b.n	8005c3a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        }
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	2b80      	cmp	r3, #128	@ 0x80
 8005b30:	d003      	beq.n	8005b3a <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b38:	d109      	bne.n	8005b4e <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b3a:	4b43      	ldr	r3, [pc, #268]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b46:	d179      	bne.n	8005c3c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        frequency = HSI_VALUE;
 8005b48:	4b40      	ldr	r3, [pc, #256]	@ (8005c4c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005b4a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b4c:	e076      	b.n	8005c3c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if (srcclk == 0U) /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d135      	bne.n	8005bc0 <RCCEx_GetSAIxPeriphCLKFreq+0x170>
    {
      if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8005b54:	4b3c      	ldr	r3, [pc, #240]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d06d      	beq.n	8005c3c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI1 source) */
        pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005b60:	f7ff fec6 	bl	80058f0 <RCCEx_PLLSAI1_GetVCOFreq>
 8005b64:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005b66:	4b38      	ldr	r3, [pc, #224]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	091b      	lsrs	r3, r3, #4
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	3301      	adds	r3, #1
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b78:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005b7a:	4b33      	ldr	r3, [pc, #204]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	0a1b      	lsrs	r3, r3, #8
 8005b80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b84:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8005b86:	4b30      	ldr	r3, [pc, #192]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	0edb      	lsrs	r3, r3, #27
 8005b8c:	f003 031f 	and.w	r3, r3, #31
 8005b90:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10a      	bne.n	8005bae <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
        {
          if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005b98:	4b2b      	ldr	r3, [pc, #172]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <RCCEx_GetSAIxPeriphCLKFreq+0x15a>
          {
            pllp = 17U;
 8005ba4:	2311      	movs	r3, #17
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	e001      	b.n	8005bae <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
          }
          else
          {
            pllp = 7U;
 8005baa:	2307      	movs	r3, #7
 8005bac:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	fb03 f202 	mul.w	r2, r3, r2
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbc:	61fb      	str	r3, [r7, #28]
 8005bbe:	e03d      	b.n	8005c3c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	2b20      	cmp	r3, #32
 8005bc4:	d003      	beq.n	8005bce <RCCEx_GetSAIxPeriphCLKFreq+0x17e>
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bcc:	d136      	bne.n	8005c3c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8005bce:	4b1e      	ldr	r3, [pc, #120]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d030      	beq.n	8005c3c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI2 source) */
        pllvco = RCCEx_PLLSAI2_GetVCOFreq();
 8005bda:	f7ff fee1 	bl	80059a0 <RCCEx_PLLSAI2_GetVCOFreq>
 8005bde:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8005be0:	4b19      	ldr	r3, [pc, #100]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	091b      	lsrs	r3, r3, #4
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	3301      	adds	r3, #1
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf2:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005bf4:	4b14      	ldr	r3, [pc, #80]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	0a1b      	lsrs	r3, r3, #8
 8005bfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bfe:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8005c00:	4b11      	ldr	r3, [pc, #68]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	0edb      	lsrs	r3, r3, #27
 8005c06:	f003 031f 	and.w	r3, r3, #31
 8005c0a:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10a      	bne.n	8005c28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005c12:	4b0d      	ldr	r3, [pc, #52]	@ (8005c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8005c1e:	2311      	movs	r3, #17
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	e001      	b.n	8005c28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8005c24:	2307      	movs	r3, #7
 8005c26:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	fb03 f202 	mul.w	r2, r3, r2
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c36:	61fb      	str	r3, [r7, #28]
 8005c38:	e000      	b.n	8005c3c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005c3a:	bf00      	nop
    {
      /* No clock source, frequency default init at 0 */
    }
  }

  return frequency;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	00f42400 	.word	0x00f42400

08005c50 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d904      	bls.n	8005c6e <HAL_SAI_InitProtocol+0x1e>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	3b03      	subs	r3, #3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d812      	bhi.n	8005c92 <HAL_SAI_InitProtocol+0x42>
 8005c6c:	e008      	b.n	8005c80 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 fc91 	bl	800659c <SAI_InitI2S>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c7e:	e00b      	b.n	8005c98 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	68b9      	ldr	r1, [r7, #8]
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 fd3a 	bl	8006700 <SAI_InitPCM>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c90:	e002      	b.n	8005c98 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	75fb      	strb	r3, [r7, #23]
      break;
 8005c96:	bf00      	nop
  }

  if (status == HAL_OK)
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d104      	bne.n	8005ca8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 f808 	bl	8005cb4 <HAL_SAI_Init>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
	...

08005cb4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b08a      	sub	sp, #40	@ 0x28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e1da      	b.n	800607c <HAL_SAI_Init+0x3c8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d10e      	bne.n	8005cee <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a87      	ldr	r2, [pc, #540]	@ (8005ef4 <HAL_SAI_Init+0x240>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d107      	bne.n	8005cea <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d103      	bne.n	8005cea <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e1c6      	b.n	800607c <HAL_SAI_Init+0x3c8>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fb fa40 	bl	8001188 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fd7b 	bl	8006804 <SAI_Disable>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e1b1      	b.n	800607c <HAL_SAI_Init+0x3c8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d00c      	beq.n	8005d42 <HAL_SAI_Init+0x8e>
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d80d      	bhi.n	8005d48 <HAL_SAI_Init+0x94>
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <HAL_SAI_Init+0x82>
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d003      	beq.n	8005d3c <HAL_SAI_Init+0x88>
 8005d34:	e008      	b.n	8005d48 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8005d3a:	e008      	b.n	8005d4e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005d3c:	2310      	movs	r3, #16
 8005d3e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8005d40:	e005      	b.n	8005d4e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005d42:	2320      	movs	r3, #32
 8005d44:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8005d46:	e002      	b.n	8005d4e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8005d4c:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d81d      	bhi.n	8005d92 <HAL_SAI_Init+0xde>
 8005d56:	a201      	add	r2, pc, #4	@ (adr r2, 8005d5c <HAL_SAI_Init+0xa8>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005d6d 	.word	0x08005d6d
 8005d60:	08005d73 	.word	0x08005d73
 8005d64:	08005d7b 	.word	0x08005d7b
 8005d68:	08005d83 	.word	0x08005d83
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	61fb      	str	r3, [r7, #28]
      break;
 8005d70:	e012      	b.n	8005d98 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005d72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d76:	61fb      	str	r3, [r7, #28]
      break;
 8005d78:	e00e      	b.n	8005d98 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005d7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005d7e:	61fb      	str	r3, [r7, #28]
      break;
 8005d80:	e00a      	b.n	8005d98 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005d82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005d86:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8a:	f043 0301 	orr.w	r3, r3, #1
 8005d8e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8005d90:	e002      	b.n	8005d98 <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
 8005d92:	2300      	movs	r3, #0
 8005d94:	61fb      	str	r3, [r7, #28]
      break;
 8005d96:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a55      	ldr	r2, [pc, #340]	@ (8005ef4 <HAL_SAI_Init+0x240>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d004      	beq.n	8005dac <HAL_SAI_Init+0xf8>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a54      	ldr	r2, [pc, #336]	@ (8005ef8 <HAL_SAI_Init+0x244>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d103      	bne.n	8005db4 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8005dac:	4a53      	ldr	r2, [pc, #332]	@ (8005efc <HAL_SAI_Init+0x248>)
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	e002      	b.n	8005dba <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005db4:	4a52      	ldr	r2, [pc, #328]	@ (8005f00 <HAL_SAI_Init+0x24c>)
 8005db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d07e      	beq.n	8005ec0 <HAL_SAI_Init+0x20c>
  {
    uint32_t freq = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a4a      	ldr	r2, [pc, #296]	@ (8005ef4 <HAL_SAI_Init+0x240>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d004      	beq.n	8005dda <HAL_SAI_Init+0x126>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a48      	ldr	r2, [pc, #288]	@ (8005ef8 <HAL_SAI_Init+0x244>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d104      	bne.n	8005de4 <HAL_SAI_Init+0x130>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005dda:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005dde:	f7fe fc57 	bl	8004690 <HAL_RCCEx_GetPeriphCLKFreq>
 8005de2:	61b8      	str	r0, [r7, #24]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a46      	ldr	r2, [pc, #280]	@ (8005f04 <HAL_SAI_Init+0x250>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d004      	beq.n	8005df8 <HAL_SAI_Init+0x144>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a45      	ldr	r2, [pc, #276]	@ (8005f08 <HAL_SAI_Init+0x254>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d104      	bne.n	8005e02 <HAL_SAI_Init+0x14e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005df8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005dfc:	f7fe fc48 	bl	8004690 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e00:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005e0a:	d120      	bne.n	8005e4e <HAL_SAI_Init+0x19a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d102      	bne.n	8005e1a <HAL_SAI_Init+0x166>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8005e14:	2340      	movs	r3, #64	@ 0x40
 8005e16:	613b      	str	r3, [r7, #16]
 8005e18:	e00a      	b.n	8005e30 <HAL_SAI_Init+0x17c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1e:	2b08      	cmp	r3, #8
 8005e20:	d103      	bne.n	8005e2a <HAL_SAI_Init+0x176>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8005e22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005e26:	613b      	str	r3, [r7, #16]
 8005e28:	e002      	b.n	8005e30 <HAL_SAI_Init+0x17c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e2e:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	4613      	mov	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	fb02 f303 	mul.w	r3, r2, r3
 8005e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	e017      	b.n	8005e7e <HAL_SAI_Init+0x1ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e56:	d101      	bne.n	8005e5c <HAL_SAI_Init+0x1a8>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e000      	b.n	8005e5e <HAL_SAI_Init+0x1aa>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	fb02 f303 	mul.w	r3, r2, r3
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e7c:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	4a22      	ldr	r2, [pc, #136]	@ (8005f0c <HAL_SAI_Init+0x258>)
 8005e82:	fba2 2303 	umull	r2, r3, r2, r3
 8005e86:	08da      	lsrs	r2, r3, #3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005e8c:	6979      	ldr	r1, [r7, #20]
 8005e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8005f0c <HAL_SAI_Init+0x258>)
 8005e90:	fba3 2301 	umull	r2, r3, r3, r1
 8005e94:	08da      	lsrs	r2, r3, #3
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	1aca      	subs	r2, r1, r3
 8005ea0:	2a08      	cmp	r2, #8
 8005ea2:	d904      	bls.n	8005eae <HAL_SAI_Init+0x1fa>
    {
      hsai->Init.Mckdiv += 1U;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d104      	bne.n	8005ec0 <HAL_SAI_Init+0x20c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eba:	085a      	lsrs	r2, r3, #1
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <HAL_SAI_Init+0x21c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d109      	bne.n	8005ee4 <HAL_SAI_Init+0x230>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_SAI_Init+0x228>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e001      	b.n	8005ee0 <HAL_SAI_Init+0x22c>
 8005edc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ee0:	623b      	str	r3, [r7, #32]
 8005ee2:	e017      	b.n	8005f14 <HAL_SAI_Init+0x260>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d111      	bne.n	8005f10 <HAL_SAI_Init+0x25c>
 8005eec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ef0:	e00f      	b.n	8005f12 <HAL_SAI_Init+0x25e>
 8005ef2:	bf00      	nop
 8005ef4:	40015404 	.word	0x40015404
 8005ef8:	40015424 	.word	0x40015424
 8005efc:	40015400 	.word	0x40015400
 8005f00:	40015800 	.word	0x40015800
 8005f04:	40015804 	.word	0x40015804
 8005f08:	40015824 	.word	0x40015824
 8005f0c:	cccccccd 	.word	0xcccccccd
 8005f10:	2300      	movs	r3, #0
 8005f12:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6819      	ldr	r1, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	4b59      	ldr	r3, [pc, #356]	@ (8006084 <HAL_SAI_Init+0x3d0>)
 8005f20:	400b      	ands	r3, r1
 8005f22:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6819      	ldr	r1, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f32:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f38:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 8005f4c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005f58:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5e:	051b      	lsls	r3, r3, #20
 8005f60:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005f66:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	6812      	ldr	r2, [r2, #0]
 8005f80:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005f84:	f023 030f 	bic.w	r3, r3, #15
 8005f88:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6859      	ldr	r1, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	69da      	ldr	r2, [r3, #28]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6899      	ldr	r1, [r3, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4b35      	ldr	r3, [pc, #212]	@ (8006088 <HAL_SAI_Init+0x3d4>)
 8005fb4:	400b      	ands	r3, r1
 8005fb6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6899      	ldr	r1, [r3, #8]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005fc8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8005fce:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8005fd4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005fde:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68d9      	ldr	r1, [r3, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8005ff6:	400b      	ands	r3, r1
 8005ff8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68d9      	ldr	r1, [r3, #12]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006008:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800600e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006010:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006016:	3b01      	subs	r3, #1
 8006018:	021b      	lsls	r3, r3, #8
 800601a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a18      	ldr	r2, [pc, #96]	@ (800608c <HAL_SAI_Init+0x3d8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d119      	bne.n	8006062 <HAL_SAI_Init+0x3ae>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800602e:	4b18      	ldr	r3, [pc, #96]	@ (8006090 <HAL_SAI_Init+0x3dc>)
 8006030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006032:	4a17      	ldr	r2, [pc, #92]	@ (8006090 <HAL_SAI_Init+0x3dc>)
 8006034:	f023 0301 	bic.w	r3, r3, #1
 8006038:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006040:	2b01      	cmp	r3, #1
 8006042:	d10e      	bne.n	8006062 <HAL_SAI_Init+0x3ae>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800604c:	3b01      	subs	r3, #1
 800604e:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006050:	490f      	ldr	r1, [pc, #60]	@ (8006090 <HAL_SAI_Init+0x3dc>)
 8006052:	4313      	orrs	r3, r2
 8006054:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006056:	4b0e      	ldr	r3, [pc, #56]	@ (8006090 <HAL_SAI_Init+0x3dc>)
 8006058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800605a:	4a0d      	ldr	r2, [pc, #52]	@ (8006090 <HAL_SAI_Init+0x3dc>)
 800605c:	f043 0301 	orr.w	r3, r3, #1
 8006060:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3728      	adds	r7, #40	@ 0x28
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	f005c010 	.word	0xf005c010
 8006088:	fff88000 	.word	0xfff88000
 800608c:	40015404 	.word	0x40015404
 8006090:	40015400 	.word	0x40015400

08006094 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d101      	bne.n	80060ae <HAL_SAI_DMAStop+0x1a>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e046      	b.n	800613c <HAL_SAI_DMAStop+0xa8>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fba4 	bl	8006804 <SAI_Disable>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <HAL_SAI_DMAStop+0x32>
  {
    status = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80060d4:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b12      	cmp	r3, #18
 80060e0:	d10a      	bne.n	80060f8 <HAL_SAI_DMAStop+0x64>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d005      	beq.n	80060f8 <HAL_SAI_DMAStop+0x64>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmatx);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fb fcaa 	bl	8001a4c <HAL_DMA_Abort>
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b22      	cmp	r3, #34	@ 0x22
 8006102:	d10a      	bne.n	800611a <HAL_SAI_DMAStop+0x86>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800610a:	2b00      	cmp	r3, #0
 800610c:	d005      	beq.n	800611a <HAL_SAI_DMAStop+0x86>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmarx);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006114:	4618      	mov	r0, r3
 8006116:	f7fb fc99 	bl	8001a4c <HAL_DMA_Abort>
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0208 	orr.w	r2, r2, #8
 8006128:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 800613a:	7bfb      	ldrb	r3, [r7, #15]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_SAI_Abort+0x1a>
 800615a:	2302      	movs	r3, #2
 800615c:	e057      	b.n	800620e <HAL_SAI_Abort+0xca>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fb4c 	bl	8006804 <SAI_Disable>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006180:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006184:	d129      	bne.n	80061da <HAL_SAI_Abort+0x96>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006194:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b12      	cmp	r3, #18
 80061a0:	d10a      	bne.n	80061b8 <HAL_SAI_Abort+0x74>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <HAL_SAI_Abort+0x74>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fb fc4a 	bl	8001a4c <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b22      	cmp	r3, #34	@ 0x22
 80061c2:	d10a      	bne.n	80061da <HAL_SAI_Abort+0x96>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_SAI_Abort+0x96>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fb fc39 	bl	8001a4c <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2200      	movs	r2, #0
 80061e0:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ea:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0208 	orr.w	r2, r2, #8
 80061fa:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 81a7 	beq.w	800657c <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00a      	beq.n	8006266 <HAL_SAI_IRQHandler+0x4e>
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	2b00      	cmp	r3, #0
 8006258:	d005      	beq.n	8006266 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	4798      	blx	r3
 8006264:	e18a      	b.n	800657c <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01e      	beq.n	80062ae <HAL_SAI_IRQHandler+0x96>
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d019      	beq.n	80062ae <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2201      	movs	r2, #1
 8006280:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b22      	cmp	r3, #34	@ 0x22
 800628c:	d101      	bne.n	8006292 <HAL_SAI_IRQHandler+0x7a>
 800628e:	2301      	movs	r3, #1
 8006290:	e000      	b.n	8006294 <HAL_SAI_IRQHandler+0x7c>
 8006292:	2302      	movs	r3, #2
 8006294:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f96e 	bl	8006588 <HAL_SAI_ErrorCallback>
 80062ac:	e166      	b.n	800657c <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d013      	beq.n	80062e0 <HAL_SAI_IRQHandler+0xc8>
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00e      	beq.n	80062e0 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2202      	movs	r2, #2
 80062c8:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 8153 	beq.w	800657c <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062dc:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 80062de:	e14d      	b.n	800657c <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f003 0320 	and.w	r3, r3, #32
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d05b      	beq.n	80063a2 <HAL_SAI_IRQHandler+0x18a>
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f003 0320 	and.w	r3, r3, #32
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d056      	beq.n	80063a2 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2220      	movs	r2, #32
 80062fa:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006302:	f043 0204 	orr.w	r2, r3, #4
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d03e      	beq.n	8006394 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800631c:	2b00      	cmp	r3, #0
 800631e:	d018      	beq.n	8006352 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006326:	4a97      	ldr	r2, [pc, #604]	@ (8006584 <HAL_SAI_IRQHandler+0x36c>)
 8006328:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006330:	4618      	mov	r0, r3
 8006332:	f7fb fbe7 	bl	8001b04 <HAL_DMA_Abort_IT>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006342:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f91b 	bl	8006588 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 810a 	beq.w	8006572 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006364:	4a87      	ldr	r2, [pc, #540]	@ (8006584 <HAL_SAI_IRQHandler+0x36c>)
 8006366:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800636e:	4618      	mov	r0, r3
 8006370:	f7fb fbc8 	bl	8001b04 <HAL_DMA_Abort_IT>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 80fb 	beq.w	8006572 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006382:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 f8fb 	bl	8006588 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006392:	e0ee      	b.n	8006572 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff fed5 	bl	8006144 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f8f4 	bl	8006588 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80063a0:	e0e7      	b.n	8006572 <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d05b      	beq.n	8006464 <HAL_SAI_IRQHandler+0x24c>
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d056      	beq.n	8006464 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2240      	movs	r2, #64	@ 0x40
 80063bc:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063c4:	f043 0208 	orr.w	r2, r3, #8
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d03e      	beq.n	8006456 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d018      	beq.n	8006414 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063e8:	4a66      	ldr	r2, [pc, #408]	@ (8006584 <HAL_SAI_IRQHandler+0x36c>)
 80063ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fb fb86 	bl	8001b04 <HAL_DMA_Abort_IT>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006404:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f8ba 	bl	8006588 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 80ab 	beq.w	8006576 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006426:	4a57      	ldr	r2, [pc, #348]	@ (8006584 <HAL_SAI_IRQHandler+0x36c>)
 8006428:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006430:	4618      	mov	r0, r3
 8006432:	f7fb fb67 	bl	8001b04 <HAL_DMA_Abort_IT>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 809c 	beq.w	8006576 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006444:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f89a 	bl	8006588 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006454:	e08f      	b.n	8006576 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7ff fe74 	bl	8006144 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f893 	bl	8006588 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006462:	e088      	b.n	8006576 <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f003 0304 	and.w	r3, r3, #4
 800646a:	2b00      	cmp	r3, #0
 800646c:	d067      	beq.n	800653e <HAL_SAI_IRQHandler+0x326>
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b00      	cmp	r3, #0
 8006476:	d062      	beq.n	800653e <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2204      	movs	r2, #4
 800647e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006486:	f043 0220 	orr.w	r2, r3, #32
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d03c      	beq.n	8006514 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d018      	beq.n	80064d6 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064aa:	4a36      	ldr	r2, [pc, #216]	@ (8006584 <HAL_SAI_IRQHandler+0x36c>)
 80064ac:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fb fb25 	bl	8001b04 <HAL_DMA_Abort_IT>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f859 	bl	8006588 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d04c      	beq.n	800657a <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064e6:	4a27      	ldr	r2, [pc, #156]	@ (8006584 <HAL_SAI_IRQHandler+0x36c>)
 80064e8:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fb fb07 	bl	8001b04 <HAL_DMA_Abort_IT>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d03e      	beq.n	800657a <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006502:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f83b 	bl	8006588 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006512:	e032      	b.n	800657a <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2200      	movs	r2, #0
 800651a:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f04f 32ff 	mov.w	r2, #4294967295
 8006524:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f826 	bl	8006588 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800653c:	e01d      	b.n	800657a <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f003 0310 	and.w	r3, r3, #16
 8006544:	2b00      	cmp	r3, #0
 8006546:	d019      	beq.n	800657c <HAL_SAI_IRQHandler+0x364>
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f003 0310 	and.w	r3, r3, #16
 800654e:	2b00      	cmp	r3, #0
 8006550:	d014      	beq.n	800657c <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2210      	movs	r2, #16
 8006558:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006560:	f043 0210 	orr.w	r2, r3, #16
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f80c 	bl	8006588 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8006570:	e004      	b.n	800657c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006572:	bf00      	nop
 8006574:	e002      	b.n	800657c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006576:	bf00      	nop
 8006578:	e000      	b.n	800657c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800657a:	bf00      	nop
}
 800657c:	bf00      	nop
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	08006879 	.word	0x08006879

08006588 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <SAI_InitI2S+0x2e>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d103      	bne.n	80065d2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80065d0:	e002      	b.n	80065d8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2201      	movs	r2, #1
 80065d6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80065de:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80065e6:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e077      	b.n	80066f2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d107      	bne.n	8006618 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006614:	665a      	str	r2, [r3, #100]	@ 0x64
 8006616:	e006      	b.n	8006626 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800661e:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b03      	cmp	r3, #3
 800662a:	d84f      	bhi.n	80066cc <SAI_InitI2S+0x130>
 800662c:	a201      	add	r2, pc, #4	@ (adr r2, 8006634 <SAI_InitI2S+0x98>)
 800662e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006632:	bf00      	nop
 8006634:	08006645 	.word	0x08006645
 8006638:	08006667 	.word	0x08006667
 800663c:	08006689 	.word	0x08006689
 8006640:	080066ab 	.word	0x080066ab
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2280      	movs	r2, #128	@ 0x80
 8006648:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	085b      	lsrs	r3, r3, #1
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	085b      	lsrs	r3, r3, #1
 8006658:	011a      	lsls	r2, r3, #4
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2240      	movs	r2, #64	@ 0x40
 8006662:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8006664:	e035      	b.n	80066d2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2280      	movs	r2, #128	@ 0x80
 800666a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	085b      	lsrs	r3, r3, #1
 8006670:	019a      	lsls	r2, r3, #6
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	085b      	lsrs	r3, r3, #1
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2280      	movs	r2, #128	@ 0x80
 8006684:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8006686:	e024      	b.n	80066d2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	22c0      	movs	r2, #192	@ 0xc0
 800668c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	085b      	lsrs	r3, r3, #1
 8006692:	019a      	lsls	r2, r3, #6
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	085b      	lsrs	r3, r3, #1
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2280      	movs	r2, #128	@ 0x80
 80066a6:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80066a8:	e013      	b.n	80066d2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	22e0      	movs	r2, #224	@ 0xe0
 80066ae:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	019a      	lsls	r2, r3, #6
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	085b      	lsrs	r3, r3, #1
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2280      	movs	r2, #128	@ 0x80
 80066c8:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80066ca:	e002      	b.n	80066d2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	75fb      	strb	r3, [r7, #23]
      break;
 80066d0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d10b      	bne.n	80066f0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d102      	bne.n	80066e4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2210      	movs	r2, #16
 80066e2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d102      	bne.n	80066f0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2208      	movs	r2, #8
 80066ee:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 80066f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop

08006700 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <SAI_InitPCM+0x2e>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2b02      	cmp	r3, #2
 800672c:	d103      	bne.n	8006736 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2201      	movs	r2, #1
 8006732:	651a      	str	r2, [r3, #80]	@ 0x50
 8006734:	e002      	b.n	800673c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006748:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006750:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006764:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b04      	cmp	r3, #4
 800676a:	d103      	bne.n	8006774 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2201      	movs	r2, #1
 8006770:	659a      	str	r2, [r3, #88]	@ 0x58
 8006772:	e002      	b.n	800677a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	220d      	movs	r2, #13
 8006778:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b03      	cmp	r3, #3
 800677e:	d837      	bhi.n	80067f0 <SAI_InitPCM+0xf0>
 8006780:	a201      	add	r2, pc, #4	@ (adr r2, 8006788 <SAI_InitPCM+0x88>)
 8006782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006786:	bf00      	nop
 8006788:	08006799 	.word	0x08006799
 800678c:	080067af 	.word	0x080067af
 8006790:	080067c5 	.word	0x080067c5
 8006794:	080067db 	.word	0x080067db
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2280      	movs	r2, #128	@ 0x80
 800679c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	011a      	lsls	r2, r3, #4
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2240      	movs	r2, #64	@ 0x40
 80067aa:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80067ac:	e023      	b.n	80067f6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2280      	movs	r2, #128	@ 0x80
 80067b2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2280      	movs	r2, #128	@ 0x80
 80067c0:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80067c2:	e018      	b.n	80067f6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	22c0      	movs	r2, #192	@ 0xc0
 80067c8:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2280      	movs	r2, #128	@ 0x80
 80067d6:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80067d8:	e00d      	b.n	80067f6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	22e0      	movs	r2, #224	@ 0xe0
 80067de:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2280      	movs	r2, #128	@ 0x80
 80067ec:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80067ee:	e002      	b.n	80067f6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	75fb      	strb	r3, [r7, #23]
      break;
 80067f4:	bf00      	nop
  }

  return status;
 80067f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	371c      	adds	r7, #28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800680c:	4b18      	ldr	r3, [pc, #96]	@ (8006870 <SAI_Disable+0x6c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a18      	ldr	r2, [pc, #96]	@ (8006874 <SAI_Disable+0x70>)
 8006812:	fba2 2303 	umull	r2, r3, r2, r3
 8006816:	0b1b      	lsrs	r3, r3, #12
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800682e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10a      	bne.n	800684c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800683c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	72fb      	strb	r3, [r7, #11]
      break;
 800684a:	e009      	b.n	8006860 <SAI_Disable+0x5c>
    }
    count--;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3b01      	subs	r3, #1
 8006850:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e7      	bne.n	8006830 <SAI_Disable+0x2c>

  return status;
 8006860:	7afb      	ldrb	r3, [r7, #11]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	20000000 	.word	0x20000000
 8006874:	95cbec1b 	.word	0x95cbec1b

08006878 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006884:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006894:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2200      	movs	r2, #0
 800689c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f04f 32ff 	mov.w	r2, #4294967295
 80068a6:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068ae:	2b20      	cmp	r3, #32
 80068b0:	d00a      	beq.n	80068c8 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f7ff ffa6 	bl	8006804 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0208 	orr.w	r2, r2, #8
 80068c6:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f7ff fe55 	bl	8006588 <HAL_SAI_ErrorCallback>
#endif
}
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e095      	b.n	8006a24 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d108      	bne.n	8006912 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006908:	d009      	beq.n	800691e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	61da      	str	r2, [r3, #28]
 8006910:	e005      	b.n	800691e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d106      	bne.n	800693e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7fa fbe1 	bl	8001100 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2202      	movs	r2, #2
 8006942:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006954:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800695e:	d902      	bls.n	8006966 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006960:	2300      	movs	r3, #0
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	e002      	b.n	800696c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006966:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800696a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006974:	d007      	beq.n	8006986 <HAL_SPI_Init+0xa0>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800697e:	d002      	beq.n	8006986 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006996:	431a      	orrs	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	431a      	orrs	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069b4:	431a      	orrs	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069c8:	ea42 0103 	orr.w	r1, r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	0c1b      	lsrs	r3, r3, #16
 80069e2:	f003 0204 	and.w	r2, r3, #4
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ea:	f003 0310 	and.w	r3, r3, #16
 80069ee:	431a      	orrs	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069f4:	f003 0308 	and.w	r3, r3, #8
 80069f8:	431a      	orrs	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006a02:	ea42 0103 	orr.w	r1, r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	603b      	str	r3, [r7, #0]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <HAL_SPI_Transmit+0x22>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e15f      	b.n	8006d0e <HAL_SPI_Transmit+0x2e2>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a56:	f7fa fe11 	bl	800167c <HAL_GetTick>
 8006a5a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a5c:	88fb      	ldrh	r3, [r7, #6]
 8006a5e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d002      	beq.n	8006a72 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a70:	e148      	b.n	8006d04 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <HAL_SPI_Transmit+0x52>
 8006a78:	88fb      	ldrh	r3, [r7, #6]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a82:	e13f      	b.n	8006d04 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2203      	movs	r2, #3
 8006a88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	88fa      	ldrh	r2, [r7, #6]
 8006a9c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	88fa      	ldrh	r2, [r7, #6]
 8006aa2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ace:	d10f      	bne.n	8006af0 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ade:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006aee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afa:	2b40      	cmp	r3, #64	@ 0x40
 8006afc:	d007      	beq.n	8006b0e <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b16:	d94f      	bls.n	8006bb8 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <HAL_SPI_Transmit+0xfa>
 8006b20:	8afb      	ldrh	r3, [r7, #22]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d142      	bne.n	8006bac <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b2a:	881a      	ldrh	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b36:	1c9a      	adds	r2, r3, #2
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	3b01      	subs	r3, #1
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b4a:	e02f      	b.n	8006bac <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d112      	bne.n	8006b80 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5e:	881a      	ldrh	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b6a:	1c9a      	adds	r2, r3, #2
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	3b01      	subs	r3, #1
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b7e:	e015      	b.n	8006bac <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b80:	f7fa fd7c 	bl	800167c <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d803      	bhi.n	8006b98 <HAL_SPI_Transmit+0x16c>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b96:	d102      	bne.n	8006b9e <HAL_SPI_Transmit+0x172>
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006baa:	e0ab      	b.n	8006d04 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1ca      	bne.n	8006b4c <HAL_SPI_Transmit+0x120>
 8006bb6:	e080      	b.n	8006cba <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <HAL_SPI_Transmit+0x19a>
 8006bc0:	8afb      	ldrh	r3, [r7, #22]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d174      	bne.n	8006cb0 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d912      	bls.n	8006bf6 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd4:	881a      	ldrh	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be0:	1c9a      	adds	r2, r3, #2
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	3b02      	subs	r3, #2
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006bf4:	e05c      	b.n	8006cb0 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	330c      	adds	r3, #12
 8006c00:	7812      	ldrb	r2, [r2, #0]
 8006c02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006c1c:	e048      	b.n	8006cb0 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d12b      	bne.n	8006c84 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d912      	bls.n	8006c5c <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c3a:	881a      	ldrh	r2, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c46:	1c9a      	adds	r2, r3, #2
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	3b02      	subs	r3, #2
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c5a:	e029      	b.n	8006cb0 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	330c      	adds	r3, #12
 8006c66:	7812      	ldrb	r2, [r2, #0]
 8006c68:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c82:	e015      	b.n	8006cb0 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c84:	f7fa fcfa 	bl	800167c <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d803      	bhi.n	8006c9c <HAL_SPI_Transmit+0x270>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9a:	d102      	bne.n	8006ca2 <HAL_SPI_Transmit+0x276>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d106      	bne.n	8006cb0 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006cae:	e029      	b.n	8006d04 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1b1      	bne.n	8006c1e <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 fb6a 	bl	8007398 <SPI_EndRxTxTransaction>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10a      	bne.n	8006cee <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cd8:	2300      	movs	r3, #0
 8006cda:	613b      	str	r3, [r7, #16]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	613b      	str	r3, [r7, #16]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	613b      	str	r3, [r7, #16]
 8006cec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	77fb      	strb	r3, [r7, #31]
 8006cfa:	e003      	b.n	8006d04 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006d0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3720      	adds	r7, #32
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b08a      	sub	sp, #40	@ 0x28
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	60f8      	str	r0, [r7, #12]
 8006d1e:	60b9      	str	r1, [r7, #8]
 8006d20:	607a      	str	r2, [r7, #4]
 8006d22:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d24:	2301      	movs	r3, #1
 8006d26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d101      	bne.n	8006d3c <HAL_SPI_TransmitReceive+0x26>
 8006d38:	2302      	movs	r3, #2
 8006d3a:	e20a      	b.n	8007152 <HAL_SPI_TransmitReceive+0x43c>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d44:	f7fa fc9a 	bl	800167c <HAL_GetTick>
 8006d48:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d50:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006d58:	887b      	ldrh	r3, [r7, #2]
 8006d5a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006d5c:	887b      	ldrh	r3, [r7, #2]
 8006d5e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d60:	7efb      	ldrb	r3, [r7, #27]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d00e      	beq.n	8006d84 <HAL_SPI_TransmitReceive+0x6e>
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d6c:	d106      	bne.n	8006d7c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d102      	bne.n	8006d7c <HAL_SPI_TransmitReceive+0x66>
 8006d76:	7efb      	ldrb	r3, [r7, #27]
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	d003      	beq.n	8006d84 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006d82:	e1e0      	b.n	8007146 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d005      	beq.n	8006d96 <HAL_SPI_TransmitReceive+0x80>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <HAL_SPI_TransmitReceive+0x80>
 8006d90:	887b      	ldrh	r3, [r7, #2]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d103      	bne.n	8006d9e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006d9c:	e1d3      	b.n	8007146 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d003      	beq.n	8006db2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2205      	movs	r2, #5
 8006dae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	887a      	ldrh	r2, [r7, #2]
 8006dc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	887a      	ldrh	r2, [r7, #2]
 8006dca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	887a      	ldrh	r2, [r7, #2]
 8006dd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	887a      	ldrh	r2, [r7, #2]
 8006dde:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006df4:	d802      	bhi.n	8006dfc <HAL_SPI_TransmitReceive+0xe6>
 8006df6:	8a3b      	ldrh	r3, [r7, #16]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d908      	bls.n	8006e0e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e0a:	605a      	str	r2, [r3, #4]
 8006e0c:	e007      	b.n	8006e1e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e1c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e28:	2b40      	cmp	r3, #64	@ 0x40
 8006e2a:	d007      	beq.n	8006e3c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e44:	f240 8081 	bls.w	8006f4a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <HAL_SPI_TransmitReceive+0x140>
 8006e50:	8a7b      	ldrh	r3, [r7, #18]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d16d      	bne.n	8006f32 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5a:	881a      	ldrh	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e66:	1c9a      	adds	r2, r3, #2
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e7a:	e05a      	b.n	8006f32 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d11b      	bne.n	8006ec2 <HAL_SPI_TransmitReceive+0x1ac>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d016      	beq.n	8006ec2 <HAL_SPI_TransmitReceive+0x1ac>
 8006e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d113      	bne.n	8006ec2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9e:	881a      	ldrh	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eaa:	1c9a      	adds	r2, r3, #2
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d11c      	bne.n	8006f0a <HAL_SPI_TransmitReceive+0x1f4>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d016      	beq.n	8006f0a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee6:	b292      	uxth	r2, r2
 8006ee8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eee:	1c9a      	adds	r2, r3, #2
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	3b01      	subs	r3, #1
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f06:	2301      	movs	r3, #1
 8006f08:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f0a:	f7fa fbb7 	bl	800167c <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d80b      	bhi.n	8006f32 <HAL_SPI_TransmitReceive+0x21c>
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f20:	d007      	beq.n	8006f32 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006f30:	e109      	b.n	8007146 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d19f      	bne.n	8006e7c <HAL_SPI_TransmitReceive+0x166>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d199      	bne.n	8006e7c <HAL_SPI_TransmitReceive+0x166>
 8006f48:	e0e3      	b.n	8007112 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_SPI_TransmitReceive+0x244>
 8006f52:	8a7b      	ldrh	r3, [r7, #18]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	f040 80cf 	bne.w	80070f8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d912      	bls.n	8006f8a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f68:	881a      	ldrh	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f74:	1c9a      	adds	r2, r3, #2
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b02      	subs	r3, #2
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f88:	e0b6      	b.n	80070f8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	330c      	adds	r3, #12
 8006f94:	7812      	ldrb	r2, [r2, #0]
 8006f96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fb0:	e0a2      	b.n	80070f8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f003 0302 	and.w	r3, r3, #2
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d134      	bne.n	800702a <HAL_SPI_TransmitReceive+0x314>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d02f      	beq.n	800702a <HAL_SPI_TransmitReceive+0x314>
 8006fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d12c      	bne.n	800702a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d912      	bls.n	8007000 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fde:	881a      	ldrh	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fea:	1c9a      	adds	r2, r3, #2
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	3b02      	subs	r3, #2
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ffe:	e012      	b.n	8007026 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	330c      	adds	r3, #12
 800700a:	7812      	ldrb	r2, [r2, #0]
 800700c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007012:	1c5a      	adds	r2, r3, #1
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800701c:	b29b      	uxth	r3, r3
 800701e:	3b01      	subs	r3, #1
 8007020:	b29a      	uxth	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b01      	cmp	r3, #1
 8007036:	d148      	bne.n	80070ca <HAL_SPI_TransmitReceive+0x3b4>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d042      	beq.n	80070ca <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800704a:	b29b      	uxth	r3, r3
 800704c:	2b01      	cmp	r3, #1
 800704e:	d923      	bls.n	8007098 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800705a:	b292      	uxth	r2, r2
 800705c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007062:	1c9a      	adds	r2, r3, #2
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b02      	subs	r3, #2
 8007072:	b29a      	uxth	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b01      	cmp	r3, #1
 8007084:	d81f      	bhi.n	80070c6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007094:	605a      	str	r2, [r3, #4]
 8007096:	e016      	b.n	80070c6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f103 020c 	add.w	r2, r3, #12
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a4:	7812      	ldrb	r2, [r2, #0]
 80070a6:	b2d2      	uxtb	r2, r2
 80070a8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070c6:	2301      	movs	r3, #1
 80070c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070ca:	f7fa fad7 	bl	800167c <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d803      	bhi.n	80070e2 <HAL_SPI_TransmitReceive+0x3cc>
 80070da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e0:	d102      	bne.n	80070e8 <HAL_SPI_TransmitReceive+0x3d2>
 80070e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d107      	bne.n	80070f8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80070f6:	e026      	b.n	8007146 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f47f af57 	bne.w	8006fb2 <HAL_SPI_TransmitReceive+0x29c>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800710a:	b29b      	uxth	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	f47f af50 	bne.w	8006fb2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 f93e 	bl	8007398 <SPI_EndRxTxTransaction>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d005      	beq.n	800712e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2220      	movs	r2, #32
 800712c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800713c:	e003      	b.n	8007146 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800714e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007152:	4618      	mov	r0, r3
 8007154:	3728      	adds	r7, #40	@ 0x28
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	4613      	mov	r3, r2
 800716a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800716c:	f7fa fa86 	bl	800167c <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007174:	1a9b      	subs	r3, r3, r2
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	4413      	add	r3, r2
 800717a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800717c:	f7fa fa7e 	bl	800167c <HAL_GetTick>
 8007180:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007182:	4b39      	ldr	r3, [pc, #228]	@ (8007268 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	015b      	lsls	r3, r3, #5
 8007188:	0d1b      	lsrs	r3, r3, #20
 800718a:	69fa      	ldr	r2, [r7, #28]
 800718c:	fb02 f303 	mul.w	r3, r2, r3
 8007190:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007192:	e054      	b.n	800723e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719a:	d050      	beq.n	800723e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800719c:	f7fa fa6e 	bl	800167c <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	69fa      	ldr	r2, [r7, #28]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d902      	bls.n	80071b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d13d      	bne.n	800722e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80071c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071ca:	d111      	bne.n	80071f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071d4:	d004      	beq.n	80071e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071de:	d107      	bne.n	80071f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071f8:	d10f      	bne.n	800721a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007218:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e017      	b.n	800725e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	3b01      	subs	r3, #1
 800723c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	4013      	ands	r3, r2
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	429a      	cmp	r2, r3
 800724c:	bf0c      	ite	eq
 800724e:	2301      	moveq	r3, #1
 8007250:	2300      	movne	r3, #0
 8007252:	b2db      	uxtb	r3, r3
 8007254:	461a      	mov	r2, r3
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	429a      	cmp	r2, r3
 800725a:	d19b      	bne.n	8007194 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3720      	adds	r7, #32
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	20000000 	.word	0x20000000

0800726c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b08a      	sub	sp, #40	@ 0x28
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
 8007278:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800727e:	f7fa f9fd 	bl	800167c <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007286:	1a9b      	subs	r3, r3, r2
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	4413      	add	r3, r2
 800728c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800728e:	f7fa f9f5 	bl	800167c <HAL_GetTick>
 8007292:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	330c      	adds	r3, #12
 800729a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800729c:	4b3d      	ldr	r3, [pc, #244]	@ (8007394 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	4613      	mov	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	00da      	lsls	r2, r3, #3
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	0d1b      	lsrs	r3, r3, #20
 80072ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072ae:	fb02 f303 	mul.w	r3, r2, r3
 80072b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80072b4:	e060      	b.n	8007378 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80072bc:	d107      	bne.n	80072ce <SPI_WaitFifoStateUntilTimeout+0x62>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d104      	bne.n	80072ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80072cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d4:	d050      	beq.n	8007378 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072d6:	f7fa f9d1 	bl	800167c <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d902      	bls.n	80072ec <SPI_WaitFifoStateUntilTimeout+0x80>
 80072e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d13d      	bne.n	8007368 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80072fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007304:	d111      	bne.n	800732a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800730e:	d004      	beq.n	800731a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007318:	d107      	bne.n	800732a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007328:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007332:	d10f      	bne.n	8007354 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007352:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e010      	b.n	800738a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	3b01      	subs	r3, #1
 8007376:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	689a      	ldr	r2, [r3, #8]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	4013      	ands	r3, r2
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	429a      	cmp	r2, r3
 8007386:	d196      	bne.n	80072b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3728      	adds	r7, #40	@ 0x28
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	20000000 	.word	0x20000000

08007398 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af02      	add	r7, sp, #8
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f7ff ff5b 	bl	800726c <SPI_WaitFifoStateUntilTimeout>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d007      	beq.n	80073cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073c0:	f043 0220 	orr.w	r2, r3, #32
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e027      	b.n	800741c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2200      	movs	r2, #0
 80073d4:	2180      	movs	r1, #128	@ 0x80
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f7ff fec0 	bl	800715c <SPI_WaitFlagStateUntilTimeout>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d007      	beq.n	80073f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073e6:	f043 0220 	orr.w	r2, r3, #32
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e014      	b.n	800741c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f7ff ff34 	bl	800726c <SPI_WaitFifoStateUntilTimeout>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d007      	beq.n	800741a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800740e:	f043 0220 	orr.w	r2, r3, #32
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e000      	b.n	800741c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e042      	b.n	80074bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800743c:	2b00      	cmp	r3, #0
 800743e:	d106      	bne.n	800744e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7f9 fdf9 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2224      	movs	r2, #36	@ 0x24
 8007452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f022 0201 	bic.w	r2, r2, #1
 8007464:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800746a:	2b00      	cmp	r3, #0
 800746c:	d002      	beq.n	8007474 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fbb6 	bl	8007be0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f8b3 	bl	80075e0 <UART_SetConfig>
 800747a:	4603      	mov	r3, r0
 800747c:	2b01      	cmp	r3, #1
 800747e:	d101      	bne.n	8007484 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e01b      	b.n	80074bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007492:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689a      	ldr	r2, [r3, #8]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f042 0201 	orr.w	r2, r2, #1
 80074b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fc35 	bl	8007d24 <UART_CheckIdleState>
 80074ba:	4603      	mov	r3, r0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08a      	sub	sp, #40	@ 0x28
 80074c8:	af02      	add	r7, sp, #8
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	603b      	str	r3, [r7, #0]
 80074d0:	4613      	mov	r3, r2
 80074d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074da:	2b20      	cmp	r3, #32
 80074dc:	d17b      	bne.n	80075d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <HAL_UART_Transmit+0x26>
 80074e4:	88fb      	ldrh	r3, [r7, #6]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e074      	b.n	80075d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2221      	movs	r2, #33	@ 0x21
 80074fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074fe:	f7fa f8bd 	bl	800167c <HAL_GetTick>
 8007502:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	88fa      	ldrh	r2, [r7, #6]
 8007508:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	88fa      	ldrh	r2, [r7, #6]
 8007510:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800751c:	d108      	bne.n	8007530 <HAL_UART_Transmit+0x6c>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d104      	bne.n	8007530 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007526:	2300      	movs	r3, #0
 8007528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	61bb      	str	r3, [r7, #24]
 800752e:	e003      	b.n	8007538 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007534:	2300      	movs	r3, #0
 8007536:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007538:	e030      	b.n	800759c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2200      	movs	r2, #0
 8007542:	2180      	movs	r1, #128	@ 0x80
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 fc97 	bl	8007e78 <UART_WaitOnFlagUntilTimeout>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d005      	beq.n	800755c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2220      	movs	r2, #32
 8007554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e03d      	b.n	80075d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10b      	bne.n	800757a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007570:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	3302      	adds	r3, #2
 8007576:	61bb      	str	r3, [r7, #24]
 8007578:	e007      	b.n	800758a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	781a      	ldrb	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	3301      	adds	r3, #1
 8007588:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007590:	b29b      	uxth	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	b29a      	uxth	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1c8      	bne.n	800753a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2200      	movs	r2, #0
 80075b0:	2140      	movs	r1, #64	@ 0x40
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f000 fc60 	bl	8007e78 <UART_WaitOnFlagUntilTimeout>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d005      	beq.n	80075ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e006      	b.n	80075d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2220      	movs	r2, #32
 80075ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	e000      	b.n	80075d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80075d6:	2302      	movs	r3, #2
  }
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3720      	adds	r7, #32
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075e4:	b08c      	sub	sp, #48	@ 0x30
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	689a      	ldr	r2, [r3, #8]
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	431a      	orrs	r2, r3
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	431a      	orrs	r2, r3
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	69db      	ldr	r3, [r3, #28]
 8007604:	4313      	orrs	r3, r2
 8007606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	4baa      	ldr	r3, [pc, #680]	@ (80078b8 <UART_SetConfig+0x2d8>)
 8007610:	4013      	ands	r3, r2
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	6812      	ldr	r2, [r2, #0]
 8007616:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007618:	430b      	orrs	r3, r1
 800761a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	68da      	ldr	r2, [r3, #12]
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a9f      	ldr	r2, [pc, #636]	@ (80078bc <UART_SetConfig+0x2dc>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d004      	beq.n	800764c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007648:	4313      	orrs	r3, r2
 800764a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007656:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	6812      	ldr	r2, [r2, #0]
 800765e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007660:	430b      	orrs	r3, r1
 8007662:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766a:	f023 010f 	bic.w	r1, r3, #15
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a90      	ldr	r2, [pc, #576]	@ (80078c0 <UART_SetConfig+0x2e0>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d125      	bne.n	80076d0 <UART_SetConfig+0xf0>
 8007684:	4b8f      	ldr	r3, [pc, #572]	@ (80078c4 <UART_SetConfig+0x2e4>)
 8007686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800768a:	f003 0303 	and.w	r3, r3, #3
 800768e:	2b03      	cmp	r3, #3
 8007690:	d81a      	bhi.n	80076c8 <UART_SetConfig+0xe8>
 8007692:	a201      	add	r2, pc, #4	@ (adr r2, 8007698 <UART_SetConfig+0xb8>)
 8007694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007698:	080076a9 	.word	0x080076a9
 800769c:	080076b9 	.word	0x080076b9
 80076a0:	080076b1 	.word	0x080076b1
 80076a4:	080076c1 	.word	0x080076c1
 80076a8:	2301      	movs	r3, #1
 80076aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ae:	e116      	b.n	80078de <UART_SetConfig+0x2fe>
 80076b0:	2302      	movs	r3, #2
 80076b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076b6:	e112      	b.n	80078de <UART_SetConfig+0x2fe>
 80076b8:	2304      	movs	r3, #4
 80076ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076be:	e10e      	b.n	80078de <UART_SetConfig+0x2fe>
 80076c0:	2308      	movs	r3, #8
 80076c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076c6:	e10a      	b.n	80078de <UART_SetConfig+0x2fe>
 80076c8:	2310      	movs	r3, #16
 80076ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ce:	e106      	b.n	80078de <UART_SetConfig+0x2fe>
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a7c      	ldr	r2, [pc, #496]	@ (80078c8 <UART_SetConfig+0x2e8>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d138      	bne.n	800774c <UART_SetConfig+0x16c>
 80076da:	4b7a      	ldr	r3, [pc, #488]	@ (80078c4 <UART_SetConfig+0x2e4>)
 80076dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e0:	f003 030c 	and.w	r3, r3, #12
 80076e4:	2b0c      	cmp	r3, #12
 80076e6:	d82d      	bhi.n	8007744 <UART_SetConfig+0x164>
 80076e8:	a201      	add	r2, pc, #4	@ (adr r2, 80076f0 <UART_SetConfig+0x110>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	08007725 	.word	0x08007725
 80076f4:	08007745 	.word	0x08007745
 80076f8:	08007745 	.word	0x08007745
 80076fc:	08007745 	.word	0x08007745
 8007700:	08007735 	.word	0x08007735
 8007704:	08007745 	.word	0x08007745
 8007708:	08007745 	.word	0x08007745
 800770c:	08007745 	.word	0x08007745
 8007710:	0800772d 	.word	0x0800772d
 8007714:	08007745 	.word	0x08007745
 8007718:	08007745 	.word	0x08007745
 800771c:	08007745 	.word	0x08007745
 8007720:	0800773d 	.word	0x0800773d
 8007724:	2300      	movs	r3, #0
 8007726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800772a:	e0d8      	b.n	80078de <UART_SetConfig+0x2fe>
 800772c:	2302      	movs	r3, #2
 800772e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007732:	e0d4      	b.n	80078de <UART_SetConfig+0x2fe>
 8007734:	2304      	movs	r3, #4
 8007736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800773a:	e0d0      	b.n	80078de <UART_SetConfig+0x2fe>
 800773c:	2308      	movs	r3, #8
 800773e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007742:	e0cc      	b.n	80078de <UART_SetConfig+0x2fe>
 8007744:	2310      	movs	r3, #16
 8007746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800774a:	e0c8      	b.n	80078de <UART_SetConfig+0x2fe>
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a5e      	ldr	r2, [pc, #376]	@ (80078cc <UART_SetConfig+0x2ec>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d125      	bne.n	80077a2 <UART_SetConfig+0x1c2>
 8007756:	4b5b      	ldr	r3, [pc, #364]	@ (80078c4 <UART_SetConfig+0x2e4>)
 8007758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800775c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007760:	2b30      	cmp	r3, #48	@ 0x30
 8007762:	d016      	beq.n	8007792 <UART_SetConfig+0x1b2>
 8007764:	2b30      	cmp	r3, #48	@ 0x30
 8007766:	d818      	bhi.n	800779a <UART_SetConfig+0x1ba>
 8007768:	2b20      	cmp	r3, #32
 800776a:	d00a      	beq.n	8007782 <UART_SetConfig+0x1a2>
 800776c:	2b20      	cmp	r3, #32
 800776e:	d814      	bhi.n	800779a <UART_SetConfig+0x1ba>
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <UART_SetConfig+0x19a>
 8007774:	2b10      	cmp	r3, #16
 8007776:	d008      	beq.n	800778a <UART_SetConfig+0x1aa>
 8007778:	e00f      	b.n	800779a <UART_SetConfig+0x1ba>
 800777a:	2300      	movs	r3, #0
 800777c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007780:	e0ad      	b.n	80078de <UART_SetConfig+0x2fe>
 8007782:	2302      	movs	r3, #2
 8007784:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007788:	e0a9      	b.n	80078de <UART_SetConfig+0x2fe>
 800778a:	2304      	movs	r3, #4
 800778c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007790:	e0a5      	b.n	80078de <UART_SetConfig+0x2fe>
 8007792:	2308      	movs	r3, #8
 8007794:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007798:	e0a1      	b.n	80078de <UART_SetConfig+0x2fe>
 800779a:	2310      	movs	r3, #16
 800779c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077a0:	e09d      	b.n	80078de <UART_SetConfig+0x2fe>
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a4a      	ldr	r2, [pc, #296]	@ (80078d0 <UART_SetConfig+0x2f0>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d125      	bne.n	80077f8 <UART_SetConfig+0x218>
 80077ac:	4b45      	ldr	r3, [pc, #276]	@ (80078c4 <UART_SetConfig+0x2e4>)
 80077ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80077b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80077b8:	d016      	beq.n	80077e8 <UART_SetConfig+0x208>
 80077ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80077bc:	d818      	bhi.n	80077f0 <UART_SetConfig+0x210>
 80077be:	2b80      	cmp	r3, #128	@ 0x80
 80077c0:	d00a      	beq.n	80077d8 <UART_SetConfig+0x1f8>
 80077c2:	2b80      	cmp	r3, #128	@ 0x80
 80077c4:	d814      	bhi.n	80077f0 <UART_SetConfig+0x210>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d002      	beq.n	80077d0 <UART_SetConfig+0x1f0>
 80077ca:	2b40      	cmp	r3, #64	@ 0x40
 80077cc:	d008      	beq.n	80077e0 <UART_SetConfig+0x200>
 80077ce:	e00f      	b.n	80077f0 <UART_SetConfig+0x210>
 80077d0:	2300      	movs	r3, #0
 80077d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077d6:	e082      	b.n	80078de <UART_SetConfig+0x2fe>
 80077d8:	2302      	movs	r3, #2
 80077da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077de:	e07e      	b.n	80078de <UART_SetConfig+0x2fe>
 80077e0:	2304      	movs	r3, #4
 80077e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077e6:	e07a      	b.n	80078de <UART_SetConfig+0x2fe>
 80077e8:	2308      	movs	r3, #8
 80077ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ee:	e076      	b.n	80078de <UART_SetConfig+0x2fe>
 80077f0:	2310      	movs	r3, #16
 80077f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077f6:	e072      	b.n	80078de <UART_SetConfig+0x2fe>
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a35      	ldr	r2, [pc, #212]	@ (80078d4 <UART_SetConfig+0x2f4>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d12a      	bne.n	8007858 <UART_SetConfig+0x278>
 8007802:	4b30      	ldr	r3, [pc, #192]	@ (80078c4 <UART_SetConfig+0x2e4>)
 8007804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007808:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800780c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007810:	d01a      	beq.n	8007848 <UART_SetConfig+0x268>
 8007812:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007816:	d81b      	bhi.n	8007850 <UART_SetConfig+0x270>
 8007818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800781c:	d00c      	beq.n	8007838 <UART_SetConfig+0x258>
 800781e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007822:	d815      	bhi.n	8007850 <UART_SetConfig+0x270>
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <UART_SetConfig+0x250>
 8007828:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800782c:	d008      	beq.n	8007840 <UART_SetConfig+0x260>
 800782e:	e00f      	b.n	8007850 <UART_SetConfig+0x270>
 8007830:	2300      	movs	r3, #0
 8007832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007836:	e052      	b.n	80078de <UART_SetConfig+0x2fe>
 8007838:	2302      	movs	r3, #2
 800783a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800783e:	e04e      	b.n	80078de <UART_SetConfig+0x2fe>
 8007840:	2304      	movs	r3, #4
 8007842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007846:	e04a      	b.n	80078de <UART_SetConfig+0x2fe>
 8007848:	2308      	movs	r3, #8
 800784a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800784e:	e046      	b.n	80078de <UART_SetConfig+0x2fe>
 8007850:	2310      	movs	r3, #16
 8007852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007856:	e042      	b.n	80078de <UART_SetConfig+0x2fe>
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a17      	ldr	r2, [pc, #92]	@ (80078bc <UART_SetConfig+0x2dc>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d13a      	bne.n	80078d8 <UART_SetConfig+0x2f8>
 8007862:	4b18      	ldr	r3, [pc, #96]	@ (80078c4 <UART_SetConfig+0x2e4>)
 8007864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007868:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800786c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007870:	d01a      	beq.n	80078a8 <UART_SetConfig+0x2c8>
 8007872:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007876:	d81b      	bhi.n	80078b0 <UART_SetConfig+0x2d0>
 8007878:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800787c:	d00c      	beq.n	8007898 <UART_SetConfig+0x2b8>
 800787e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007882:	d815      	bhi.n	80078b0 <UART_SetConfig+0x2d0>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <UART_SetConfig+0x2b0>
 8007888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800788c:	d008      	beq.n	80078a0 <UART_SetConfig+0x2c0>
 800788e:	e00f      	b.n	80078b0 <UART_SetConfig+0x2d0>
 8007890:	2300      	movs	r3, #0
 8007892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007896:	e022      	b.n	80078de <UART_SetConfig+0x2fe>
 8007898:	2302      	movs	r3, #2
 800789a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800789e:	e01e      	b.n	80078de <UART_SetConfig+0x2fe>
 80078a0:	2304      	movs	r3, #4
 80078a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078a6:	e01a      	b.n	80078de <UART_SetConfig+0x2fe>
 80078a8:	2308      	movs	r3, #8
 80078aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ae:	e016      	b.n	80078de <UART_SetConfig+0x2fe>
 80078b0:	2310      	movs	r3, #16
 80078b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078b6:	e012      	b.n	80078de <UART_SetConfig+0x2fe>
 80078b8:	cfff69f3 	.word	0xcfff69f3
 80078bc:	40008000 	.word	0x40008000
 80078c0:	40013800 	.word	0x40013800
 80078c4:	40021000 	.word	0x40021000
 80078c8:	40004400 	.word	0x40004400
 80078cc:	40004800 	.word	0x40004800
 80078d0:	40004c00 	.word	0x40004c00
 80078d4:	40005000 	.word	0x40005000
 80078d8:	2310      	movs	r3, #16
 80078da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4ab0      	ldr	r2, [pc, #704]	@ (8007ba4 <UART_SetConfig+0x5c4>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	f040 809b 	bne.w	8007a20 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80078ee:	2b08      	cmp	r3, #8
 80078f0:	d827      	bhi.n	8007942 <UART_SetConfig+0x362>
 80078f2:	a201      	add	r2, pc, #4	@ (adr r2, 80078f8 <UART_SetConfig+0x318>)
 80078f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f8:	0800791d 	.word	0x0800791d
 80078fc:	08007925 	.word	0x08007925
 8007900:	0800792d 	.word	0x0800792d
 8007904:	08007943 	.word	0x08007943
 8007908:	08007933 	.word	0x08007933
 800790c:	08007943 	.word	0x08007943
 8007910:	08007943 	.word	0x08007943
 8007914:	08007943 	.word	0x08007943
 8007918:	0800793b 	.word	0x0800793b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800791c:	f7fc fa3c 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 8007920:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007922:	e014      	b.n	800794e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007924:	f7fc fa4c 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 8007928:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800792a:	e010      	b.n	800794e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800792c:	4b9e      	ldr	r3, [pc, #632]	@ (8007ba8 <UART_SetConfig+0x5c8>)
 800792e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007930:	e00d      	b.n	800794e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007932:	f7fc f981 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8007936:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007938:	e009      	b.n	800794e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800793a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800793e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007940:	e005      	b.n	800794e <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8007942:	2300      	movs	r3, #0
 8007944:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800794c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800794e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 8130 	beq.w	8007bb6 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800795a:	4a94      	ldr	r2, [pc, #592]	@ (8007bac <UART_SetConfig+0x5cc>)
 800795c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007960:	461a      	mov	r2, r3
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	fbb3 f3f2 	udiv	r3, r3, r2
 8007968:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	4613      	mov	r3, r2
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	4413      	add	r3, r2
 8007974:	69ba      	ldr	r2, [r7, #24]
 8007976:	429a      	cmp	r2, r3
 8007978:	d305      	bcc.n	8007986 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	429a      	cmp	r2, r3
 8007984:	d903      	bls.n	800798e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800798c:	e113      	b.n	8007bb6 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800798e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007990:	2200      	movs	r2, #0
 8007992:	60bb      	str	r3, [r7, #8]
 8007994:	60fa      	str	r2, [r7, #12]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800799a:	4a84      	ldr	r2, [pc, #528]	@ (8007bac <UART_SetConfig+0x5cc>)
 800799c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	2200      	movs	r2, #0
 80079a4:	603b      	str	r3, [r7, #0]
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80079b0:	f7f8 fc48 	bl	8000244 <__aeabi_uldivmod>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4610      	mov	r0, r2
 80079ba:	4619      	mov	r1, r3
 80079bc:	f04f 0200 	mov.w	r2, #0
 80079c0:	f04f 0300 	mov.w	r3, #0
 80079c4:	020b      	lsls	r3, r1, #8
 80079c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80079ca:	0202      	lsls	r2, r0, #8
 80079cc:	6979      	ldr	r1, [r7, #20]
 80079ce:	6849      	ldr	r1, [r1, #4]
 80079d0:	0849      	lsrs	r1, r1, #1
 80079d2:	2000      	movs	r0, #0
 80079d4:	460c      	mov	r4, r1
 80079d6:	4605      	mov	r5, r0
 80079d8:	eb12 0804 	adds.w	r8, r2, r4
 80079dc:	eb43 0905 	adc.w	r9, r3, r5
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	469a      	mov	sl, r3
 80079e8:	4693      	mov	fp, r2
 80079ea:	4652      	mov	r2, sl
 80079ec:	465b      	mov	r3, fp
 80079ee:	4640      	mov	r0, r8
 80079f0:	4649      	mov	r1, r9
 80079f2:	f7f8 fc27 	bl	8000244 <__aeabi_uldivmod>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4613      	mov	r3, r2
 80079fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a04:	d308      	bcc.n	8007a18 <UART_SetConfig+0x438>
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a0c:	d204      	bcs.n	8007a18 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6a3a      	ldr	r2, [r7, #32]
 8007a14:	60da      	str	r2, [r3, #12]
 8007a16:	e0ce      	b.n	8007bb6 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a1e:	e0ca      	b.n	8007bb6 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	69db      	ldr	r3, [r3, #28]
 8007a24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a28:	d166      	bne.n	8007af8 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8007a2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a2e:	2b08      	cmp	r3, #8
 8007a30:	d827      	bhi.n	8007a82 <UART_SetConfig+0x4a2>
 8007a32:	a201      	add	r2, pc, #4	@ (adr r2, 8007a38 <UART_SetConfig+0x458>)
 8007a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a38:	08007a5d 	.word	0x08007a5d
 8007a3c:	08007a65 	.word	0x08007a65
 8007a40:	08007a6d 	.word	0x08007a6d
 8007a44:	08007a83 	.word	0x08007a83
 8007a48:	08007a73 	.word	0x08007a73
 8007a4c:	08007a83 	.word	0x08007a83
 8007a50:	08007a83 	.word	0x08007a83
 8007a54:	08007a83 	.word	0x08007a83
 8007a58:	08007a7b 	.word	0x08007a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a5c:	f7fc f99c 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 8007a60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a62:	e014      	b.n	8007a8e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a64:	f7fc f9ac 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 8007a68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a6a:	e010      	b.n	8007a8e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a6c:	4b4e      	ldr	r3, [pc, #312]	@ (8007ba8 <UART_SetConfig+0x5c8>)
 8007a6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a70:	e00d      	b.n	8007a8e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a72:	f7fc f8e1 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8007a76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a78:	e009      	b.n	8007a8e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a80:	e005      	b.n	8007a8e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 8090 	beq.w	8007bb6 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9a:	4a44      	ldr	r2, [pc, #272]	@ (8007bac <UART_SetConfig+0x5cc>)
 8007a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aa8:	005a      	lsls	r2, r3, #1
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	085b      	lsrs	r3, r3, #1
 8007ab0:	441a      	add	r2, r3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	2b0f      	cmp	r3, #15
 8007ac0:	d916      	bls.n	8007af0 <UART_SetConfig+0x510>
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ac8:	d212      	bcs.n	8007af0 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	f023 030f 	bic.w	r3, r3, #15
 8007ad2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	085b      	lsrs	r3, r3, #1
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	f003 0307 	and.w	r3, r3, #7
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	8bfb      	ldrh	r3, [r7, #30]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	8bfa      	ldrh	r2, [r7, #30]
 8007aec:	60da      	str	r2, [r3, #12]
 8007aee:	e062      	b.n	8007bb6 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007af6:	e05e      	b.n	8007bb6 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007af8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007afc:	2b08      	cmp	r3, #8
 8007afe:	d828      	bhi.n	8007b52 <UART_SetConfig+0x572>
 8007b00:	a201      	add	r2, pc, #4	@ (adr r2, 8007b08 <UART_SetConfig+0x528>)
 8007b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b06:	bf00      	nop
 8007b08:	08007b2d 	.word	0x08007b2d
 8007b0c:	08007b35 	.word	0x08007b35
 8007b10:	08007b3d 	.word	0x08007b3d
 8007b14:	08007b53 	.word	0x08007b53
 8007b18:	08007b43 	.word	0x08007b43
 8007b1c:	08007b53 	.word	0x08007b53
 8007b20:	08007b53 	.word	0x08007b53
 8007b24:	08007b53 	.word	0x08007b53
 8007b28:	08007b4b 	.word	0x08007b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b2c:	f7fc f934 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 8007b30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b32:	e014      	b.n	8007b5e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b34:	f7fc f944 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 8007b38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b3a:	e010      	b.n	8007b5e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ba8 <UART_SetConfig+0x5c8>)
 8007b3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b40:	e00d      	b.n	8007b5e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b42:	f7fc f879 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8007b46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b48:	e009      	b.n	8007b5e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b50:	e005      	b.n	8007b5e <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b5c:	bf00      	nop
    }

    if (pclk != 0U)
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d028      	beq.n	8007bb6 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b68:	4a10      	ldr	r2, [pc, #64]	@ (8007bac <UART_SetConfig+0x5cc>)
 8007b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b72:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	085b      	lsrs	r3, r3, #1
 8007b7c:	441a      	add	r2, r3
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	2b0f      	cmp	r3, #15
 8007b8c:	d910      	bls.n	8007bb0 <UART_SetConfig+0x5d0>
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b94:	d20c      	bcs.n	8007bb0 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	60da      	str	r2, [r3, #12]
 8007ba0:	e009      	b.n	8007bb6 <UART_SetConfig+0x5d6>
 8007ba2:	bf00      	nop
 8007ba4:	40008000 	.word	0x40008000
 8007ba8:	00f42400 	.word	0x00f42400
 8007bac:	0800be24 	.word	0x0800be24
      }
      else
      {
        ret = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007bd2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3730      	adds	r7, #48	@ 0x30
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bec:	f003 0308 	and.w	r3, r3, #8
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00a      	beq.n	8007c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c52:	f003 0304 	and.w	r3, r3, #4
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c74:	f003 0310 	and.w	r3, r3, #16
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00a      	beq.n	8007c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c96:	f003 0320 	and.w	r3, r3, #32
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d01a      	beq.n	8007cf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cde:	d10a      	bne.n	8007cf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	605a      	str	r2, [r3, #4]
  }
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b098      	sub	sp, #96	@ 0x60
 8007d28:	af02      	add	r7, sp, #8
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d34:	f7f9 fca2 	bl	800167c <HAL_GetTick>
 8007d38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0308 	and.w	r3, r3, #8
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	d12f      	bne.n	8007da8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d50:	2200      	movs	r2, #0
 8007d52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f88e 	bl	8007e78 <UART_WaitOnFlagUntilTimeout>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d022      	beq.n	8007da8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6a:	e853 3f00 	ldrex	r3, [r3]
 8007d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d76:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d88:	e841 2300 	strex	r3, r2, [r1]
 8007d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e6      	bne.n	8007d62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2220      	movs	r2, #32
 8007d98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e063      	b.n	8007e70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 0304 	and.w	r3, r3, #4
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	d149      	bne.n	8007e4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007db6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f857 	bl	8007e78 <UART_WaitOnFlagUntilTimeout>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d03c      	beq.n	8007e4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	623b      	str	r3, [r7, #32]
   return(result);
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007de4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	461a      	mov	r2, r3
 8007dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dee:	633b      	str	r3, [r7, #48]	@ 0x30
 8007df0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007df4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e6      	bne.n	8007dd0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3308      	adds	r3, #8
 8007e08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f023 0301 	bic.w	r3, r3, #1
 8007e18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3308      	adds	r3, #8
 8007e20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e22:	61fa      	str	r2, [r7, #28]
 8007e24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e26:	69b9      	ldr	r1, [r7, #24]
 8007e28:	69fa      	ldr	r2, [r7, #28]
 8007e2a:	e841 2300 	strex	r3, r2, [r1]
 8007e2e:	617b      	str	r3, [r7, #20]
   return(result);
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e5      	bne.n	8007e02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e012      	b.n	8007e70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3758      	adds	r7, #88	@ 0x58
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	4613      	mov	r3, r2
 8007e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e88:	e04f      	b.n	8007f2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e90:	d04b      	beq.n	8007f2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e92:	f7f9 fbf3 	bl	800167c <HAL_GetTick>
 8007e96:	4602      	mov	r2, r0
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d302      	bcc.n	8007ea8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e04e      	b.n	8007f4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 0304 	and.w	r3, r3, #4
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d037      	beq.n	8007f2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2b80      	cmp	r3, #128	@ 0x80
 8007ebe:	d034      	beq.n	8007f2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b40      	cmp	r3, #64	@ 0x40
 8007ec4:	d031      	beq.n	8007f2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	f003 0308 	and.w	r3, r3, #8
 8007ed0:	2b08      	cmp	r3, #8
 8007ed2:	d110      	bne.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2208      	movs	r2, #8
 8007eda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 f838 	bl	8007f52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2208      	movs	r2, #8
 8007ee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e029      	b.n	8007f4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f04:	d111      	bne.n	8007f2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 f81e 	bl	8007f52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2220      	movs	r2, #32
 8007f1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e00f      	b.n	8007f4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69da      	ldr	r2, [r3, #28]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	4013      	ands	r3, r2
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	bf0c      	ite	eq
 8007f3a:	2301      	moveq	r3, #1
 8007f3c:	2300      	movne	r3, #0
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	461a      	mov	r2, r3
 8007f42:	79fb      	ldrb	r3, [r7, #7]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d0a0      	beq.n	8007e8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b095      	sub	sp, #84	@ 0x54
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f62:	e853 3f00 	ldrex	r3, [r3]
 8007f66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	461a      	mov	r2, r3
 8007f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f78:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f80:	e841 2300 	strex	r3, r2, [r1]
 8007f84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1e6      	bne.n	8007f5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3308      	adds	r3, #8
 8007f92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	e853 3f00 	ldrex	r3, [r3]
 8007f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fa2:	f023 0301 	bic.w	r3, r3, #1
 8007fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3308      	adds	r3, #8
 8007fae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fb8:	e841 2300 	strex	r3, r2, [r1]
 8007fbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e3      	bne.n	8007f8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d118      	bne.n	8007ffe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f023 0310 	bic.w	r3, r3, #16
 8007fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fea:	61bb      	str	r3, [r7, #24]
 8007fec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	6979      	ldr	r1, [r7, #20]
 8007ff0:	69ba      	ldr	r2, [r7, #24]
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e6      	bne.n	8007fcc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2220      	movs	r2, #32
 8008002:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008012:	bf00      	nop
 8008014:	3754      	adds	r7, #84	@ 0x54
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800801e:	b480      	push	{r7}
 8008020:	b085      	sub	sp, #20
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800802c:	2b01      	cmp	r3, #1
 800802e:	d101      	bne.n	8008034 <HAL_UARTEx_DisableFifoMode+0x16>
 8008030:	2302      	movs	r3, #2
 8008032:	e027      	b.n	8008084 <HAL_UARTEx_DisableFifoMode+0x66>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2224      	movs	r2, #36	@ 0x24
 8008040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 0201 	bic.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008062:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2220      	movs	r2, #32
 8008076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d101      	bne.n	80080a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080a4:	2302      	movs	r3, #2
 80080a6:	e02d      	b.n	8008104 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2224      	movs	r2, #36	@ 0x24
 80080b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 0201 	bic.w	r2, r2, #1
 80080ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f84f 	bl	8008188 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2220      	movs	r2, #32
 80080f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800811c:	2b01      	cmp	r3, #1
 800811e:	d101      	bne.n	8008124 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008120:	2302      	movs	r3, #2
 8008122:	e02d      	b.n	8008180 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2224      	movs	r2, #36	@ 0x24
 8008130:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 0201 	bic.w	r2, r2, #1
 800814a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f811 	bl	8008188 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008194:	2b00      	cmp	r3, #0
 8008196:	d108      	bne.n	80081aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081a8:	e031      	b.n	800820e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081aa:	2308      	movs	r3, #8
 80081ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081ae:	2308      	movs	r3, #8
 80081b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	0e5b      	lsrs	r3, r3, #25
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	f003 0307 	and.w	r3, r3, #7
 80081c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	0f5b      	lsrs	r3, r3, #29
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	f003 0307 	and.w	r3, r3, #7
 80081d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081d2:	7bbb      	ldrb	r3, [r7, #14]
 80081d4:	7b3a      	ldrb	r2, [r7, #12]
 80081d6:	4911      	ldr	r1, [pc, #68]	@ (800821c <UARTEx_SetNbDataToProcess+0x94>)
 80081d8:	5c8a      	ldrb	r2, [r1, r2]
 80081da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081de:	7b3a      	ldrb	r2, [r7, #12]
 80081e0:	490f      	ldr	r1, [pc, #60]	@ (8008220 <UARTEx_SetNbDataToProcess+0x98>)
 80081e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	7b7a      	ldrb	r2, [r7, #13]
 80081f4:	4909      	ldr	r1, [pc, #36]	@ (800821c <UARTEx_SetNbDataToProcess+0x94>)
 80081f6:	5c8a      	ldrb	r2, [r1, r2]
 80081f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80081fc:	7b7a      	ldrb	r2, [r7, #13]
 80081fe:	4908      	ldr	r1, [pc, #32]	@ (8008220 <UARTEx_SetNbDataToProcess+0x98>)
 8008200:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008202:	fb93 f3f2 	sdiv	r3, r3, r2
 8008206:	b29a      	uxth	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800820e:	bf00      	nop
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	0800be3c 	.word	0x0800be3c
 8008220:	0800be44 	.word	0x0800be44

08008224 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8008228:	4907      	ldr	r1, [pc, #28]	@ (8008248 <MX_FATFS_Init+0x24>)
 800822a:	4808      	ldr	r0, [pc, #32]	@ (800824c <MX_FATFS_Init+0x28>)
 800822c:	f002 ffa2 	bl	800b174 <FATFS_LinkDriver>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d002      	beq.n	800823c <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8008236:	f04f 33ff 	mov.w	r3, #4294967295
 800823a:	e003      	b.n	8008244 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800823c:	4b04      	ldr	r3, [pc, #16]	@ (8008250 <MX_FATFS_Init+0x2c>)
 800823e:	2201      	movs	r2, #1
 8008240:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8008242:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8008244:	4618      	mov	r0, r3
 8008246:	bd80      	pop	{r7, pc}
 8008248:	20000858 	.word	0x20000858
 800824c:	2000000c 	.word	0x2000000c
 8008250:	2000085c 	.word	0x2000085c

08008254 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008254:	b480      	push	{r7}
 8008256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008258:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800825a:	4618      	mov	r0, r3
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	71fb      	strb	r3, [r7, #7]

  /* ! Modif ! */
//    Stat = STA_NOINIT;
//    return Stat;

	 return USER_SPI_initialize(pdrv);
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	4618      	mov	r0, r3
 8008272:	f000 f9d3 	bl	800861c <USER_SPI_initialize>
 8008276:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008278:	4618      	mov	r0, r3
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

	/* ! Modif ! */
//    Stat = STA_NOINIT;
//    return Stat;
    return USER_SPI_status(pdrv);
 800828a:	79fb      	ldrb	r3, [r7, #7]
 800828c:	4618      	mov	r0, r3
 800828e:	f000 fab1 	bl	80087f4 <USER_SPI_status>
 8008292:	4603      	mov	r3, r0

  /* USER CODE END STATUS */
}
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60b9      	str	r1, [r7, #8]
 80082a4:	607a      	str	r2, [r7, #4]
 80082a6:	603b      	str	r3, [r7, #0]
 80082a8:	4603      	mov	r3, r0
 80082aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */

	/* ! Modif ! */
    // return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 80082ac:	7bf8      	ldrb	r0, [r7, #15]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	68b9      	ldr	r1, [r7, #8]
 80082b4:	f000 fab4 	bl	8008820 <USER_SPI_read>
 80082b8:	4603      	mov	r3, r0

  /* USER CODE END READ */
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
 80082cc:	603b      	str	r3, [r7, #0]
 80082ce:	4603      	mov	r3, r0
 80082d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

	/* ! Modif ! */
    // return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 80082d2:	7bf8      	ldrb	r0, [r7, #15]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	68b9      	ldr	r1, [r7, #8]
 80082da:	f000 fb07 	bl	80088ec <USER_SPI_write>
 80082de:	4603      	mov	r3, r0

  /* USER CODE END WRITE */
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	603a      	str	r2, [r7, #0]
 80082f2:	71fb      	strb	r3, [r7, #7]
 80082f4:	460b      	mov	r3, r1
 80082f6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

	/* ! Modif ! */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80082f8:	79b9      	ldrb	r1, [r7, #6]
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 fb70 	bl	80089e4 <USER_SPI_ioctl>
 8008304:	4603      	mov	r3, r0

  /* USER CODE END IOCTL */
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008318:	f7f9 f9b0 	bl	800167c <HAL_GetTick>
 800831c:	4603      	mov	r3, r0
 800831e:	4a04      	ldr	r2, [pc, #16]	@ (8008330 <SPI_Timer_On+0x20>)
 8008320:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8008322:	4a04      	ldr	r2, [pc, #16]	@ (8008334 <SPI_Timer_On+0x24>)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6013      	str	r3, [r2, #0]
}
 8008328:	bf00      	nop
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	20000860 	.word	0x20000860
 8008334:	20000864 	.word	0x20000864

08008338 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8008338:	b580      	push	{r7, lr}
 800833a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800833c:	f7f9 f99e 	bl	800167c <HAL_GetTick>
 8008340:	4602      	mov	r2, r0
 8008342:	4b06      	ldr	r3, [pc, #24]	@ (800835c <SPI_Timer_Status+0x24>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	1ad2      	subs	r2, r2, r3
 8008348:	4b05      	ldr	r3, [pc, #20]	@ (8008360 <SPI_Timer_Status+0x28>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	429a      	cmp	r2, r3
 800834e:	bf34      	ite	cc
 8008350:	2301      	movcc	r3, #1
 8008352:	2300      	movcs	r3, #0
 8008354:	b2db      	uxtb	r3, r3
}
 8008356:	4618      	mov	r0, r3
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20000860 	.word	0x20000860
 8008360:	20000864 	.word	0x20000864

08008364 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af02      	add	r7, sp, #8
 800836a:	4603      	mov	r3, r0
 800836c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800836e:	f107 020f 	add.w	r2, r7, #15
 8008372:	1df9      	adds	r1, r7, #7
 8008374:	2332      	movs	r3, #50	@ 0x32
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	2301      	movs	r3, #1
 800837a:	4804      	ldr	r0, [pc, #16]	@ (800838c <xchg_spi+0x28>)
 800837c:	f7fe fccb 	bl	8006d16 <HAL_SPI_TransmitReceive>
    return rxDat;
 8008380:	7bfb      	ldrb	r3, [r7, #15]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	20000278 	.word	0x20000278

08008390 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008390:	b590      	push	{r4, r7, lr}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800839a:	2300      	movs	r3, #0
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	e00a      	b.n	80083b6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	18d4      	adds	r4, r2, r3
 80083a6:	20ff      	movs	r0, #255	@ 0xff
 80083a8:	f7ff ffdc 	bl	8008364 <xchg_spi>
 80083ac:	4603      	mov	r3, r0
 80083ae:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	3301      	adds	r3, #1
 80083b4:	60fb      	str	r3, [r7, #12]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d3f0      	bcc.n	80083a0 <rcvr_spi_multi+0x10>
	}
}
 80083be:	bf00      	nop
 80083c0:	bf00      	nop
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd90      	pop	{r4, r7, pc}

080083c8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	f04f 33ff 	mov.w	r3, #4294967295
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	4803      	ldr	r0, [pc, #12]	@ (80083ec <xmit_spi_multi+0x24>)
 80083de:	f7fe fb25 	bl	8006a2c <HAL_SPI_Transmit>
}
 80083e2:	bf00      	nop
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20000278 	.word	0x20000278

080083f0 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80083f8:	f7f9 f940 	bl	800167c <HAL_GetTick>
 80083fc:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008402:	20ff      	movs	r0, #255	@ 0xff
 8008404:	f7ff ffae 	bl	8008364 <xchg_spi>
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	2bff      	cmp	r3, #255	@ 0xff
 8008410:	d007      	beq.n	8008422 <wait_ready+0x32>
 8008412:	f7f9 f933 	bl	800167c <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	429a      	cmp	r2, r3
 8008420:	d8ef      	bhi.n	8008402 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	2bff      	cmp	r3, #255	@ 0xff
 8008426:	bf0c      	ite	eq
 8008428:	2301      	moveq	r3, #1
 800842a:	2300      	movne	r3, #0
 800842c:	b2db      	uxtb	r3, r3
}
 800842e:	4618      	mov	r0, r3
 8008430:	3718      	adds	r7, #24
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
	...

08008438 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800843c:	2201      	movs	r2, #1
 800843e:	2104      	movs	r1, #4
 8008440:	4803      	ldr	r0, [pc, #12]	@ (8008450 <despiselect+0x18>)
 8008442:	f7f9 fed1 	bl	80021e8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008446:	20ff      	movs	r0, #255	@ 0xff
 8008448:	f7ff ff8c 	bl	8008364 <xchg_spi>

}
 800844c:	bf00      	nop
 800844e:	bd80      	pop	{r7, pc}
 8008450:	42020c00 	.word	0x42020c00

08008454 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008454:	b580      	push	{r7, lr}
 8008456:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008458:	2200      	movs	r2, #0
 800845a:	2104      	movs	r1, #4
 800845c:	4809      	ldr	r0, [pc, #36]	@ (8008484 <spiselect+0x30>)
 800845e:	f7f9 fec3 	bl	80021e8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008462:	20ff      	movs	r0, #255	@ 0xff
 8008464:	f7ff ff7e 	bl	8008364 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008468:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800846c:	f7ff ffc0 	bl	80083f0 <wait_ready>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <spiselect+0x26>
 8008476:	2301      	movs	r3, #1
 8008478:	e002      	b.n	8008480 <spiselect+0x2c>

	despiselect();
 800847a:	f7ff ffdd 	bl	8008438 <despiselect>
	return 0;	/* Timeout */
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	bd80      	pop	{r7, pc}
 8008484:	42020c00 	.word	0x42020c00

08008488 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008492:	20c8      	movs	r0, #200	@ 0xc8
 8008494:	f7ff ff3c 	bl	8008310 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008498:	20ff      	movs	r0, #255	@ 0xff
 800849a:	f7ff ff63 	bl	8008364 <xchg_spi>
 800849e:	4603      	mov	r3, r0
 80084a0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	2bff      	cmp	r3, #255	@ 0xff
 80084a6:	d104      	bne.n	80084b2 <rcvr_datablock+0x2a>
 80084a8:	f7ff ff46 	bl	8008338 <SPI_Timer_Status>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1f2      	bne.n	8008498 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	2bfe      	cmp	r3, #254	@ 0xfe
 80084b6:	d001      	beq.n	80084bc <rcvr_datablock+0x34>
 80084b8:	2300      	movs	r3, #0
 80084ba:	e00a      	b.n	80084d2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7ff ff66 	bl	8008390 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80084c4:	20ff      	movs	r0, #255	@ 0xff
 80084c6:	f7ff ff4d 	bl	8008364 <xchg_spi>
 80084ca:	20ff      	movs	r0, #255	@ 0xff
 80084cc:	f7ff ff4a 	bl	8008364 <xchg_spi>

	return 1;						/* Function succeeded */
 80084d0:	2301      	movs	r3, #1
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	460b      	mov	r3, r1
 80084e4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80084e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80084ea:	f7ff ff81 	bl	80083f0 <wait_ready>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d101      	bne.n	80084f8 <xmit_datablock+0x1e>
 80084f4:	2300      	movs	r3, #0
 80084f6:	e01e      	b.n	8008536 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80084f8:	78fb      	ldrb	r3, [r7, #3]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7ff ff32 	bl	8008364 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	2bfd      	cmp	r3, #253	@ 0xfd
 8008504:	d016      	beq.n	8008534 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8008506:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7ff ff5c 	bl	80083c8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008510:	20ff      	movs	r0, #255	@ 0xff
 8008512:	f7ff ff27 	bl	8008364 <xchg_spi>
 8008516:	20ff      	movs	r0, #255	@ 0xff
 8008518:	f7ff ff24 	bl	8008364 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800851c:	20ff      	movs	r0, #255	@ 0xff
 800851e:	f7ff ff21 	bl	8008364 <xchg_spi>
 8008522:	4603      	mov	r3, r0
 8008524:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008526:	7bfb      	ldrb	r3, [r7, #15]
 8008528:	f003 031f 	and.w	r3, r3, #31
 800852c:	2b05      	cmp	r3, #5
 800852e:	d001      	beq.n	8008534 <xmit_datablock+0x5a>
 8008530:	2300      	movs	r3, #0
 8008532:	e000      	b.n	8008536 <xmit_datablock+0x5c>
	}
	return 1;
 8008534:	2301      	movs	r3, #1
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	4603      	mov	r3, r0
 8008546:	6039      	str	r1, [r7, #0]
 8008548:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800854a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800854e:	2b00      	cmp	r3, #0
 8008550:	da0e      	bge.n	8008570 <send_cmd+0x32>
		cmd &= 0x7F;
 8008552:	79fb      	ldrb	r3, [r7, #7]
 8008554:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008558:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800855a:	2100      	movs	r1, #0
 800855c:	2037      	movs	r0, #55	@ 0x37
 800855e:	f7ff ffee 	bl	800853e <send_cmd>
 8008562:	4603      	mov	r3, r0
 8008564:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8008566:	7bbb      	ldrb	r3, [r7, #14]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d901      	bls.n	8008570 <send_cmd+0x32>
 800856c:	7bbb      	ldrb	r3, [r7, #14]
 800856e:	e051      	b.n	8008614 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008570:	79fb      	ldrb	r3, [r7, #7]
 8008572:	2b0c      	cmp	r3, #12
 8008574:	d008      	beq.n	8008588 <send_cmd+0x4a>
		despiselect();
 8008576:	f7ff ff5f 	bl	8008438 <despiselect>
		if (!spiselect()) return 0xFF;
 800857a:	f7ff ff6b 	bl	8008454 <spiselect>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <send_cmd+0x4a>
 8008584:	23ff      	movs	r3, #255	@ 0xff
 8008586:	e045      	b.n	8008614 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8008588:	79fb      	ldrb	r3, [r7, #7]
 800858a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800858e:	b2db      	uxtb	r3, r3
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff fee7 	bl	8008364 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	0e1b      	lsrs	r3, r3, #24
 800859a:	b2db      	uxtb	r3, r3
 800859c:	4618      	mov	r0, r3
 800859e:	f7ff fee1 	bl	8008364 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	0c1b      	lsrs	r3, r3, #16
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7ff fedb 	bl	8008364 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	0a1b      	lsrs	r3, r3, #8
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7ff fed5 	bl	8008364 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	4618      	mov	r0, r3
 80085c0:	f7ff fed0 	bl	8008364 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80085c4:	2301      	movs	r3, #1
 80085c6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80085c8:	79fb      	ldrb	r3, [r7, #7]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <send_cmd+0x94>
 80085ce:	2395      	movs	r3, #149	@ 0x95
 80085d0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	2b08      	cmp	r3, #8
 80085d6:	d101      	bne.n	80085dc <send_cmd+0x9e>
 80085d8:	2387      	movs	r3, #135	@ 0x87
 80085da:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
 80085de:	4618      	mov	r0, r3
 80085e0:	f7ff fec0 	bl	8008364 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80085e4:	79fb      	ldrb	r3, [r7, #7]
 80085e6:	2b0c      	cmp	r3, #12
 80085e8:	d102      	bne.n	80085f0 <send_cmd+0xb2>
 80085ea:	20ff      	movs	r0, #255	@ 0xff
 80085ec:	f7ff feba 	bl	8008364 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80085f0:	230a      	movs	r3, #10
 80085f2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80085f4:	20ff      	movs	r0, #255	@ 0xff
 80085f6:	f7ff feb5 	bl	8008364 <xchg_spi>
 80085fa:	4603      	mov	r3, r0
 80085fc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80085fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008602:	2b00      	cmp	r3, #0
 8008604:	da05      	bge.n	8008612 <send_cmd+0xd4>
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	3b01      	subs	r3, #1
 800860a:	73fb      	strb	r3, [r7, #15]
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1f0      	bne.n	80085f4 <send_cmd+0xb6>

	return res;							/* Return received response */
 8008612:	7bbb      	ldrb	r3, [r7, #14]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800861c:	b590      	push	{r4, r7, lr}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8008626:	79fb      	ldrb	r3, [r7, #7]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d001      	beq.n	8008630 <USER_SPI_initialize+0x14>
 800862c:	2301      	movs	r3, #1
 800862e:	e0d6      	b.n	80087de <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8008630:	4b6d      	ldr	r3, [pc, #436]	@ (80087e8 <USER_SPI_initialize+0x1cc>)
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	b2db      	uxtb	r3, r3
 8008636:	f003 0302 	and.w	r3, r3, #2
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <USER_SPI_initialize+0x2a>
 800863e:	4b6a      	ldr	r3, [pc, #424]	@ (80087e8 <USER_SPI_initialize+0x1cc>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	e0cb      	b.n	80087de <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8008646:	4b69      	ldr	r3, [pc, #420]	@ (80087ec <USER_SPI_initialize+0x1d0>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8008650:	4b66      	ldr	r3, [pc, #408]	@ (80087ec <USER_SPI_initialize+0x1d0>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8008658:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800865a:	230a      	movs	r3, #10
 800865c:	73fb      	strb	r3, [r7, #15]
 800865e:	e005      	b.n	800866c <USER_SPI_initialize+0x50>
 8008660:	20ff      	movs	r0, #255	@ 0xff
 8008662:	f7ff fe7f 	bl	8008364 <xchg_spi>
 8008666:	7bfb      	ldrb	r3, [r7, #15]
 8008668:	3b01      	subs	r3, #1
 800866a:	73fb      	strb	r3, [r7, #15]
 800866c:	7bfb      	ldrb	r3, [r7, #15]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1f6      	bne.n	8008660 <USER_SPI_initialize+0x44>

	ty = 0;
 8008672:	2300      	movs	r3, #0
 8008674:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8008676:	2100      	movs	r1, #0
 8008678:	2000      	movs	r0, #0
 800867a:	f7ff ff60 	bl	800853e <send_cmd>
 800867e:	4603      	mov	r3, r0
 8008680:	2b01      	cmp	r3, #1
 8008682:	f040 808b 	bne.w	800879c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8008686:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800868a:	f7ff fe41 	bl	8008310 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800868e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8008692:	2008      	movs	r0, #8
 8008694:	f7ff ff53 	bl	800853e <send_cmd>
 8008698:	4603      	mov	r3, r0
 800869a:	2b01      	cmp	r3, #1
 800869c:	d151      	bne.n	8008742 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800869e:	2300      	movs	r3, #0
 80086a0:	73fb      	strb	r3, [r7, #15]
 80086a2:	e00d      	b.n	80086c0 <USER_SPI_initialize+0xa4>
 80086a4:	7bfc      	ldrb	r4, [r7, #15]
 80086a6:	20ff      	movs	r0, #255	@ 0xff
 80086a8:	f7ff fe5c 	bl	8008364 <xchg_spi>
 80086ac:	4603      	mov	r3, r0
 80086ae:	461a      	mov	r2, r3
 80086b0:	f104 0310 	add.w	r3, r4, #16
 80086b4:	443b      	add	r3, r7
 80086b6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
 80086bc:	3301      	adds	r3, #1
 80086be:	73fb      	strb	r3, [r7, #15]
 80086c0:	7bfb      	ldrb	r3, [r7, #15]
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d9ee      	bls.n	80086a4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80086c6:	7abb      	ldrb	r3, [r7, #10]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d167      	bne.n	800879c <USER_SPI_initialize+0x180>
 80086cc:	7afb      	ldrb	r3, [r7, #11]
 80086ce:	2baa      	cmp	r3, #170	@ 0xaa
 80086d0:	d164      	bne.n	800879c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80086d2:	bf00      	nop
 80086d4:	f7ff fe30 	bl	8008338 <SPI_Timer_Status>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d007      	beq.n	80086ee <USER_SPI_initialize+0xd2>
 80086de:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80086e2:	20a9      	movs	r0, #169	@ 0xa9
 80086e4:	f7ff ff2b 	bl	800853e <send_cmd>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1f2      	bne.n	80086d4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80086ee:	f7ff fe23 	bl	8008338 <SPI_Timer_Status>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d051      	beq.n	800879c <USER_SPI_initialize+0x180>
 80086f8:	2100      	movs	r1, #0
 80086fa:	203a      	movs	r0, #58	@ 0x3a
 80086fc:	f7ff ff1f 	bl	800853e <send_cmd>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d14a      	bne.n	800879c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]
 800870a:	e00d      	b.n	8008728 <USER_SPI_initialize+0x10c>
 800870c:	7bfc      	ldrb	r4, [r7, #15]
 800870e:	20ff      	movs	r0, #255	@ 0xff
 8008710:	f7ff fe28 	bl	8008364 <xchg_spi>
 8008714:	4603      	mov	r3, r0
 8008716:	461a      	mov	r2, r3
 8008718:	f104 0310 	add.w	r3, r4, #16
 800871c:	443b      	add	r3, r7
 800871e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008722:	7bfb      	ldrb	r3, [r7, #15]
 8008724:	3301      	adds	r3, #1
 8008726:	73fb      	strb	r3, [r7, #15]
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	2b03      	cmp	r3, #3
 800872c:	d9ee      	bls.n	800870c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800872e:	7a3b      	ldrb	r3, [r7, #8]
 8008730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008734:	2b00      	cmp	r3, #0
 8008736:	d001      	beq.n	800873c <USER_SPI_initialize+0x120>
 8008738:	230c      	movs	r3, #12
 800873a:	e000      	b.n	800873e <USER_SPI_initialize+0x122>
 800873c:	2304      	movs	r3, #4
 800873e:	737b      	strb	r3, [r7, #13]
 8008740:	e02c      	b.n	800879c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8008742:	2100      	movs	r1, #0
 8008744:	20a9      	movs	r0, #169	@ 0xa9
 8008746:	f7ff fefa 	bl	800853e <send_cmd>
 800874a:	4603      	mov	r3, r0
 800874c:	2b01      	cmp	r3, #1
 800874e:	d804      	bhi.n	800875a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8008750:	2302      	movs	r3, #2
 8008752:	737b      	strb	r3, [r7, #13]
 8008754:	23a9      	movs	r3, #169	@ 0xa9
 8008756:	73bb      	strb	r3, [r7, #14]
 8008758:	e003      	b.n	8008762 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800875a:	2301      	movs	r3, #1
 800875c:	737b      	strb	r3, [r7, #13]
 800875e:	2301      	movs	r3, #1
 8008760:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8008762:	bf00      	nop
 8008764:	f7ff fde8 	bl	8008338 <SPI_Timer_Status>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d007      	beq.n	800877e <USER_SPI_initialize+0x162>
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	2100      	movs	r1, #0
 8008772:	4618      	mov	r0, r3
 8008774:	f7ff fee3 	bl	800853e <send_cmd>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1f2      	bne.n	8008764 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800877e:	f7ff fddb 	bl	8008338 <SPI_Timer_Status>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d007      	beq.n	8008798 <USER_SPI_initialize+0x17c>
 8008788:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800878c:	2010      	movs	r0, #16
 800878e:	f7ff fed6 	bl	800853e <send_cmd>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <USER_SPI_initialize+0x180>
				ty = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800879c:	4a14      	ldr	r2, [pc, #80]	@ (80087f0 <USER_SPI_initialize+0x1d4>)
 800879e:	7b7b      	ldrb	r3, [r7, #13]
 80087a0:	7013      	strb	r3, [r2, #0]
	despiselect();
 80087a2:	f7ff fe49 	bl	8008438 <despiselect>

	if (ty) {			/* OK */
 80087a6:	7b7b      	ldrb	r3, [r7, #13]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d012      	beq.n	80087d2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80087ac:	4b0f      	ldr	r3, [pc, #60]	@ (80087ec <USER_SPI_initialize+0x1d0>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80087b6:	4b0d      	ldr	r3, [pc, #52]	@ (80087ec <USER_SPI_initialize+0x1d0>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f042 0210 	orr.w	r2, r2, #16
 80087be:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80087c0:	4b09      	ldr	r3, [pc, #36]	@ (80087e8 <USER_SPI_initialize+0x1cc>)
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	f023 0301 	bic.w	r3, r3, #1
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	4b06      	ldr	r3, [pc, #24]	@ (80087e8 <USER_SPI_initialize+0x1cc>)
 80087ce:	701a      	strb	r2, [r3, #0]
 80087d0:	e002      	b.n	80087d8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80087d2:	4b05      	ldr	r3, [pc, #20]	@ (80087e8 <USER_SPI_initialize+0x1cc>)
 80087d4:	2201      	movs	r2, #1
 80087d6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80087d8:	4b03      	ldr	r3, [pc, #12]	@ (80087e8 <USER_SPI_initialize+0x1cc>)
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	b2db      	uxtb	r3, r3
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd90      	pop	{r4, r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20000020 	.word	0x20000020
 80087ec:	20000278 	.word	0x20000278
 80087f0:	2000085d 	.word	0x2000085d

080087f4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80087fe:	79fb      	ldrb	r3, [r7, #7]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <USER_SPI_status+0x14>
 8008804:	2301      	movs	r3, #1
 8008806:	e002      	b.n	800880e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8008808:	4b04      	ldr	r3, [pc, #16]	@ (800881c <USER_SPI_status+0x28>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	b2db      	uxtb	r3, r3
}
 800880e:	4618      	mov	r0, r3
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	20000020 	.word	0x20000020

08008820 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	60b9      	str	r1, [r7, #8]
 8008828:	607a      	str	r2, [r7, #4]
 800882a:	603b      	str	r3, [r7, #0]
 800882c:	4603      	mov	r3, r0
 800882e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d102      	bne.n	800883c <USER_SPI_read+0x1c>
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d101      	bne.n	8008840 <USER_SPI_read+0x20>
 800883c:	2304      	movs	r3, #4
 800883e:	e04d      	b.n	80088dc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008840:	4b28      	ldr	r3, [pc, #160]	@ (80088e4 <USER_SPI_read+0xc4>)
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	b2db      	uxtb	r3, r3
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <USER_SPI_read+0x32>
 800884e:	2303      	movs	r3, #3
 8008850:	e044      	b.n	80088dc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8008852:	4b25      	ldr	r3, [pc, #148]	@ (80088e8 <USER_SPI_read+0xc8>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	f003 0308 	and.w	r3, r3, #8
 800885a:	2b00      	cmp	r3, #0
 800885c:	d102      	bne.n	8008864 <USER_SPI_read+0x44>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	025b      	lsls	r3, r3, #9
 8008862:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d111      	bne.n	800888e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800886a:	6879      	ldr	r1, [r7, #4]
 800886c:	2011      	movs	r0, #17
 800886e:	f7ff fe66 	bl	800853e <send_cmd>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d129      	bne.n	80088cc <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8008878:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800887c:	68b8      	ldr	r0, [r7, #8]
 800887e:	f7ff fe03 	bl	8008488 <rcvr_datablock>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d021      	beq.n	80088cc <USER_SPI_read+0xac>
			count = 0;
 8008888:	2300      	movs	r3, #0
 800888a:	603b      	str	r3, [r7, #0]
 800888c:	e01e      	b.n	80088cc <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800888e:	6879      	ldr	r1, [r7, #4]
 8008890:	2012      	movs	r0, #18
 8008892:	f7ff fe54 	bl	800853e <send_cmd>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d117      	bne.n	80088cc <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800889c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80088a0:	68b8      	ldr	r0, [r7, #8]
 80088a2:	f7ff fdf1 	bl	8008488 <rcvr_datablock>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00a      	beq.n	80088c2 <USER_SPI_read+0xa2>
				buff += 512;
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80088b2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	603b      	str	r3, [r7, #0]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1ed      	bne.n	800889c <USER_SPI_read+0x7c>
 80088c0:	e000      	b.n	80088c4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80088c2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80088c4:	2100      	movs	r1, #0
 80088c6:	200c      	movs	r0, #12
 80088c8:	f7ff fe39 	bl	800853e <send_cmd>
		}
	}
	despiselect();
 80088cc:	f7ff fdb4 	bl	8008438 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	bf14      	ite	ne
 80088d6:	2301      	movne	r3, #1
 80088d8:	2300      	moveq	r3, #0
 80088da:	b2db      	uxtb	r3, r3
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	20000020 	.word	0x20000020
 80088e8:	2000085d 	.word	0x2000085d

080088ec <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60b9      	str	r1, [r7, #8]
 80088f4:	607a      	str	r2, [r7, #4]
 80088f6:	603b      	str	r3, [r7, #0]
 80088f8:	4603      	mov	r3, r0
 80088fa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d102      	bne.n	8008908 <USER_SPI_write+0x1c>
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d101      	bne.n	800890c <USER_SPI_write+0x20>
 8008908:	2304      	movs	r3, #4
 800890a:	e063      	b.n	80089d4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800890c:	4b33      	ldr	r3, [pc, #204]	@ (80089dc <USER_SPI_write+0xf0>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	b2db      	uxtb	r3, r3
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <USER_SPI_write+0x32>
 800891a:	2303      	movs	r3, #3
 800891c:	e05a      	b.n	80089d4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800891e:	4b2f      	ldr	r3, [pc, #188]	@ (80089dc <USER_SPI_write+0xf0>)
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <USER_SPI_write+0x44>
 800892c:	2302      	movs	r3, #2
 800892e:	e051      	b.n	80089d4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8008930:	4b2b      	ldr	r3, [pc, #172]	@ (80089e0 <USER_SPI_write+0xf4>)
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	f003 0308 	and.w	r3, r3, #8
 8008938:	2b00      	cmp	r3, #0
 800893a:	d102      	bne.n	8008942 <USER_SPI_write+0x56>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	025b      	lsls	r3, r3, #9
 8008940:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d110      	bne.n	800896a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8008948:	6879      	ldr	r1, [r7, #4]
 800894a:	2018      	movs	r0, #24
 800894c:	f7ff fdf7 	bl	800853e <send_cmd>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d136      	bne.n	80089c4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8008956:	21fe      	movs	r1, #254	@ 0xfe
 8008958:	68b8      	ldr	r0, [r7, #8]
 800895a:	f7ff fdbe 	bl	80084da <xmit_datablock>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d02f      	beq.n	80089c4 <USER_SPI_write+0xd8>
			count = 0;
 8008964:	2300      	movs	r3, #0
 8008966:	603b      	str	r3, [r7, #0]
 8008968:	e02c      	b.n	80089c4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800896a:	4b1d      	ldr	r3, [pc, #116]	@ (80089e0 <USER_SPI_write+0xf4>)
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	f003 0306 	and.w	r3, r3, #6
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <USER_SPI_write+0x92>
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	2097      	movs	r0, #151	@ 0x97
 800897a:	f7ff fde0 	bl	800853e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	2019      	movs	r0, #25
 8008982:	f7ff fddc 	bl	800853e <send_cmd>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d11b      	bne.n	80089c4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800898c:	21fc      	movs	r1, #252	@ 0xfc
 800898e:	68b8      	ldr	r0, [r7, #8]
 8008990:	f7ff fda3 	bl	80084da <xmit_datablock>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00a      	beq.n	80089b0 <USER_SPI_write+0xc4>
				buff += 512;
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80089a0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	3b01      	subs	r3, #1
 80089a6:	603b      	str	r3, [r7, #0]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1ee      	bne.n	800898c <USER_SPI_write+0xa0>
 80089ae:	e000      	b.n	80089b2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80089b0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80089b2:	21fd      	movs	r1, #253	@ 0xfd
 80089b4:	2000      	movs	r0, #0
 80089b6:	f7ff fd90 	bl	80084da <xmit_datablock>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <USER_SPI_write+0xd8>
 80089c0:	2301      	movs	r3, #1
 80089c2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80089c4:	f7ff fd38 	bl	8008438 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	bf14      	ite	ne
 80089ce:	2301      	movne	r3, #1
 80089d0:	2300      	moveq	r3, #0
 80089d2:	b2db      	uxtb	r3, r3
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	20000020 	.word	0x20000020
 80089e0:	2000085d 	.word	0x2000085d

080089e4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08c      	sub	sp, #48	@ 0x30
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	4603      	mov	r3, r0
 80089ec:	603a      	str	r2, [r7, #0]
 80089ee:	71fb      	strb	r3, [r7, #7]
 80089f0:	460b      	mov	r3, r1
 80089f2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80089f4:	79fb      	ldrb	r3, [r7, #7]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <USER_SPI_ioctl+0x1a>
 80089fa:	2304      	movs	r3, #4
 80089fc:	e15a      	b.n	8008cb4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80089fe:	4baf      	ldr	r3, [pc, #700]	@ (8008cbc <USER_SPI_ioctl+0x2d8>)
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d001      	beq.n	8008a10 <USER_SPI_ioctl+0x2c>
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e151      	b.n	8008cb4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8008a16:	79bb      	ldrb	r3, [r7, #6]
 8008a18:	2b04      	cmp	r3, #4
 8008a1a:	f200 8136 	bhi.w	8008c8a <USER_SPI_ioctl+0x2a6>
 8008a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a24 <USER_SPI_ioctl+0x40>)
 8008a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a24:	08008a39 	.word	0x08008a39
 8008a28:	08008a4d 	.word	0x08008a4d
 8008a2c:	08008c8b 	.word	0x08008c8b
 8008a30:	08008af9 	.word	0x08008af9
 8008a34:	08008bef 	.word	0x08008bef
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8008a38:	f7ff fd0c 	bl	8008454 <spiselect>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f000 8127 	beq.w	8008c92 <USER_SPI_ioctl+0x2ae>
 8008a44:	2300      	movs	r3, #0
 8008a46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8008a4a:	e122      	b.n	8008c92 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	2009      	movs	r0, #9
 8008a50:	f7ff fd75 	bl	800853e <send_cmd>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f040 811d 	bne.w	8008c96 <USER_SPI_ioctl+0x2b2>
 8008a5c:	f107 030c 	add.w	r3, r7, #12
 8008a60:	2110      	movs	r1, #16
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7ff fd10 	bl	8008488 <rcvr_datablock>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f000 8113 	beq.w	8008c96 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8008a70:	7b3b      	ldrb	r3, [r7, #12]
 8008a72:	099b      	lsrs	r3, r3, #6
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d111      	bne.n	8008a9e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8008a7a:	7d7b      	ldrb	r3, [r7, #21]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	7d3b      	ldrb	r3, [r7, #20]
 8008a80:	021b      	lsls	r3, r3, #8
 8008a82:	4413      	add	r3, r2
 8008a84:	461a      	mov	r2, r3
 8008a86:	7cfb      	ldrb	r3, [r7, #19]
 8008a88:	041b      	lsls	r3, r3, #16
 8008a8a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8008a8e:	4413      	add	r3, r2
 8008a90:	3301      	adds	r3, #1
 8008a92:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	029a      	lsls	r2, r3, #10
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	601a      	str	r2, [r3, #0]
 8008a9c:	e028      	b.n	8008af0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8008a9e:	7c7b      	ldrb	r3, [r7, #17]
 8008aa0:	f003 030f 	and.w	r3, r3, #15
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	7dbb      	ldrb	r3, [r7, #22]
 8008aa8:	09db      	lsrs	r3, r3, #7
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	4413      	add	r3, r2
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	7d7b      	ldrb	r3, [r7, #21]
 8008ab2:	005b      	lsls	r3, r3, #1
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	f003 0306 	and.w	r3, r3, #6
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	4413      	add	r3, r2
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	3302      	adds	r3, #2
 8008ac2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8008ac6:	7d3b      	ldrb	r3, [r7, #20]
 8008ac8:	099b      	lsrs	r3, r3, #6
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	461a      	mov	r2, r3
 8008ace:	7cfb      	ldrb	r3, [r7, #19]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	441a      	add	r2, r3
 8008ad4:	7cbb      	ldrb	r3, [r7, #18]
 8008ad6:	029b      	lsls	r3, r3, #10
 8008ad8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008adc:	4413      	add	r3, r2
 8008ade:	3301      	adds	r3, #1
 8008ae0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8008ae2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008ae6:	3b09      	subs	r3, #9
 8008ae8:	69fa      	ldr	r2, [r7, #28]
 8008aea:	409a      	lsls	r2, r3
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8008af6:	e0ce      	b.n	8008c96 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8008af8:	4b71      	ldr	r3, [pc, #452]	@ (8008cc0 <USER_SPI_ioctl+0x2dc>)
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	f003 0304 	and.w	r3, r3, #4
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d031      	beq.n	8008b68 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8008b04:	2100      	movs	r1, #0
 8008b06:	208d      	movs	r0, #141	@ 0x8d
 8008b08:	f7ff fd19 	bl	800853e <send_cmd>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f040 80c3 	bne.w	8008c9a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8008b14:	20ff      	movs	r0, #255	@ 0xff
 8008b16:	f7ff fc25 	bl	8008364 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8008b1a:	f107 030c 	add.w	r3, r7, #12
 8008b1e:	2110      	movs	r1, #16
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7ff fcb1 	bl	8008488 <rcvr_datablock>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 80b6 	beq.w	8008c9a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8008b2e:	2330      	movs	r3, #48	@ 0x30
 8008b30:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8008b34:	e007      	b.n	8008b46 <USER_SPI_ioctl+0x162>
 8008b36:	20ff      	movs	r0, #255	@ 0xff
 8008b38:	f7ff fc14 	bl	8008364 <xchg_spi>
 8008b3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008b40:	3b01      	subs	r3, #1
 8008b42:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8008b46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1f3      	bne.n	8008b36 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8008b4e:	7dbb      	ldrb	r3, [r7, #22]
 8008b50:	091b      	lsrs	r3, r3, #4
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	461a      	mov	r2, r3
 8008b56:	2310      	movs	r3, #16
 8008b58:	fa03 f202 	lsl.w	r2, r3, r2
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8008b66:	e098      	b.n	8008c9a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8008b68:	2100      	movs	r1, #0
 8008b6a:	2009      	movs	r0, #9
 8008b6c:	f7ff fce7 	bl	800853e <send_cmd>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f040 8091 	bne.w	8008c9a <USER_SPI_ioctl+0x2b6>
 8008b78:	f107 030c 	add.w	r3, r7, #12
 8008b7c:	2110      	movs	r1, #16
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7ff fc82 	bl	8008488 <rcvr_datablock>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 8087 	beq.w	8008c9a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8008b8c:	4b4c      	ldr	r3, [pc, #304]	@ (8008cc0 <USER_SPI_ioctl+0x2dc>)
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	f003 0302 	and.w	r3, r3, #2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d012      	beq.n	8008bbe <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8008b98:	7dbb      	ldrb	r3, [r7, #22]
 8008b9a:	005b      	lsls	r3, r3, #1
 8008b9c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8008ba0:	7dfa      	ldrb	r2, [r7, #23]
 8008ba2:	09d2      	lsrs	r2, r2, #7
 8008ba4:	b2d2      	uxtb	r2, r2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	7e7b      	ldrb	r3, [r7, #25]
 8008bac:	099b      	lsrs	r3, r3, #6
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	e013      	b.n	8008be6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8008bbe:	7dbb      	ldrb	r3, [r7, #22]
 8008bc0:	109b      	asrs	r3, r3, #2
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	f003 031f 	and.w	r3, r3, #31
 8008bc8:	3301      	adds	r3, #1
 8008bca:	7dfa      	ldrb	r2, [r7, #23]
 8008bcc:	00d2      	lsls	r2, r2, #3
 8008bce:	f002 0218 	and.w	r2, r2, #24
 8008bd2:	7df9      	ldrb	r1, [r7, #23]
 8008bd4:	0949      	lsrs	r1, r1, #5
 8008bd6:	b2c9      	uxtb	r1, r1
 8008bd8:	440a      	add	r2, r1
 8008bda:	3201      	adds	r2, #1
 8008bdc:	fb02 f303 	mul.w	r3, r2, r3
 8008be0:	461a      	mov	r2, r3
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8008bec:	e055      	b.n	8008c9a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008bee:	4b34      	ldr	r3, [pc, #208]	@ (8008cc0 <USER_SPI_ioctl+0x2dc>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	f003 0306 	and.w	r3, r3, #6
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d051      	beq.n	8008c9e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008bfa:	f107 020c 	add.w	r2, r7, #12
 8008bfe:	79fb      	ldrb	r3, [r7, #7]
 8008c00:	210b      	movs	r1, #11
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7ff feee 	bl	80089e4 <USER_SPI_ioctl>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d149      	bne.n	8008ca2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008c0e:	7b3b      	ldrb	r3, [r7, #12]
 8008c10:	099b      	lsrs	r3, r3, #6
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d104      	bne.n	8008c22 <USER_SPI_ioctl+0x23e>
 8008c18:	7dbb      	ldrb	r3, [r7, #22]
 8008c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d041      	beq.n	8008ca6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	623b      	str	r3, [r7, #32]
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8008c32:	4b23      	ldr	r3, [pc, #140]	@ (8008cc0 <USER_SPI_ioctl+0x2dc>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	f003 0308 	and.w	r3, r3, #8
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d105      	bne.n	8008c4a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8008c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c40:	025b      	lsls	r3, r3, #9
 8008c42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c46:	025b      	lsls	r3, r3, #9
 8008c48:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8008c4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c4c:	2020      	movs	r0, #32
 8008c4e:	f7ff fc76 	bl	800853e <send_cmd>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d128      	bne.n	8008caa <USER_SPI_ioctl+0x2c6>
 8008c58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008c5a:	2021      	movs	r0, #33	@ 0x21
 8008c5c:	f7ff fc6f 	bl	800853e <send_cmd>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d121      	bne.n	8008caa <USER_SPI_ioctl+0x2c6>
 8008c66:	2100      	movs	r1, #0
 8008c68:	2026      	movs	r0, #38	@ 0x26
 8008c6a:	f7ff fc68 	bl	800853e <send_cmd>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d11a      	bne.n	8008caa <USER_SPI_ioctl+0x2c6>
 8008c74:	f247 5030 	movw	r0, #30000	@ 0x7530
 8008c78:	f7ff fbba 	bl	80083f0 <wait_ready>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d013      	beq.n	8008caa <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8008c82:	2300      	movs	r3, #0
 8008c84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8008c88:	e00f      	b.n	8008caa <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8008c8a:	2304      	movs	r3, #4
 8008c8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008c90:	e00c      	b.n	8008cac <USER_SPI_ioctl+0x2c8>
		break;
 8008c92:	bf00      	nop
 8008c94:	e00a      	b.n	8008cac <USER_SPI_ioctl+0x2c8>
		break;
 8008c96:	bf00      	nop
 8008c98:	e008      	b.n	8008cac <USER_SPI_ioctl+0x2c8>
		break;
 8008c9a:	bf00      	nop
 8008c9c:	e006      	b.n	8008cac <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008c9e:	bf00      	nop
 8008ca0:	e004      	b.n	8008cac <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008ca2:	bf00      	nop
 8008ca4:	e002      	b.n	8008cac <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008ca6:	bf00      	nop
 8008ca8:	e000      	b.n	8008cac <USER_SPI_ioctl+0x2c8>
		break;
 8008caa:	bf00      	nop
	}

	despiselect();
 8008cac:	f7ff fbc4 	bl	8008438 <despiselect>

	return res;
 8008cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3730      	adds	r7, #48	@ 0x30
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	20000020 	.word	0x20000020
 8008cc0:	2000085d 	.word	0x2000085d

08008cc4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	4603      	mov	r3, r0
 8008ccc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008cce:	79fb      	ldrb	r3, [r7, #7]
 8008cd0:	4a08      	ldr	r2, [pc, #32]	@ (8008cf4 <disk_status+0x30>)
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	79fa      	ldrb	r2, [r7, #7]
 8008cdc:	4905      	ldr	r1, [pc, #20]	@ (8008cf4 <disk_status+0x30>)
 8008cde:	440a      	add	r2, r1
 8008ce0:	7a12      	ldrb	r2, [r2, #8]
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	4798      	blx	r3
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	20000890 	.word	0x20000890

08008cf8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	4603      	mov	r3, r0
 8008d00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	4a0d      	ldr	r2, [pc, #52]	@ (8008d40 <disk_initialize+0x48>)
 8008d0a:	5cd3      	ldrb	r3, [r2, r3]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d111      	bne.n	8008d34 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008d10:	79fb      	ldrb	r3, [r7, #7]
 8008d12:	4a0b      	ldr	r2, [pc, #44]	@ (8008d40 <disk_initialize+0x48>)
 8008d14:	2101      	movs	r1, #1
 8008d16:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008d18:	79fb      	ldrb	r3, [r7, #7]
 8008d1a:	4a09      	ldr	r2, [pc, #36]	@ (8008d40 <disk_initialize+0x48>)
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	79fa      	ldrb	r2, [r7, #7]
 8008d26:	4906      	ldr	r1, [pc, #24]	@ (8008d40 <disk_initialize+0x48>)
 8008d28:	440a      	add	r2, r1
 8008d2a:	7a12      	ldrb	r2, [r2, #8]
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	4798      	blx	r3
 8008d30:	4603      	mov	r3, r0
 8008d32:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	20000890 	.word	0x20000890

08008d44 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008d44:	b590      	push	{r4, r7, lr}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60b9      	str	r1, [r7, #8]
 8008d4c:	607a      	str	r2, [r7, #4]
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	4603      	mov	r3, r0
 8008d52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
 8008d56:	4a0a      	ldr	r2, [pc, #40]	@ (8008d80 <disk_read+0x3c>)
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	4413      	add	r3, r2
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	689c      	ldr	r4, [r3, #8]
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
 8008d62:	4a07      	ldr	r2, [pc, #28]	@ (8008d80 <disk_read+0x3c>)
 8008d64:	4413      	add	r3, r2
 8008d66:	7a18      	ldrb	r0, [r3, #8]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	68b9      	ldr	r1, [r7, #8]
 8008d6e:	47a0      	blx	r4
 8008d70:	4603      	mov	r3, r0
 8008d72:	75fb      	strb	r3, [r7, #23]
  return res;
 8008d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	371c      	adds	r7, #28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd90      	pop	{r4, r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	20000890 	.word	0x20000890

08008d84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008d84:	b590      	push	{r4, r7, lr}
 8008d86:	b087      	sub	sp, #28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60b9      	str	r1, [r7, #8]
 8008d8c:	607a      	str	r2, [r7, #4]
 8008d8e:	603b      	str	r3, [r7, #0]
 8008d90:	4603      	mov	r3, r0
 8008d92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008d94:	7bfb      	ldrb	r3, [r7, #15]
 8008d96:	4a0a      	ldr	r2, [pc, #40]	@ (8008dc0 <disk_write+0x3c>)
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	68dc      	ldr	r4, [r3, #12]
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
 8008da2:	4a07      	ldr	r2, [pc, #28]	@ (8008dc0 <disk_write+0x3c>)
 8008da4:	4413      	add	r3, r2
 8008da6:	7a18      	ldrb	r0, [r3, #8]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	68b9      	ldr	r1, [r7, #8]
 8008dae:	47a0      	blx	r4
 8008db0:	4603      	mov	r3, r0
 8008db2:	75fb      	strb	r3, [r7, #23]
  return res;
 8008db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	371c      	adds	r7, #28
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd90      	pop	{r4, r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	20000890 	.word	0x20000890

08008dc4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	4603      	mov	r3, r0
 8008dcc:	603a      	str	r2, [r7, #0]
 8008dce:	71fb      	strb	r3, [r7, #7]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008dd4:	79fb      	ldrb	r3, [r7, #7]
 8008dd6:	4a09      	ldr	r2, [pc, #36]	@ (8008dfc <disk_ioctl+0x38>)
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	79fa      	ldrb	r2, [r7, #7]
 8008de2:	4906      	ldr	r1, [pc, #24]	@ (8008dfc <disk_ioctl+0x38>)
 8008de4:	440a      	add	r2, r1
 8008de6:	7a10      	ldrb	r0, [r2, #8]
 8008de8:	79b9      	ldrb	r1, [r7, #6]
 8008dea:	683a      	ldr	r2, [r7, #0]
 8008dec:	4798      	blx	r3
 8008dee:	4603      	mov	r3, r0
 8008df0:	73fb      	strb	r3, [r7, #15]
  return res;
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	20000890 	.word	0x20000890

08008e00 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008e10:	89fb      	ldrh	r3, [r7, #14]
 8008e12:	021b      	lsls	r3, r3, #8
 8008e14:	b21a      	sxth	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	b21b      	sxth	r3, r3
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	b21b      	sxth	r3, r3
 8008e20:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008e22:	89fb      	ldrh	r3, [r7, #14]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	3303      	adds	r3, #3
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	021b      	lsls	r3, r3, #8
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	3202      	adds	r2, #2
 8008e48:	7812      	ldrb	r2, [r2, #0]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	021b      	lsls	r3, r3, #8
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	3201      	adds	r2, #1
 8008e56:	7812      	ldrb	r2, [r2, #0]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	021b      	lsls	r3, r3, #8
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	7812      	ldrb	r2, [r2, #0]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]
	return rv;
 8008e68:	68fb      	ldr	r3, [r7, #12]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008e76:	b480      	push	{r7}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	460b      	mov	r3, r1
 8008e80:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	1c5a      	adds	r2, r3, #1
 8008e86:	607a      	str	r2, [r7, #4]
 8008e88:	887a      	ldrh	r2, [r7, #2]
 8008e8a:	b2d2      	uxtb	r2, r2
 8008e8c:	701a      	strb	r2, [r3, #0]
 8008e8e:	887b      	ldrh	r3, [r7, #2]
 8008e90:	0a1b      	lsrs	r3, r3, #8
 8008e92:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	607a      	str	r2, [r7, #4]
 8008e9a:	887a      	ldrh	r2, [r7, #2]
 8008e9c:	b2d2      	uxtb	r2, r2
 8008e9e:	701a      	strb	r2, [r3, #0]
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	1c5a      	adds	r2, r3, #1
 8008eba:	607a      	str	r2, [r7, #4]
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	b2d2      	uxtb	r2, r2
 8008ec0:	701a      	strb	r2, [r3, #0]
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	0a1b      	lsrs	r3, r3, #8
 8008ec6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	607a      	str	r2, [r7, #4]
 8008ece:	683a      	ldr	r2, [r7, #0]
 8008ed0:	b2d2      	uxtb	r2, r2
 8008ed2:	701a      	strb	r2, [r3, #0]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	0a1b      	lsrs	r3, r3, #8
 8008ed8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	1c5a      	adds	r2, r3, #1
 8008ede:	607a      	str	r2, [r7, #4]
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	b2d2      	uxtb	r2, r2
 8008ee4:	701a      	strb	r2, [r3, #0]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	0a1b      	lsrs	r3, r3, #8
 8008eea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	1c5a      	adds	r2, r3, #1
 8008ef0:	607a      	str	r2, [r7, #4]
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	b2d2      	uxtb	r2, r2
 8008ef6:	701a      	strb	r2, [r3, #0]
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00d      	beq.n	8008f3a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	1c53      	adds	r3, r2, #1
 8008f22:	613b      	str	r3, [r7, #16]
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	1c59      	adds	r1, r3, #1
 8008f28:	6179      	str	r1, [r7, #20]
 8008f2a:	7812      	ldrb	r2, [r2, #0]
 8008f2c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	607b      	str	r3, [r7, #4]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1f1      	bne.n	8008f1e <mem_cpy+0x1a>
	}
}
 8008f3a:	bf00      	nop
 8008f3c:	371c      	adds	r7, #28
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008f46:	b480      	push	{r7}
 8008f48:	b087      	sub	sp, #28
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	60f8      	str	r0, [r7, #12]
 8008f4e:	60b9      	str	r1, [r7, #8]
 8008f50:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	1c5a      	adds	r2, r3, #1
 8008f5a:	617a      	str	r2, [r7, #20]
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	3b01      	subs	r3, #1
 8008f66:	607b      	str	r3, [r7, #4]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1f3      	bne.n	8008f56 <mem_set+0x10>
}
 8008f6e:	bf00      	nop
 8008f70:	bf00      	nop
 8008f72:	371c      	adds	r7, #28
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008f7c:	b480      	push	{r7}
 8008f7e:	b089      	sub	sp, #36	@ 0x24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	61fb      	str	r3, [r7, #28]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008f90:	2300      	movs	r3, #0
 8008f92:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	61fa      	str	r2, [r7, #28]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	1c5a      	adds	r2, r3, #1
 8008fa2:	61ba      	str	r2, [r7, #24]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	1acb      	subs	r3, r1, r3
 8008fa8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	3b01      	subs	r3, #1
 8008fae:	607b      	str	r3, [r7, #4]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d002      	beq.n	8008fbc <mem_cmp+0x40>
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d0eb      	beq.n	8008f94 <mem_cmp+0x18>

	return r;
 8008fbc:	697b      	ldr	r3, [r7, #20]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3724      	adds	r7, #36	@ 0x24
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008fca:	b480      	push	{r7}
 8008fcc:	b083      	sub	sp, #12
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008fd4:	e002      	b.n	8008fdc <chk_chr+0x12>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	607b      	str	r3, [r7, #4]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d005      	beq.n	8008ff0 <chk_chr+0x26>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d1f2      	bne.n	8008fd6 <chk_chr+0xc>
	return *str;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800900a:	2300      	movs	r3, #0
 800900c:	60bb      	str	r3, [r7, #8]
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	60fb      	str	r3, [r7, #12]
 8009012:	e029      	b.n	8009068 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009014:	4a27      	ldr	r2, [pc, #156]	@ (80090b4 <chk_lock+0xb4>)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	011b      	lsls	r3, r3, #4
 800901a:	4413      	add	r3, r2
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d01d      	beq.n	800905e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009022:	4a24      	ldr	r2, [pc, #144]	@ (80090b4 <chk_lock+0xb4>)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	011b      	lsls	r3, r3, #4
 8009028:	4413      	add	r3, r2
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	429a      	cmp	r2, r3
 8009032:	d116      	bne.n	8009062 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009034:	4a1f      	ldr	r2, [pc, #124]	@ (80090b4 <chk_lock+0xb4>)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	011b      	lsls	r3, r3, #4
 800903a:	4413      	add	r3, r2
 800903c:	3304      	adds	r3, #4
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009044:	429a      	cmp	r2, r3
 8009046:	d10c      	bne.n	8009062 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009048:	4a1a      	ldr	r2, [pc, #104]	@ (80090b4 <chk_lock+0xb4>)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	011b      	lsls	r3, r3, #4
 800904e:	4413      	add	r3, r2
 8009050:	3308      	adds	r3, #8
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009058:	429a      	cmp	r2, r3
 800905a:	d102      	bne.n	8009062 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800905c:	e007      	b.n	800906e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800905e:	2301      	movs	r3, #1
 8009060:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	3301      	adds	r3, #1
 8009066:	60fb      	str	r3, [r7, #12]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d9d2      	bls.n	8009014 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2b02      	cmp	r3, #2
 8009072:	d109      	bne.n	8009088 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d102      	bne.n	8009080 <chk_lock+0x80>
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	2b02      	cmp	r3, #2
 800907e:	d101      	bne.n	8009084 <chk_lock+0x84>
 8009080:	2300      	movs	r3, #0
 8009082:	e010      	b.n	80090a6 <chk_lock+0xa6>
 8009084:	2312      	movs	r3, #18
 8009086:	e00e      	b.n	80090a6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d108      	bne.n	80090a0 <chk_lock+0xa0>
 800908e:	4a09      	ldr	r2, [pc, #36]	@ (80090b4 <chk_lock+0xb4>)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	011b      	lsls	r3, r3, #4
 8009094:	4413      	add	r3, r2
 8009096:	330c      	adds	r3, #12
 8009098:	881b      	ldrh	r3, [r3, #0]
 800909a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800909e:	d101      	bne.n	80090a4 <chk_lock+0xa4>
 80090a0:	2310      	movs	r3, #16
 80090a2:	e000      	b.n	80090a6 <chk_lock+0xa6>
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3714      	adds	r7, #20
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	20000870 	.word	0x20000870

080090b8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80090be:	2300      	movs	r3, #0
 80090c0:	607b      	str	r3, [r7, #4]
 80090c2:	e002      	b.n	80090ca <enq_lock+0x12>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	3301      	adds	r3, #1
 80090c8:	607b      	str	r3, [r7, #4]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d806      	bhi.n	80090de <enq_lock+0x26>
 80090d0:	4a09      	ldr	r2, [pc, #36]	@ (80090f8 <enq_lock+0x40>)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	011b      	lsls	r3, r3, #4
 80090d6:	4413      	add	r3, r2
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1f2      	bne.n	80090c4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	bf14      	ite	ne
 80090e4:	2301      	movne	r3, #1
 80090e6:	2300      	moveq	r3, #0
 80090e8:	b2db      	uxtb	r3, r3
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	20000870 	.word	0x20000870

080090fc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009106:	2300      	movs	r3, #0
 8009108:	60fb      	str	r3, [r7, #12]
 800910a:	e01f      	b.n	800914c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800910c:	4a41      	ldr	r2, [pc, #260]	@ (8009214 <inc_lock+0x118>)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	4413      	add	r3, r2
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	429a      	cmp	r2, r3
 800911c:	d113      	bne.n	8009146 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800911e:	4a3d      	ldr	r2, [pc, #244]	@ (8009214 <inc_lock+0x118>)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	011b      	lsls	r3, r3, #4
 8009124:	4413      	add	r3, r2
 8009126:	3304      	adds	r3, #4
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800912e:	429a      	cmp	r2, r3
 8009130:	d109      	bne.n	8009146 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009132:	4a38      	ldr	r2, [pc, #224]	@ (8009214 <inc_lock+0x118>)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	011b      	lsls	r3, r3, #4
 8009138:	4413      	add	r3, r2
 800913a:	3308      	adds	r3, #8
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009142:	429a      	cmp	r2, r3
 8009144:	d006      	beq.n	8009154 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	3301      	adds	r3, #1
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d9dc      	bls.n	800910c <inc_lock+0x10>
 8009152:	e000      	b.n	8009156 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009154:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2b02      	cmp	r3, #2
 800915a:	d132      	bne.n	80091c2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800915c:	2300      	movs	r3, #0
 800915e:	60fb      	str	r3, [r7, #12]
 8009160:	e002      	b.n	8009168 <inc_lock+0x6c>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3301      	adds	r3, #1
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d806      	bhi.n	800917c <inc_lock+0x80>
 800916e:	4a29      	ldr	r2, [pc, #164]	@ (8009214 <inc_lock+0x118>)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	011b      	lsls	r3, r3, #4
 8009174:	4413      	add	r3, r2
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1f2      	bne.n	8009162 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b02      	cmp	r3, #2
 8009180:	d101      	bne.n	8009186 <inc_lock+0x8a>
 8009182:	2300      	movs	r3, #0
 8009184:	e040      	b.n	8009208 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	4922      	ldr	r1, [pc, #136]	@ (8009214 <inc_lock+0x118>)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	011b      	lsls	r3, r3, #4
 8009190:	440b      	add	r3, r1
 8009192:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689a      	ldr	r2, [r3, #8]
 8009198:	491e      	ldr	r1, [pc, #120]	@ (8009214 <inc_lock+0x118>)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	011b      	lsls	r3, r3, #4
 800919e:	440b      	add	r3, r1
 80091a0:	3304      	adds	r3, #4
 80091a2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	695a      	ldr	r2, [r3, #20]
 80091a8:	491a      	ldr	r1, [pc, #104]	@ (8009214 <inc_lock+0x118>)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	011b      	lsls	r3, r3, #4
 80091ae:	440b      	add	r3, r1
 80091b0:	3308      	adds	r3, #8
 80091b2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80091b4:	4a17      	ldr	r2, [pc, #92]	@ (8009214 <inc_lock+0x118>)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	011b      	lsls	r3, r3, #4
 80091ba:	4413      	add	r3, r2
 80091bc:	330c      	adds	r3, #12
 80091be:	2200      	movs	r2, #0
 80091c0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d009      	beq.n	80091dc <inc_lock+0xe0>
 80091c8:	4a12      	ldr	r2, [pc, #72]	@ (8009214 <inc_lock+0x118>)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	011b      	lsls	r3, r3, #4
 80091ce:	4413      	add	r3, r2
 80091d0:	330c      	adds	r3, #12
 80091d2:	881b      	ldrh	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <inc_lock+0xe0>
 80091d8:	2300      	movs	r3, #0
 80091da:	e015      	b.n	8009208 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d108      	bne.n	80091f4 <inc_lock+0xf8>
 80091e2:	4a0c      	ldr	r2, [pc, #48]	@ (8009214 <inc_lock+0x118>)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	011b      	lsls	r3, r3, #4
 80091e8:	4413      	add	r3, r2
 80091ea:	330c      	adds	r3, #12
 80091ec:	881b      	ldrh	r3, [r3, #0]
 80091ee:	3301      	adds	r3, #1
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	e001      	b.n	80091f8 <inc_lock+0xfc>
 80091f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80091f8:	4906      	ldr	r1, [pc, #24]	@ (8009214 <inc_lock+0x118>)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	011b      	lsls	r3, r3, #4
 80091fe:	440b      	add	r3, r1
 8009200:	330c      	adds	r3, #12
 8009202:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	3301      	adds	r3, #1
}
 8009208:	4618      	mov	r0, r3
 800920a:	3714      	adds	r7, #20
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr
 8009214:	20000870 	.word	0x20000870

08009218 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	3b01      	subs	r3, #1
 8009224:	607b      	str	r3, [r7, #4]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d825      	bhi.n	8009278 <dec_lock+0x60>
		n = Files[i].ctr;
 800922c:	4a17      	ldr	r2, [pc, #92]	@ (800928c <dec_lock+0x74>)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	011b      	lsls	r3, r3, #4
 8009232:	4413      	add	r3, r2
 8009234:	330c      	adds	r3, #12
 8009236:	881b      	ldrh	r3, [r3, #0]
 8009238:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800923a:	89fb      	ldrh	r3, [r7, #14]
 800923c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009240:	d101      	bne.n	8009246 <dec_lock+0x2e>
 8009242:	2300      	movs	r3, #0
 8009244:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009246:	89fb      	ldrh	r3, [r7, #14]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <dec_lock+0x3a>
 800924c:	89fb      	ldrh	r3, [r7, #14]
 800924e:	3b01      	subs	r3, #1
 8009250:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009252:	4a0e      	ldr	r2, [pc, #56]	@ (800928c <dec_lock+0x74>)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	011b      	lsls	r3, r3, #4
 8009258:	4413      	add	r3, r2
 800925a:	330c      	adds	r3, #12
 800925c:	89fa      	ldrh	r2, [r7, #14]
 800925e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009260:	89fb      	ldrh	r3, [r7, #14]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d105      	bne.n	8009272 <dec_lock+0x5a>
 8009266:	4a09      	ldr	r2, [pc, #36]	@ (800928c <dec_lock+0x74>)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	011b      	lsls	r3, r3, #4
 800926c:	4413      	add	r3, r2
 800926e:	2200      	movs	r2, #0
 8009270:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	737b      	strb	r3, [r7, #13]
 8009276:	e001      	b.n	800927c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009278:	2302      	movs	r3, #2
 800927a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800927c:	7b7b      	ldrb	r3, [r7, #13]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	20000870 	.word	0x20000870

08009290 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]
 800929c:	e010      	b.n	80092c0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800929e:	4a0d      	ldr	r2, [pc, #52]	@ (80092d4 <clear_lock+0x44>)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	011b      	lsls	r3, r3, #4
 80092a4:	4413      	add	r3, r2
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d105      	bne.n	80092ba <clear_lock+0x2a>
 80092ae:	4a09      	ldr	r2, [pc, #36]	@ (80092d4 <clear_lock+0x44>)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	011b      	lsls	r3, r3, #4
 80092b4:	4413      	add	r3, r2
 80092b6:	2200      	movs	r2, #0
 80092b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3301      	adds	r3, #1
 80092be:	60fb      	str	r3, [r7, #12]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d9eb      	bls.n	800929e <clear_lock+0xe>
	}
}
 80092c6:	bf00      	nop
 80092c8:	bf00      	nop
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	20000870 	.word	0x20000870

080092d8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b086      	sub	sp, #24
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	78db      	ldrb	r3, [r3, #3]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d034      	beq.n	8009356 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	7858      	ldrb	r0, [r3, #1]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80092fc:	2301      	movs	r3, #1
 80092fe:	697a      	ldr	r2, [r7, #20]
 8009300:	f7ff fd40 	bl	8008d84 <disk_write>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d002      	beq.n	8009310 <sync_window+0x38>
			res = FR_DISK_ERR;
 800930a:	2301      	movs	r3, #1
 800930c:	73fb      	strb	r3, [r7, #15]
 800930e:	e022      	b.n	8009356 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	1ad2      	subs	r2, r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	429a      	cmp	r2, r3
 8009324:	d217      	bcs.n	8009356 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	789b      	ldrb	r3, [r3, #2]
 800932a:	613b      	str	r3, [r7, #16]
 800932c:	e010      	b.n	8009350 <sync_window+0x78>
					wsect += fs->fsize;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	697a      	ldr	r2, [r7, #20]
 8009334:	4413      	add	r3, r2
 8009336:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	7858      	ldrb	r0, [r3, #1]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009342:	2301      	movs	r3, #1
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	f7ff fd1d 	bl	8008d84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	3b01      	subs	r3, #1
 800934e:	613b      	str	r3, [r7, #16]
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d8eb      	bhi.n	800932e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009356:	7bfb      	ldrb	r3, [r7, #15]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3718      	adds	r7, #24
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	429a      	cmp	r2, r3
 8009376:	d01b      	beq.n	80093b0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7ff ffad 	bl	80092d8 <sync_window>
 800937e:	4603      	mov	r3, r0
 8009380:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d113      	bne.n	80093b0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	7858      	ldrb	r0, [r3, #1]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009392:	2301      	movs	r3, #1
 8009394:	683a      	ldr	r2, [r7, #0]
 8009396:	f7ff fcd5 	bl	8008d44 <disk_read>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d004      	beq.n	80093aa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80093a0:	f04f 33ff 	mov.w	r3, #4294967295
 80093a4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	683a      	ldr	r2, [r7, #0]
 80093ae:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7ff ff87 	bl	80092d8 <sync_window>
 80093ca:	4603      	mov	r3, r0
 80093cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80093ce:	7bfb      	ldrb	r3, [r7, #15]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d158      	bne.n	8009486 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d148      	bne.n	800946e <sync_fs+0xb2>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	791b      	ldrb	r3, [r3, #4]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d144      	bne.n	800946e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	3330      	adds	r3, #48	@ 0x30
 80093e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093ec:	2100      	movs	r1, #0
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff fda9 	bl	8008f46 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	3330      	adds	r3, #48	@ 0x30
 80093f8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80093fc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009400:	4618      	mov	r0, r3
 8009402:	f7ff fd38 	bl	8008e76 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	3330      	adds	r3, #48	@ 0x30
 800940a:	4921      	ldr	r1, [pc, #132]	@ (8009490 <sync_fs+0xd4>)
 800940c:	4618      	mov	r0, r3
 800940e:	f7ff fd4d 	bl	8008eac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	3330      	adds	r3, #48	@ 0x30
 8009416:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800941a:	491e      	ldr	r1, [pc, #120]	@ (8009494 <sync_fs+0xd8>)
 800941c:	4618      	mov	r0, r3
 800941e:	f7ff fd45 	bl	8008eac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	3330      	adds	r3, #48	@ 0x30
 8009426:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	4619      	mov	r1, r3
 8009430:	4610      	mov	r0, r2
 8009432:	f7ff fd3b 	bl	8008eac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3330      	adds	r3, #48	@ 0x30
 800943a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	4619      	mov	r1, r3
 8009444:	4610      	mov	r0, r2
 8009446:	f7ff fd31 	bl	8008eac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	69db      	ldr	r3, [r3, #28]
 800944e:	1c5a      	adds	r2, r3, #1
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	7858      	ldrb	r0, [r3, #1]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009462:	2301      	movs	r3, #1
 8009464:	f7ff fc8e 	bl	8008d84 <disk_write>
			fs->fsi_flag = 0;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	785b      	ldrb	r3, [r3, #1]
 8009472:	2200      	movs	r2, #0
 8009474:	2100      	movs	r1, #0
 8009476:	4618      	mov	r0, r3
 8009478:	f7ff fca4 	bl	8008dc4 <disk_ioctl>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <sync_fs+0xca>
 8009482:	2301      	movs	r3, #1
 8009484:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009486:	7bfb      	ldrb	r3, [r7, #15]
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	41615252 	.word	0x41615252
 8009494:	61417272 	.word	0x61417272

08009498 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	3b02      	subs	r3, #2
 80094a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	3b02      	subs	r3, #2
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d301      	bcc.n	80094b8 <clust2sect+0x20>
 80094b4:	2300      	movs	r3, #0
 80094b6:	e008      	b.n	80094ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	895b      	ldrh	r3, [r3, #10]
 80094bc:	461a      	mov	r2, r3
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	fb03 f202 	mul.w	r2, r3, r2
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c8:	4413      	add	r3, r2
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	370c      	adds	r7, #12
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b086      	sub	sp, #24
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d904      	bls.n	80094f6 <get_fat+0x20>
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	695b      	ldr	r3, [r3, #20]
 80094f0:	683a      	ldr	r2, [r7, #0]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d302      	bcc.n	80094fc <get_fat+0x26>
		val = 1;	/* Internal error */
 80094f6:	2301      	movs	r3, #1
 80094f8:	617b      	str	r3, [r7, #20]
 80094fa:	e08e      	b.n	800961a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80094fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009500:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	2b03      	cmp	r3, #3
 8009508:	d061      	beq.n	80095ce <get_fat+0xf8>
 800950a:	2b03      	cmp	r3, #3
 800950c:	dc7b      	bgt.n	8009606 <get_fat+0x130>
 800950e:	2b01      	cmp	r3, #1
 8009510:	d002      	beq.n	8009518 <get_fat+0x42>
 8009512:	2b02      	cmp	r3, #2
 8009514:	d041      	beq.n	800959a <get_fat+0xc4>
 8009516:	e076      	b.n	8009606 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	60fb      	str	r3, [r7, #12]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	085b      	lsrs	r3, r3, #1
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	4413      	add	r3, r2
 8009524:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	6a1a      	ldr	r2, [r3, #32]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	0a5b      	lsrs	r3, r3, #9
 800952e:	4413      	add	r3, r2
 8009530:	4619      	mov	r1, r3
 8009532:	6938      	ldr	r0, [r7, #16]
 8009534:	f7ff ff14 	bl	8009360 <move_window>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d166      	bne.n	800960c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	1c5a      	adds	r2, r3, #1
 8009542:	60fa      	str	r2, [r7, #12]
 8009544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	4413      	add	r3, r2
 800954c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009550:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	6a1a      	ldr	r2, [r3, #32]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	0a5b      	lsrs	r3, r3, #9
 800955a:	4413      	add	r3, r2
 800955c:	4619      	mov	r1, r3
 800955e:	6938      	ldr	r0, [r7, #16]
 8009560:	f7ff fefe 	bl	8009360 <move_window>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d152      	bne.n	8009610 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	4413      	add	r3, r2
 8009574:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009578:	021b      	lsls	r3, r3, #8
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	4313      	orrs	r3, r2
 800957e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	f003 0301 	and.w	r3, r3, #1
 8009586:	2b00      	cmp	r3, #0
 8009588:	d002      	beq.n	8009590 <get_fat+0xba>
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	091b      	lsrs	r3, r3, #4
 800958e:	e002      	b.n	8009596 <get_fat+0xc0>
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009596:	617b      	str	r3, [r7, #20]
			break;
 8009598:	e03f      	b.n	800961a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	6a1a      	ldr	r2, [r3, #32]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	0a1b      	lsrs	r3, r3, #8
 80095a2:	4413      	add	r3, r2
 80095a4:	4619      	mov	r1, r3
 80095a6:	6938      	ldr	r0, [r7, #16]
 80095a8:	f7ff feda 	bl	8009360 <move_window>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d130      	bne.n	8009614 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	005b      	lsls	r3, r3, #1
 80095bc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80095c0:	4413      	add	r3, r2
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7ff fc1c 	bl	8008e00 <ld_word>
 80095c8:	4603      	mov	r3, r0
 80095ca:	617b      	str	r3, [r7, #20]
			break;
 80095cc:	e025      	b.n	800961a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	6a1a      	ldr	r2, [r3, #32]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	09db      	lsrs	r3, r3, #7
 80095d6:	4413      	add	r3, r2
 80095d8:	4619      	mov	r1, r3
 80095da:	6938      	ldr	r0, [r7, #16]
 80095dc:	f7ff fec0 	bl	8009360 <move_window>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d118      	bne.n	8009618 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80095f4:	4413      	add	r3, r2
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7ff fc1a 	bl	8008e30 <ld_dword>
 80095fc:	4603      	mov	r3, r0
 80095fe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009602:	617b      	str	r3, [r7, #20]
			break;
 8009604:	e009      	b.n	800961a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009606:	2301      	movs	r3, #1
 8009608:	617b      	str	r3, [r7, #20]
 800960a:	e006      	b.n	800961a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800960c:	bf00      	nop
 800960e:	e004      	b.n	800961a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009610:	bf00      	nop
 8009612:	e002      	b.n	800961a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009614:	bf00      	nop
 8009616:	e000      	b.n	800961a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009618:	bf00      	nop
		}
	}

	return val;
 800961a:	697b      	ldr	r3, [r7, #20]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3718      	adds	r7, #24
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009624:	b590      	push	{r4, r7, lr}
 8009626:	b089      	sub	sp, #36	@ 0x24
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009630:	2302      	movs	r3, #2
 8009632:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b01      	cmp	r3, #1
 8009638:	f240 80d9 	bls.w	80097ee <put_fat+0x1ca>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	695b      	ldr	r3, [r3, #20]
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	429a      	cmp	r2, r3
 8009644:	f080 80d3 	bcs.w	80097ee <put_fat+0x1ca>
		switch (fs->fs_type) {
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	2b03      	cmp	r3, #3
 800964e:	f000 8096 	beq.w	800977e <put_fat+0x15a>
 8009652:	2b03      	cmp	r3, #3
 8009654:	f300 80cb 	bgt.w	80097ee <put_fat+0x1ca>
 8009658:	2b01      	cmp	r3, #1
 800965a:	d002      	beq.n	8009662 <put_fat+0x3e>
 800965c:	2b02      	cmp	r3, #2
 800965e:	d06e      	beq.n	800973e <put_fat+0x11a>
 8009660:	e0c5      	b.n	80097ee <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	61bb      	str	r3, [r7, #24]
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	085b      	lsrs	r3, r3, #1
 800966a:	69ba      	ldr	r2, [r7, #24]
 800966c:	4413      	add	r3, r2
 800966e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6a1a      	ldr	r2, [r3, #32]
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	0a5b      	lsrs	r3, r3, #9
 8009678:	4413      	add	r3, r2
 800967a:	4619      	mov	r1, r3
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f7ff fe6f 	bl	8009360 <move_window>
 8009682:	4603      	mov	r3, r0
 8009684:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009686:	7ffb      	ldrb	r3, [r7, #31]
 8009688:	2b00      	cmp	r3, #0
 800968a:	f040 80a9 	bne.w	80097e0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	1c59      	adds	r1, r3, #1
 8009698:	61b9      	str	r1, [r7, #24]
 800969a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800969e:	4413      	add	r3, r2
 80096a0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f003 0301 	and.w	r3, r3, #1
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00d      	beq.n	80096c8 <put_fat+0xa4>
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	b25b      	sxtb	r3, r3
 80096b2:	f003 030f 	and.w	r3, r3, #15
 80096b6:	b25a      	sxtb	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	011b      	lsls	r3, r3, #4
 80096be:	b25b      	sxtb	r3, r3
 80096c0:	4313      	orrs	r3, r2
 80096c2:	b25b      	sxtb	r3, r3
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	e001      	b.n	80096cc <put_fat+0xa8>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	697a      	ldr	r2, [r7, #20]
 80096ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2201      	movs	r2, #1
 80096d4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6a1a      	ldr	r2, [r3, #32]
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	0a5b      	lsrs	r3, r3, #9
 80096de:	4413      	add	r3, r2
 80096e0:	4619      	mov	r1, r3
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f7ff fe3c 	bl	8009360 <move_window>
 80096e8:	4603      	mov	r3, r0
 80096ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096ec:	7ffb      	ldrb	r3, [r7, #31]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d178      	bne.n	80097e4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096fe:	4413      	add	r3, r2
 8009700:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d003      	beq.n	8009714 <put_fat+0xf0>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	091b      	lsrs	r3, r3, #4
 8009710:	b2db      	uxtb	r3, r3
 8009712:	e00e      	b.n	8009732 <put_fat+0x10e>
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	b25b      	sxtb	r3, r3
 800971a:	f023 030f 	bic.w	r3, r3, #15
 800971e:	b25a      	sxtb	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	0a1b      	lsrs	r3, r3, #8
 8009724:	b25b      	sxtb	r3, r3
 8009726:	f003 030f 	and.w	r3, r3, #15
 800972a:	b25b      	sxtb	r3, r3
 800972c:	4313      	orrs	r3, r2
 800972e:	b25b      	sxtb	r3, r3
 8009730:	b2db      	uxtb	r3, r3
 8009732:	697a      	ldr	r2, [r7, #20]
 8009734:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2201      	movs	r2, #1
 800973a:	70da      	strb	r2, [r3, #3]
			break;
 800973c:	e057      	b.n	80097ee <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6a1a      	ldr	r2, [r3, #32]
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	0a1b      	lsrs	r3, r3, #8
 8009746:	4413      	add	r3, r2
 8009748:	4619      	mov	r1, r3
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f7ff fe08 	bl	8009360 <move_window>
 8009750:	4603      	mov	r3, r0
 8009752:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009754:	7ffb      	ldrb	r3, [r7, #31]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d146      	bne.n	80097e8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	005b      	lsls	r3, r3, #1
 8009764:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009768:	4413      	add	r3, r2
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	b292      	uxth	r2, r2
 800976e:	4611      	mov	r1, r2
 8009770:	4618      	mov	r0, r3
 8009772:	f7ff fb80 	bl	8008e76 <st_word>
			fs->wflag = 1;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2201      	movs	r2, #1
 800977a:	70da      	strb	r2, [r3, #3]
			break;
 800977c:	e037      	b.n	80097ee <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6a1a      	ldr	r2, [r3, #32]
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	09db      	lsrs	r3, r3, #7
 8009786:	4413      	add	r3, r2
 8009788:	4619      	mov	r1, r3
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f7ff fde8 	bl	8009360 <move_window>
 8009790:	4603      	mov	r3, r0
 8009792:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009794:	7ffb      	ldrb	r3, [r7, #31]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d128      	bne.n	80097ec <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80097ae:	4413      	add	r3, r2
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7ff fb3d 	bl	8008e30 <ld_dword>
 80097b6:	4603      	mov	r3, r0
 80097b8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80097bc:	4323      	orrs	r3, r4
 80097be:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80097ce:	4413      	add	r3, r2
 80097d0:	6879      	ldr	r1, [r7, #4]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7ff fb6a 	bl	8008eac <st_dword>
			fs->wflag = 1;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2201      	movs	r2, #1
 80097dc:	70da      	strb	r2, [r3, #3]
			break;
 80097de:	e006      	b.n	80097ee <put_fat+0x1ca>
			if (res != FR_OK) break;
 80097e0:	bf00      	nop
 80097e2:	e004      	b.n	80097ee <put_fat+0x1ca>
			if (res != FR_OK) break;
 80097e4:	bf00      	nop
 80097e6:	e002      	b.n	80097ee <put_fat+0x1ca>
			if (res != FR_OK) break;
 80097e8:	bf00      	nop
 80097ea:	e000      	b.n	80097ee <put_fat+0x1ca>
			if (res != FR_OK) break;
 80097ec:	bf00      	nop
		}
	}
	return res;
 80097ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3724      	adds	r7, #36	@ 0x24
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd90      	pop	{r4, r7, pc}

080097f8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b088      	sub	sp, #32
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d904      	bls.n	800981e <remove_chain+0x26>
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	695b      	ldr	r3, [r3, #20]
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	429a      	cmp	r2, r3
 800981c:	d301      	bcc.n	8009822 <remove_chain+0x2a>
 800981e:	2302      	movs	r3, #2
 8009820:	e04b      	b.n	80098ba <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00c      	beq.n	8009842 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009828:	f04f 32ff 	mov.w	r2, #4294967295
 800982c:	6879      	ldr	r1, [r7, #4]
 800982e:	69b8      	ldr	r0, [r7, #24]
 8009830:	f7ff fef8 	bl	8009624 <put_fat>
 8009834:	4603      	mov	r3, r0
 8009836:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009838:	7ffb      	ldrb	r3, [r7, #31]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <remove_chain+0x4a>
 800983e:	7ffb      	ldrb	r3, [r7, #31]
 8009840:	e03b      	b.n	80098ba <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009842:	68b9      	ldr	r1, [r7, #8]
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f7ff fe46 	bl	80094d6 <get_fat>
 800984a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d031      	beq.n	80098b6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d101      	bne.n	800985c <remove_chain+0x64>
 8009858:	2302      	movs	r3, #2
 800985a:	e02e      	b.n	80098ba <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009862:	d101      	bne.n	8009868 <remove_chain+0x70>
 8009864:	2301      	movs	r3, #1
 8009866:	e028      	b.n	80098ba <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009868:	2200      	movs	r2, #0
 800986a:	68b9      	ldr	r1, [r7, #8]
 800986c:	69b8      	ldr	r0, [r7, #24]
 800986e:	f7ff fed9 	bl	8009624 <put_fat>
 8009872:	4603      	mov	r3, r0
 8009874:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009876:	7ffb      	ldrb	r3, [r7, #31]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d001      	beq.n	8009880 <remove_chain+0x88>
 800987c:	7ffb      	ldrb	r3, [r7, #31]
 800987e:	e01c      	b.n	80098ba <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	691a      	ldr	r2, [r3, #16]
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	695b      	ldr	r3, [r3, #20]
 8009888:	3b02      	subs	r3, #2
 800988a:	429a      	cmp	r2, r3
 800988c:	d20b      	bcs.n	80098a6 <remove_chain+0xae>
			fs->free_clst++;
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	1c5a      	adds	r2, r3, #1
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	791b      	ldrb	r3, [r3, #4]
 800989c:	f043 0301 	orr.w	r3, r3, #1
 80098a0:	b2da      	uxtb	r2, r3
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	695b      	ldr	r3, [r3, #20]
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d3c6      	bcc.n	8009842 <remove_chain+0x4a>
 80098b4:	e000      	b.n	80098b8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80098b6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3720      	adds	r7, #32
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b088      	sub	sp, #32
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10d      	bne.n	80098f4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d004      	beq.n	80098ee <create_chain+0x2c>
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	69ba      	ldr	r2, [r7, #24]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d31b      	bcc.n	8009926 <create_chain+0x64>
 80098ee:	2301      	movs	r3, #1
 80098f0:	61bb      	str	r3, [r7, #24]
 80098f2:	e018      	b.n	8009926 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f7ff fded 	bl	80094d6 <get_fat>
 80098fc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d801      	bhi.n	8009908 <create_chain+0x46>
 8009904:	2301      	movs	r3, #1
 8009906:	e070      	b.n	80099ea <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990e:	d101      	bne.n	8009914 <create_chain+0x52>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	e06a      	b.n	80099ea <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	695b      	ldr	r3, [r3, #20]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	429a      	cmp	r2, r3
 800991c:	d201      	bcs.n	8009922 <create_chain+0x60>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	e063      	b.n	80099ea <create_chain+0x128>
		scl = clst;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	3301      	adds	r3, #1
 800992e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	695b      	ldr	r3, [r3, #20]
 8009934:	69fa      	ldr	r2, [r7, #28]
 8009936:	429a      	cmp	r2, r3
 8009938:	d307      	bcc.n	800994a <create_chain+0x88>
				ncl = 2;
 800993a:	2302      	movs	r3, #2
 800993c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800993e:	69fa      	ldr	r2, [r7, #28]
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	429a      	cmp	r2, r3
 8009944:	d901      	bls.n	800994a <create_chain+0x88>
 8009946:	2300      	movs	r3, #0
 8009948:	e04f      	b.n	80099ea <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800994a:	69f9      	ldr	r1, [r7, #28]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7ff fdc2 	bl	80094d6 <get_fat>
 8009952:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00e      	beq.n	8009978 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d003      	beq.n	8009968 <create_chain+0xa6>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009966:	d101      	bne.n	800996c <create_chain+0xaa>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	e03e      	b.n	80099ea <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800996c:	69fa      	ldr	r2, [r7, #28]
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	429a      	cmp	r2, r3
 8009972:	d1da      	bne.n	800992a <create_chain+0x68>
 8009974:	2300      	movs	r3, #0
 8009976:	e038      	b.n	80099ea <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009978:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800997a:	f04f 32ff 	mov.w	r2, #4294967295
 800997e:	69f9      	ldr	r1, [r7, #28]
 8009980:	6938      	ldr	r0, [r7, #16]
 8009982:	f7ff fe4f 	bl	8009624 <put_fat>
 8009986:	4603      	mov	r3, r0
 8009988:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800998a:	7dfb      	ldrb	r3, [r7, #23]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d109      	bne.n	80099a4 <create_chain+0xe2>
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d006      	beq.n	80099a4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009996:	69fa      	ldr	r2, [r7, #28]
 8009998:	6839      	ldr	r1, [r7, #0]
 800999a:	6938      	ldr	r0, [r7, #16]
 800999c:	f7ff fe42 	bl	8009624 <put_fat>
 80099a0:	4603      	mov	r3, r0
 80099a2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80099a4:	7dfb      	ldrb	r3, [r7, #23]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d116      	bne.n	80099d8 <create_chain+0x116>
		fs->last_clst = ncl;
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	69fa      	ldr	r2, [r7, #28]
 80099ae:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	691a      	ldr	r2, [r3, #16]
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	695b      	ldr	r3, [r3, #20]
 80099b8:	3b02      	subs	r3, #2
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d804      	bhi.n	80099c8 <create_chain+0x106>
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	1e5a      	subs	r2, r3, #1
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	791b      	ldrb	r3, [r3, #4]
 80099cc:	f043 0301 	orr.w	r3, r3, #1
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	711a      	strb	r2, [r3, #4]
 80099d6:	e007      	b.n	80099e8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80099d8:	7dfb      	ldrb	r3, [r7, #23]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d102      	bne.n	80099e4 <create_chain+0x122>
 80099de:	f04f 33ff 	mov.w	r3, #4294967295
 80099e2:	e000      	b.n	80099e6 <create_chain+0x124>
 80099e4:	2301      	movs	r3, #1
 80099e6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80099e8:	69fb      	ldr	r3, [r7, #28]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3720      	adds	r7, #32
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b087      	sub	sp, #28
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a06:	3304      	adds	r3, #4
 8009a08:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	0a5b      	lsrs	r3, r3, #9
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	8952      	ldrh	r2, [r2, #10]
 8009a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a16:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	1d1a      	adds	r2, r3, #4
 8009a1c:	613a      	str	r2, [r7, #16]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d101      	bne.n	8009a2c <clmt_clust+0x3a>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	e010      	b.n	8009a4e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d307      	bcc.n	8009a44 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009a34:	697a      	ldr	r2, [r7, #20]
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	617b      	str	r3, [r7, #20]
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	3304      	adds	r3, #4
 8009a40:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009a42:	e7e9      	b.n	8009a18 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009a44:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	4413      	add	r3, r2
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	371c      	adds	r7, #28
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b086      	sub	sp, #24
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
 8009a62:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a70:	d204      	bcs.n	8009a7c <dir_sdi+0x22>
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	f003 031f 	and.w	r3, r3, #31
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d001      	beq.n	8009a80 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	e063      	b.n	8009b48 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	683a      	ldr	r2, [r7, #0]
 8009a84:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d106      	bne.n	8009aa0 <dir_sdi+0x46>
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d902      	bls.n	8009aa0 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a9e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10c      	bne.n	8009ac0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	095b      	lsrs	r3, r3, #5
 8009aaa:	693a      	ldr	r2, [r7, #16]
 8009aac:	8912      	ldrh	r2, [r2, #8]
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d301      	bcc.n	8009ab6 <dir_sdi+0x5c>
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	e048      	b.n	8009b48 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	61da      	str	r2, [r3, #28]
 8009abe:	e029      	b.n	8009b14 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	895b      	ldrh	r3, [r3, #10]
 8009ac4:	025b      	lsls	r3, r3, #9
 8009ac6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009ac8:	e019      	b.n	8009afe <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6979      	ldr	r1, [r7, #20]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7ff fd01 	bl	80094d6 <get_fat>
 8009ad4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009adc:	d101      	bne.n	8009ae2 <dir_sdi+0x88>
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e032      	b.n	8009b48 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d904      	bls.n	8009af2 <dir_sdi+0x98>
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d301      	bcc.n	8009af6 <dir_sdi+0x9c>
 8009af2:	2302      	movs	r3, #2
 8009af4:	e028      	b.n	8009b48 <dir_sdi+0xee>
			ofs -= csz;
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d2e1      	bcs.n	8009aca <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009b06:	6979      	ldr	r1, [r7, #20]
 8009b08:	6938      	ldr	r0, [r7, #16]
 8009b0a:	f7ff fcc5 	bl	8009498 <clust2sect>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	69db      	ldr	r3, [r3, #28]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d101      	bne.n	8009b26 <dir_sdi+0xcc>
 8009b22:	2302      	movs	r3, #2
 8009b24:	e010      	b.n	8009b48 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	69da      	ldr	r2, [r3, #28]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	0a5b      	lsrs	r3, r3, #9
 8009b2e:	441a      	add	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b40:	441a      	add	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3718      	adds	r7, #24
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	695b      	ldr	r3, [r3, #20]
 8009b64:	3320      	adds	r3, #32
 8009b66:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	69db      	ldr	r3, [r3, #28]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d003      	beq.n	8009b78 <dir_next+0x28>
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b76:	d301      	bcc.n	8009b7c <dir_next+0x2c>
 8009b78:	2304      	movs	r3, #4
 8009b7a:	e0aa      	b.n	8009cd2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f040 8098 	bne.w	8009cb8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	69db      	ldr	r3, [r3, #28]
 8009b8c:	1c5a      	adds	r2, r3, #1
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	699b      	ldr	r3, [r3, #24]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d10b      	bne.n	8009bb2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	095b      	lsrs	r3, r3, #5
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	8912      	ldrh	r2, [r2, #8]
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	f0c0 8088 	bcc.w	8009cb8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	61da      	str	r2, [r3, #28]
 8009bae:	2304      	movs	r3, #4
 8009bb0:	e08f      	b.n	8009cd2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	0a5b      	lsrs	r3, r3, #9
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	8952      	ldrh	r2, [r2, #10]
 8009bba:	3a01      	subs	r2, #1
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d17a      	bne.n	8009cb8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	4619      	mov	r1, r3
 8009bca:	4610      	mov	r0, r2
 8009bcc:	f7ff fc83 	bl	80094d6 <get_fat>
 8009bd0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d801      	bhi.n	8009bdc <dir_next+0x8c>
 8009bd8:	2302      	movs	r3, #2
 8009bda:	e07a      	b.n	8009cd2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be2:	d101      	bne.n	8009be8 <dir_next+0x98>
 8009be4:	2301      	movs	r3, #1
 8009be6:	e074      	b.n	8009cd2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	695b      	ldr	r3, [r3, #20]
 8009bec:	697a      	ldr	r2, [r7, #20]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d358      	bcc.n	8009ca4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d104      	bne.n	8009c02 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	61da      	str	r2, [r3, #28]
 8009bfe:	2304      	movs	r3, #4
 8009c00:	e067      	b.n	8009cd2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4610      	mov	r0, r2
 8009c0c:	f7ff fe59 	bl	80098c2 <create_chain>
 8009c10:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <dir_next+0xcc>
 8009c18:	2307      	movs	r3, #7
 8009c1a:	e05a      	b.n	8009cd2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d101      	bne.n	8009c26 <dir_next+0xd6>
 8009c22:	2302      	movs	r3, #2
 8009c24:	e055      	b.n	8009cd2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2c:	d101      	bne.n	8009c32 <dir_next+0xe2>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e04f      	b.n	8009cd2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f7ff fb50 	bl	80092d8 <sync_window>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d001      	beq.n	8009c42 <dir_next+0xf2>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e047      	b.n	8009cd2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3330      	adds	r3, #48	@ 0x30
 8009c46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7ff f97a 	bl	8008f46 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009c52:	2300      	movs	r3, #0
 8009c54:	613b      	str	r3, [r7, #16]
 8009c56:	6979      	ldr	r1, [r7, #20]
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f7ff fc1d 	bl	8009498 <clust2sect>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009c64:	e012      	b.n	8009c8c <dir_next+0x13c>
						fs->wflag = 1;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f7ff fb33 	bl	80092d8 <sync_window>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <dir_next+0x12c>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e02a      	b.n	8009cd2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	613b      	str	r3, [r7, #16]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c86:	1c5a      	adds	r2, r3, #1
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	895b      	ldrh	r3, [r3, #10]
 8009c90:	461a      	mov	r2, r3
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d3e6      	bcc.n	8009c66 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	1ad2      	subs	r2, r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	697a      	ldr	r2, [r7, #20]
 8009ca8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009caa:	6979      	ldr	r1, [r7, #20]
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f7ff fbf3 	bl	8009498 <clust2sect>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cca:	441a      	add	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3718      	adds	r7, #24
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b086      	sub	sp, #24
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009cea:	2100      	movs	r1, #0
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f7ff feb4 	bl	8009a5a <dir_sdi>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009cf6:	7dfb      	ldrb	r3, [r7, #23]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d12b      	bne.n	8009d54 <dir_alloc+0x7a>
		n = 0;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	69db      	ldr	r3, [r3, #28]
 8009d04:	4619      	mov	r1, r3
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f7ff fb2a 	bl	8009360 <move_window>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009d10:	7dfb      	ldrb	r3, [r7, #23]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d11d      	bne.n	8009d52 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2be5      	cmp	r3, #229	@ 0xe5
 8009d1e:	d004      	beq.n	8009d2a <dir_alloc+0x50>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a1b      	ldr	r3, [r3, #32]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d107      	bne.n	8009d3a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	613b      	str	r3, [r7, #16]
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d102      	bne.n	8009d3e <dir_alloc+0x64>
 8009d38:	e00c      	b.n	8009d54 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009d3e:	2101      	movs	r1, #1
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f7ff ff05 	bl	8009b50 <dir_next>
 8009d46:	4603      	mov	r3, r0
 8009d48:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009d4a:	7dfb      	ldrb	r3, [r7, #23]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d0d7      	beq.n	8009d00 <dir_alloc+0x26>
 8009d50:	e000      	b.n	8009d54 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009d52:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009d54:	7dfb      	ldrb	r3, [r7, #23]
 8009d56:	2b04      	cmp	r3, #4
 8009d58:	d101      	bne.n	8009d5e <dir_alloc+0x84>
 8009d5a:	2307      	movs	r3, #7
 8009d5c:	75fb      	strb	r3, [r7, #23]
	return res;
 8009d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3718      	adds	r7, #24
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	331a      	adds	r3, #26
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7ff f842 	bl	8008e00 <ld_word>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	2b03      	cmp	r3, #3
 8009d86:	d109      	bne.n	8009d9c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	3314      	adds	r3, #20
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7ff f837 	bl	8008e00 <ld_word>
 8009d92:	4603      	mov	r3, r0
 8009d94:	041b      	lsls	r3, r3, #16
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b084      	sub	sp, #16
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	60f8      	str	r0, [r7, #12]
 8009dae:	60b9      	str	r1, [r7, #8]
 8009db0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	331a      	adds	r3, #26
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	b292      	uxth	r2, r2
 8009dba:	4611      	mov	r1, r2
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7ff f85a 	bl	8008e76 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d109      	bne.n	8009dde <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	f103 0214 	add.w	r2, r3, #20
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	0c1b      	lsrs	r3, r3, #16
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	4610      	mov	r0, r2
 8009dda:	f7ff f84c 	bl	8008e76 <st_word>
	}
}
 8009dde:	bf00      	nop
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b086      	sub	sp, #24
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009df4:	2100      	movs	r1, #0
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f7ff fe2f 	bl	8009a5a <dir_sdi>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d001      	beq.n	8009e0a <dir_find+0x24>
 8009e06:	7dfb      	ldrb	r3, [r7, #23]
 8009e08:	e03e      	b.n	8009e88 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	69db      	ldr	r3, [r3, #28]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	6938      	ldr	r0, [r7, #16]
 8009e12:	f7ff faa5 	bl	8009360 <move_window>
 8009e16:	4603      	mov	r3, r0
 8009e18:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009e1a:	7dfb      	ldrb	r3, [r7, #23]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d12f      	bne.n	8009e80 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a1b      	ldr	r3, [r3, #32]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009e28:	7bfb      	ldrb	r3, [r7, #15]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d102      	bne.n	8009e34 <dir_find+0x4e>
 8009e2e:	2304      	movs	r3, #4
 8009e30:	75fb      	strb	r3, [r7, #23]
 8009e32:	e028      	b.n	8009e86 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a1b      	ldr	r3, [r3, #32]
 8009e38:	330b      	adds	r3, #11
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e40:	b2da      	uxtb	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	330b      	adds	r3, #11
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	f003 0308 	and.w	r3, r3, #8
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d10a      	bne.n	8009e6c <dir_find+0x86>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a18      	ldr	r0, [r3, #32]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	3324      	adds	r3, #36	@ 0x24
 8009e5e:	220b      	movs	r2, #11
 8009e60:	4619      	mov	r1, r3
 8009e62:	f7ff f88b 	bl	8008f7c <mem_cmp>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00b      	beq.n	8009e84 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7ff fe6e 	bl	8009b50 <dir_next>
 8009e74:	4603      	mov	r3, r0
 8009e76:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0c5      	beq.n	8009e0a <dir_find+0x24>
 8009e7e:	e002      	b.n	8009e86 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009e80:	bf00      	nop
 8009e82:	e000      	b.n	8009e86 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009e84:	bf00      	nop

	return res;
 8009e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3718      	adds	r7, #24
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff ff1a 	bl	8009cda <dir_alloc>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d11c      	bne.n	8009eea <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	69db      	ldr	r3, [r3, #28]
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	68b8      	ldr	r0, [r7, #8]
 8009eb8:	f7ff fa52 	bl	8009360 <move_window>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d111      	bne.n	8009eea <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	2220      	movs	r2, #32
 8009ecc:	2100      	movs	r1, #0
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7ff f839 	bl	8008f46 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a18      	ldr	r0, [r3, #32]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	3324      	adds	r3, #36	@ 0x24
 8009edc:	220b      	movs	r2, #11
 8009ede:	4619      	mov	r1, r3
 8009ee0:	f7ff f810 	bl	8008f04 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b088      	sub	sp, #32
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	3324      	adds	r3, #36	@ 0x24
 8009f08:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009f0a:	220b      	movs	r2, #11
 8009f0c:	2120      	movs	r1, #32
 8009f0e:	68b8      	ldr	r0, [r7, #8]
 8009f10:	f7ff f819 	bl	8008f46 <mem_set>
	si = i = 0; ni = 8;
 8009f14:	2300      	movs	r3, #0
 8009f16:	613b      	str	r3, [r7, #16]
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	61fb      	str	r3, [r7, #28]
 8009f1c:	2308      	movs	r3, #8
 8009f1e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	1c5a      	adds	r2, r3, #1
 8009f24:	61fa      	str	r2, [r7, #28]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	4413      	add	r3, r2
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009f2e:	7efb      	ldrb	r3, [r7, #27]
 8009f30:	2b20      	cmp	r3, #32
 8009f32:	d94e      	bls.n	8009fd2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009f34:	7efb      	ldrb	r3, [r7, #27]
 8009f36:	2b2f      	cmp	r3, #47	@ 0x2f
 8009f38:	d006      	beq.n	8009f48 <create_name+0x54>
 8009f3a:	7efb      	ldrb	r3, [r7, #27]
 8009f3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8009f3e:	d110      	bne.n	8009f62 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009f40:	e002      	b.n	8009f48 <create_name+0x54>
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	3301      	adds	r3, #1
 8009f46:	61fb      	str	r3, [r7, #28]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	2b2f      	cmp	r3, #47	@ 0x2f
 8009f52:	d0f6      	beq.n	8009f42 <create_name+0x4e>
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	4413      	add	r3, r2
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8009f5e:	d0f0      	beq.n	8009f42 <create_name+0x4e>
			break;
 8009f60:	e038      	b.n	8009fd4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009f62:	7efb      	ldrb	r3, [r7, #27]
 8009f64:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f66:	d003      	beq.n	8009f70 <create_name+0x7c>
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d30c      	bcc.n	8009f8a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	2b0b      	cmp	r3, #11
 8009f74:	d002      	beq.n	8009f7c <create_name+0x88>
 8009f76:	7efb      	ldrb	r3, [r7, #27]
 8009f78:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f7a:	d001      	beq.n	8009f80 <create_name+0x8c>
 8009f7c:	2306      	movs	r3, #6
 8009f7e:	e044      	b.n	800a00a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009f80:	2308      	movs	r3, #8
 8009f82:	613b      	str	r3, [r7, #16]
 8009f84:	230b      	movs	r3, #11
 8009f86:	617b      	str	r3, [r7, #20]
			continue;
 8009f88:	e022      	b.n	8009fd0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009f8a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	da04      	bge.n	8009f9c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009f92:	7efb      	ldrb	r3, [r7, #27]
 8009f94:	3b80      	subs	r3, #128	@ 0x80
 8009f96:	4a1f      	ldr	r2, [pc, #124]	@ (800a014 <create_name+0x120>)
 8009f98:	5cd3      	ldrb	r3, [r2, r3]
 8009f9a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009f9c:	7efb      	ldrb	r3, [r7, #27]
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	481d      	ldr	r0, [pc, #116]	@ (800a018 <create_name+0x124>)
 8009fa2:	f7ff f812 	bl	8008fca <chk_chr>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <create_name+0xbc>
 8009fac:	2306      	movs	r3, #6
 8009fae:	e02c      	b.n	800a00a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009fb0:	7efb      	ldrb	r3, [r7, #27]
 8009fb2:	2b60      	cmp	r3, #96	@ 0x60
 8009fb4:	d905      	bls.n	8009fc2 <create_name+0xce>
 8009fb6:	7efb      	ldrb	r3, [r7, #27]
 8009fb8:	2b7a      	cmp	r3, #122	@ 0x7a
 8009fba:	d802      	bhi.n	8009fc2 <create_name+0xce>
 8009fbc:	7efb      	ldrb	r3, [r7, #27]
 8009fbe:	3b20      	subs	r3, #32
 8009fc0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	1c5a      	adds	r2, r3, #1
 8009fc6:	613a      	str	r2, [r7, #16]
 8009fc8:	68ba      	ldr	r2, [r7, #8]
 8009fca:	4413      	add	r3, r2
 8009fcc:	7efa      	ldrb	r2, [r7, #27]
 8009fce:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009fd0:	e7a6      	b.n	8009f20 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009fd2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	441a      	add	r2, r3
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <create_name+0xf4>
 8009fe4:	2306      	movs	r3, #6
 8009fe6:	e010      	b.n	800a00a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	2be5      	cmp	r3, #229	@ 0xe5
 8009fee:	d102      	bne.n	8009ff6 <create_name+0x102>
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	2205      	movs	r2, #5
 8009ff4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009ff6:	7efb      	ldrb	r3, [r7, #27]
 8009ff8:	2b20      	cmp	r3, #32
 8009ffa:	d801      	bhi.n	800a000 <create_name+0x10c>
 8009ffc:	2204      	movs	r2, #4
 8009ffe:	e000      	b.n	800a002 <create_name+0x10e>
 800a000:	2200      	movs	r2, #0
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	330b      	adds	r3, #11
 800a006:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a008:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3720      	adds	r7, #32
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	0800be4c 	.word	0x0800be4c
 800a018:	0800bd88 	.word	0x0800bd88

0800a01c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a030:	e002      	b.n	800a038 <follow_path+0x1c>
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	3301      	adds	r3, #1
 800a036:	603b      	str	r3, [r7, #0]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	2b2f      	cmp	r3, #47	@ 0x2f
 800a03e:	d0f8      	beq.n	800a032 <follow_path+0x16>
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	2b5c      	cmp	r3, #92	@ 0x5c
 800a046:	d0f4      	beq.n	800a032 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	2200      	movs	r2, #0
 800a04c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	2b1f      	cmp	r3, #31
 800a054:	d80a      	bhi.n	800a06c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2280      	movs	r2, #128	@ 0x80
 800a05a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800a05e:	2100      	movs	r1, #0
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7ff fcfa 	bl	8009a5a <dir_sdi>
 800a066:	4603      	mov	r3, r0
 800a068:	75fb      	strb	r3, [r7, #23]
 800a06a:	e043      	b.n	800a0f4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a06c:	463b      	mov	r3, r7
 800a06e:	4619      	mov	r1, r3
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f7ff ff3f 	bl	8009ef4 <create_name>
 800a076:	4603      	mov	r3, r0
 800a078:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a07a:	7dfb      	ldrb	r3, [r7, #23]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d134      	bne.n	800a0ea <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f7ff feb0 	bl	8009de6 <dir_find>
 800a086:	4603      	mov	r3, r0
 800a088:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a090:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a092:	7dfb      	ldrb	r3, [r7, #23]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00a      	beq.n	800a0ae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a098:	7dfb      	ldrb	r3, [r7, #23]
 800a09a:	2b04      	cmp	r3, #4
 800a09c:	d127      	bne.n	800a0ee <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a09e:	7afb      	ldrb	r3, [r7, #11]
 800a0a0:	f003 0304 	and.w	r3, r3, #4
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d122      	bne.n	800a0ee <follow_path+0xd2>
 800a0a8:	2305      	movs	r3, #5
 800a0aa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a0ac:	e01f      	b.n	800a0ee <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a0ae:	7afb      	ldrb	r3, [r7, #11]
 800a0b0:	f003 0304 	and.w	r3, r3, #4
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d11c      	bne.n	800a0f2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	799b      	ldrb	r3, [r3, #6]
 800a0bc:	f003 0310 	and.w	r3, r3, #16
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d102      	bne.n	800a0ca <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a0c4:	2305      	movs	r3, #5
 800a0c6:	75fb      	strb	r3, [r7, #23]
 800a0c8:	e014      	b.n	800a0f4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	695b      	ldr	r3, [r3, #20]
 800a0d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d8:	4413      	add	r3, r2
 800a0da:	4619      	mov	r1, r3
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f7ff fe43 	bl	8009d68 <ld_clust>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a0e8:	e7c0      	b.n	800a06c <follow_path+0x50>
			if (res != FR_OK) break;
 800a0ea:	bf00      	nop
 800a0ec:	e002      	b.n	800a0f4 <follow_path+0xd8>
				break;
 800a0ee:	bf00      	nop
 800a0f0:	e000      	b.n	800a0f4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a0f2:	bf00      	nop
			}
		}
	}

	return res;
 800a0f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3718      	adds	r7, #24
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b087      	sub	sp, #28
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a106:	f04f 33ff 	mov.w	r3, #4294967295
 800a10a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d031      	beq.n	800a178 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	617b      	str	r3, [r7, #20]
 800a11a:	e002      	b.n	800a122 <get_ldnumber+0x24>
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	3301      	adds	r3, #1
 800a120:	617b      	str	r3, [r7, #20]
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	2b20      	cmp	r3, #32
 800a128:	d903      	bls.n	800a132 <get_ldnumber+0x34>
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	2b3a      	cmp	r3, #58	@ 0x3a
 800a130:	d1f4      	bne.n	800a11c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	2b3a      	cmp	r3, #58	@ 0x3a
 800a138:	d11c      	bne.n	800a174 <get_ldnumber+0x76>
			tp = *path;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	1c5a      	adds	r2, r3, #1
 800a144:	60fa      	str	r2, [r7, #12]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	3b30      	subs	r3, #48	@ 0x30
 800a14a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2b09      	cmp	r3, #9
 800a150:	d80e      	bhi.n	800a170 <get_ldnumber+0x72>
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	429a      	cmp	r2, r3
 800a158:	d10a      	bne.n	800a170 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d107      	bne.n	800a170 <get_ldnumber+0x72>
					vol = (int)i;
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	3301      	adds	r3, #1
 800a168:	617b      	str	r3, [r7, #20]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	697a      	ldr	r2, [r7, #20]
 800a16e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	e002      	b.n	800a17a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a174:	2300      	movs	r3, #0
 800a176:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a178:	693b      	ldr	r3, [r7, #16]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	371c      	adds	r7, #28
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr
	...

0800a188 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	70da      	strb	r2, [r3, #3]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f04f 32ff 	mov.w	r2, #4294967295
 800a19e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a1a0:	6839      	ldr	r1, [r7, #0]
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7ff f8dc 	bl	8009360 <move_window>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <check_fs+0x2a>
 800a1ae:	2304      	movs	r3, #4
 800a1b0:	e038      	b.n	800a224 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	3330      	adds	r3, #48	@ 0x30
 800a1b6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fe fe20 	bl	8008e00 <ld_word>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d001      	beq.n	800a1d0 <check_fs+0x48>
 800a1cc:	2303      	movs	r3, #3
 800a1ce:	e029      	b.n	800a224 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a1d6:	2be9      	cmp	r3, #233	@ 0xe9
 800a1d8:	d009      	beq.n	800a1ee <check_fs+0x66>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a1e0:	2beb      	cmp	r3, #235	@ 0xeb
 800a1e2:	d11e      	bne.n	800a222 <check_fs+0x9a>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a1ea:	2b90      	cmp	r3, #144	@ 0x90
 800a1ec:	d119      	bne.n	800a222 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	3330      	adds	r3, #48	@ 0x30
 800a1f2:	3336      	adds	r3, #54	@ 0x36
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7fe fe1b 	bl	8008e30 <ld_dword>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a200:	4a0a      	ldr	r2, [pc, #40]	@ (800a22c <check_fs+0xa4>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d101      	bne.n	800a20a <check_fs+0x82>
 800a206:	2300      	movs	r3, #0
 800a208:	e00c      	b.n	800a224 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	3330      	adds	r3, #48	@ 0x30
 800a20e:	3352      	adds	r3, #82	@ 0x52
 800a210:	4618      	mov	r0, r3
 800a212:	f7fe fe0d 	bl	8008e30 <ld_dword>
 800a216:	4603      	mov	r3, r0
 800a218:	4a05      	ldr	r2, [pc, #20]	@ (800a230 <check_fs+0xa8>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d101      	bne.n	800a222 <check_fs+0x9a>
 800a21e:	2300      	movs	r3, #0
 800a220:	e000      	b.n	800a224 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a222:	2302      	movs	r3, #2
}
 800a224:	4618      	mov	r0, r3
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	00544146 	.word	0x00544146
 800a230:	33544146 	.word	0x33544146

0800a234 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b096      	sub	sp, #88	@ 0x58
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	4613      	mov	r3, r2
 800a240:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	2200      	movs	r2, #0
 800a246:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f7ff ff58 	bl	800a0fe <get_ldnumber>
 800a24e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a252:	2b00      	cmp	r3, #0
 800a254:	da01      	bge.n	800a25a <find_volume+0x26>
 800a256:	230b      	movs	r3, #11
 800a258:	e22d      	b.n	800a6b6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a25a:	4aa1      	ldr	r2, [pc, #644]	@ (800a4e0 <find_volume+0x2ac>)
 800a25c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a25e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a262:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a266:	2b00      	cmp	r3, #0
 800a268:	d101      	bne.n	800a26e <find_volume+0x3a>
 800a26a:	230c      	movs	r3, #12
 800a26c:	e223      	b.n	800a6b6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a272:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a274:	79fb      	ldrb	r3, [r7, #7]
 800a276:	f023 0301 	bic.w	r3, r3, #1
 800a27a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d01a      	beq.n	800a2ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a286:	785b      	ldrb	r3, [r3, #1]
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fe fd1b 	bl	8008cc4 <disk_status>
 800a28e:	4603      	mov	r3, r0
 800a290:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a294:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a298:	f003 0301 	and.w	r3, r3, #1
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10c      	bne.n	800a2ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a2a0:	79fb      	ldrb	r3, [r7, #7]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d007      	beq.n	800a2b6 <find_volume+0x82>
 800a2a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a2aa:	f003 0304 	and.w	r3, r3, #4
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a2b2:	230a      	movs	r3, #10
 800a2b4:	e1ff      	b.n	800a6b6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	e1fd      	b.n	800a6b6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2bc:	2200      	movs	r2, #0
 800a2be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a2c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2c2:	b2da      	uxtb	r2, r3
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ca:	785b      	ldrb	r3, [r3, #1]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7fe fd13 	bl	8008cf8 <disk_initialize>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a2d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a2dc:	f003 0301 	and.w	r3, r3, #1
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d001      	beq.n	800a2e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	e1e6      	b.n	800a6b6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a2e8:	79fb      	ldrb	r3, [r7, #7]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d007      	beq.n	800a2fe <find_volume+0xca>
 800a2ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a2f2:	f003 0304 	and.w	r3, r3, #4
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d001      	beq.n	800a2fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a2fa:	230a      	movs	r3, #10
 800a2fc:	e1db      	b.n	800a6b6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a2fe:	2300      	movs	r3, #0
 800a300:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a302:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a304:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a306:	f7ff ff3f 	bl	800a188 <check_fs>
 800a30a:	4603      	mov	r3, r0
 800a30c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a310:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a314:	2b02      	cmp	r3, #2
 800a316:	d149      	bne.n	800a3ac <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a318:	2300      	movs	r3, #0
 800a31a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a31c:	e01e      	b.n	800a35c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a320:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a326:	011b      	lsls	r3, r3, #4
 800a328:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a32c:	4413      	add	r3, r2
 800a32e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a332:	3304      	adds	r3, #4
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d006      	beq.n	800a348 <find_volume+0x114>
 800a33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33c:	3308      	adds	r3, #8
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fe fd76 	bl	8008e30 <ld_dword>
 800a344:	4602      	mov	r2, r0
 800a346:	e000      	b.n	800a34a <find_volume+0x116>
 800a348:	2200      	movs	r2, #0
 800a34a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	3358      	adds	r3, #88	@ 0x58
 800a350:	443b      	add	r3, r7
 800a352:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a356:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a358:	3301      	adds	r3, #1
 800a35a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a35c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a35e:	2b03      	cmp	r3, #3
 800a360:	d9dd      	bls.n	800a31e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a362:	2300      	movs	r3, #0
 800a364:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d002      	beq.n	800a372 <find_volume+0x13e>
 800a36c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a36e:	3b01      	subs	r3, #1
 800a370:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	3358      	adds	r3, #88	@ 0x58
 800a378:	443b      	add	r3, r7
 800a37a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a37e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a380:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a382:	2b00      	cmp	r3, #0
 800a384:	d005      	beq.n	800a392 <find_volume+0x15e>
 800a386:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a388:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a38a:	f7ff fefd 	bl	800a188 <check_fs>
 800a38e:	4603      	mov	r3, r0
 800a390:	e000      	b.n	800a394 <find_volume+0x160>
 800a392:	2303      	movs	r3, #3
 800a394:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a398:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d905      	bls.n	800a3ac <find_volume+0x178>
 800a3a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3a8:	2b03      	cmp	r3, #3
 800a3aa:	d9e2      	bls.n	800a372 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a3ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a3b0:	2b04      	cmp	r3, #4
 800a3b2:	d101      	bne.n	800a3b8 <find_volume+0x184>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e17e      	b.n	800a6b6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a3b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d901      	bls.n	800a3c4 <find_volume+0x190>
 800a3c0:	230d      	movs	r3, #13
 800a3c2:	e178      	b.n	800a6b6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c6:	3330      	adds	r3, #48	@ 0x30
 800a3c8:	330b      	adds	r3, #11
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fe fd18 	bl	8008e00 <ld_word>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3d6:	d001      	beq.n	800a3dc <find_volume+0x1a8>
 800a3d8:	230d      	movs	r3, #13
 800a3da:	e16c      	b.n	800a6b6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3de:	3330      	adds	r3, #48	@ 0x30
 800a3e0:	3316      	adds	r3, #22
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7fe fd0c 	bl	8008e00 <ld_word>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a3ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d106      	bne.n	800a400 <find_volume+0x1cc>
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f4:	3330      	adds	r3, #48	@ 0x30
 800a3f6:	3324      	adds	r3, #36	@ 0x24
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7fe fd19 	bl	8008e30 <ld_dword>
 800a3fe:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a402:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a404:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a408:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800a40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a412:	789b      	ldrb	r3, [r3, #2]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d005      	beq.n	800a424 <find_volume+0x1f0>
 800a418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a41a:	789b      	ldrb	r3, [r3, #2]
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d001      	beq.n	800a424 <find_volume+0x1f0>
 800a420:	230d      	movs	r3, #13
 800a422:	e148      	b.n	800a6b6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a426:	789b      	ldrb	r3, [r3, #2]
 800a428:	461a      	mov	r2, r3
 800a42a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a42c:	fb02 f303 	mul.w	r3, r2, r3
 800a430:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a438:	461a      	mov	r2, r3
 800a43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a440:	895b      	ldrh	r3, [r3, #10]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d008      	beq.n	800a458 <find_volume+0x224>
 800a446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a448:	895b      	ldrh	r3, [r3, #10]
 800a44a:	461a      	mov	r2, r3
 800a44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44e:	895b      	ldrh	r3, [r3, #10]
 800a450:	3b01      	subs	r3, #1
 800a452:	4013      	ands	r3, r2
 800a454:	2b00      	cmp	r3, #0
 800a456:	d001      	beq.n	800a45c <find_volume+0x228>
 800a458:	230d      	movs	r3, #13
 800a45a:	e12c      	b.n	800a6b6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a45e:	3330      	adds	r3, #48	@ 0x30
 800a460:	3311      	adds	r3, #17
 800a462:	4618      	mov	r0, r3
 800a464:	f7fe fccc 	bl	8008e00 <ld_word>
 800a468:	4603      	mov	r3, r0
 800a46a:	461a      	mov	r2, r3
 800a46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a46e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a472:	891b      	ldrh	r3, [r3, #8]
 800a474:	f003 030f 	and.w	r3, r3, #15
 800a478:	b29b      	uxth	r3, r3
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d001      	beq.n	800a482 <find_volume+0x24e>
 800a47e:	230d      	movs	r3, #13
 800a480:	e119      	b.n	800a6b6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a484:	3330      	adds	r3, #48	@ 0x30
 800a486:	3313      	adds	r3, #19
 800a488:	4618      	mov	r0, r3
 800a48a:	f7fe fcb9 	bl	8008e00 <ld_word>
 800a48e:	4603      	mov	r3, r0
 800a490:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a494:	2b00      	cmp	r3, #0
 800a496:	d106      	bne.n	800a4a6 <find_volume+0x272>
 800a498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a49a:	3330      	adds	r3, #48	@ 0x30
 800a49c:	3320      	adds	r3, #32
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe fcc6 	bl	8008e30 <ld_dword>
 800a4a4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a8:	3330      	adds	r3, #48	@ 0x30
 800a4aa:	330e      	adds	r3, #14
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7fe fca7 	bl	8008e00 <ld_word>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a4b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d101      	bne.n	800a4c0 <find_volume+0x28c>
 800a4bc:	230d      	movs	r3, #13
 800a4be:	e0fa      	b.n	800a6b6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a4c0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a4c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4c4:	4413      	add	r3, r2
 800a4c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4c8:	8912      	ldrh	r2, [r2, #8]
 800a4ca:	0912      	lsrs	r2, r2, #4
 800a4cc:	b292      	uxth	r2, r2
 800a4ce:	4413      	add	r3, r2
 800a4d0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a4d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d204      	bcs.n	800a4e4 <find_volume+0x2b0>
 800a4da:	230d      	movs	r3, #13
 800a4dc:	e0eb      	b.n	800a6b6 <find_volume+0x482>
 800a4de:	bf00      	nop
 800a4e0:	20000868 	.word	0x20000868
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a4e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4ec:	8952      	ldrh	r2, [r2, #10]
 800a4ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4f2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d101      	bne.n	800a4fe <find_volume+0x2ca>
 800a4fa:	230d      	movs	r3, #13
 800a4fc:	e0db      	b.n	800a6b6 <find_volume+0x482>
		fmt = FS_FAT32;
 800a4fe:	2303      	movs	r3, #3
 800a500:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a506:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d802      	bhi.n	800a514 <find_volume+0x2e0>
 800a50e:	2302      	movs	r3, #2
 800a510:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a516:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d802      	bhi.n	800a524 <find_volume+0x2f0>
 800a51e:	2301      	movs	r3, #1
 800a520:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a526:	1c9a      	adds	r2, r3, #2
 800a528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a530:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a532:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a534:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a536:	441a      	add	r2, r3
 800a538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a53c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a540:	441a      	add	r2, r3
 800a542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a544:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800a546:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	d11e      	bne.n	800a58c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a550:	3330      	adds	r3, #48	@ 0x30
 800a552:	332a      	adds	r3, #42	@ 0x2a
 800a554:	4618      	mov	r0, r3
 800a556:	f7fe fc53 	bl	8008e00 <ld_word>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <find_volume+0x330>
 800a560:	230d      	movs	r3, #13
 800a562:	e0a8      	b.n	800a6b6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a566:	891b      	ldrh	r3, [r3, #8]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d001      	beq.n	800a570 <find_volume+0x33c>
 800a56c:	230d      	movs	r3, #13
 800a56e:	e0a2      	b.n	800a6b6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a572:	3330      	adds	r3, #48	@ 0x30
 800a574:	332c      	adds	r3, #44	@ 0x2c
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe fc5a 	bl	8008e30 <ld_dword>
 800a57c:	4602      	mov	r2, r0
 800a57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a580:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a584:	695b      	ldr	r3, [r3, #20]
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	647b      	str	r3, [r7, #68]	@ 0x44
 800a58a:	e01f      	b.n	800a5cc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a58e:	891b      	ldrh	r3, [r3, #8]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d101      	bne.n	800a598 <find_volume+0x364>
 800a594:	230d      	movs	r3, #13
 800a596:	e08e      	b.n	800a6b6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59a:	6a1a      	ldr	r2, [r3, #32]
 800a59c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a59e:	441a      	add	r2, r3
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a5a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d103      	bne.n	800a5b4 <find_volume+0x380>
 800a5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ae:	695b      	ldr	r3, [r3, #20]
 800a5b0:	005b      	lsls	r3, r3, #1
 800a5b2:	e00a      	b.n	800a5ca <find_volume+0x396>
 800a5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b6:	695a      	ldr	r2, [r3, #20]
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	005b      	lsls	r3, r3, #1
 800a5bc:	4413      	add	r3, r2
 800a5be:	085a      	lsrs	r2, r3, #1
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c2:	695b      	ldr	r3, [r3, #20]
 800a5c4:	f003 0301 	and.w	r3, r3, #1
 800a5c8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a5ca:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ce:	699a      	ldr	r2, [r3, #24]
 800a5d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5d2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800a5d6:	0a5b      	lsrs	r3, r3, #9
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d201      	bcs.n	800a5e0 <find_volume+0x3ac>
 800a5dc:	230d      	movs	r3, #13
 800a5de:	e06a      	b.n	800a6b6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e6:	611a      	str	r2, [r3, #16]
 800a5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ea:	691a      	ldr	r2, [r3, #16]
 800a5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ee:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f2:	2280      	movs	r2, #128	@ 0x80
 800a5f4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a5f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	d149      	bne.n	800a692 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a600:	3330      	adds	r3, #48	@ 0x30
 800a602:	3330      	adds	r3, #48	@ 0x30
 800a604:	4618      	mov	r0, r3
 800a606:	f7fe fbfb 	bl	8008e00 <ld_word>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d140      	bne.n	800a692 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a610:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a612:	3301      	adds	r3, #1
 800a614:	4619      	mov	r1, r3
 800a616:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a618:	f7fe fea2 	bl	8009360 <move_window>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d137      	bne.n	800a692 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a624:	2200      	movs	r2, #0
 800a626:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a62a:	3330      	adds	r3, #48	@ 0x30
 800a62c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a630:	4618      	mov	r0, r3
 800a632:	f7fe fbe5 	bl	8008e00 <ld_word>
 800a636:	4603      	mov	r3, r0
 800a638:	461a      	mov	r2, r3
 800a63a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a63e:	429a      	cmp	r2, r3
 800a640:	d127      	bne.n	800a692 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a644:	3330      	adds	r3, #48	@ 0x30
 800a646:	4618      	mov	r0, r3
 800a648:	f7fe fbf2 	bl	8008e30 <ld_dword>
 800a64c:	4603      	mov	r3, r0
 800a64e:	4a1c      	ldr	r2, [pc, #112]	@ (800a6c0 <find_volume+0x48c>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d11e      	bne.n	800a692 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a656:	3330      	adds	r3, #48	@ 0x30
 800a658:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7fe fbe7 	bl	8008e30 <ld_dword>
 800a662:	4603      	mov	r3, r0
 800a664:	4a17      	ldr	r2, [pc, #92]	@ (800a6c4 <find_volume+0x490>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d113      	bne.n	800a692 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a66c:	3330      	adds	r3, #48	@ 0x30
 800a66e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a672:	4618      	mov	r0, r3
 800a674:	f7fe fbdc 	bl	8008e30 <ld_dword>
 800a678:	4602      	mov	r2, r0
 800a67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a67c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a680:	3330      	adds	r3, #48	@ 0x30
 800a682:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a686:	4618      	mov	r0, r3
 800a688:	f7fe fbd2 	bl	8008e30 <ld_dword>
 800a68c:	4602      	mov	r2, r0
 800a68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a690:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a694:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a698:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a69a:	4b0b      	ldr	r3, [pc, #44]	@ (800a6c8 <find_volume+0x494>)
 800a69c:	881b      	ldrh	r3, [r3, #0]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	4b09      	ldr	r3, [pc, #36]	@ (800a6c8 <find_volume+0x494>)
 800a6a4:	801a      	strh	r2, [r3, #0]
 800a6a6:	4b08      	ldr	r3, [pc, #32]	@ (800a6c8 <find_volume+0x494>)
 800a6a8:	881a      	ldrh	r2, [r3, #0]
 800a6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ac:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a6ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a6b0:	f7fe fdee 	bl	8009290 <clear_lock>
#endif
	return FR_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3758      	adds	r7, #88	@ 0x58
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	41615252 	.word	0x41615252
 800a6c4:	61417272 	.word	0x61417272
 800a6c8:	2000086c 	.word	0x2000086c

0800a6cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a6d6:	2309      	movs	r3, #9
 800a6d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d01c      	beq.n	800a71a <validate+0x4e>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d018      	beq.n	800a71a <validate+0x4e>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d013      	beq.n	800a71a <validate+0x4e>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	889a      	ldrh	r2, [r3, #4]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	88db      	ldrh	r3, [r3, #6]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d10c      	bne.n	800a71a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	785b      	ldrb	r3, [r3, #1]
 800a706:	4618      	mov	r0, r3
 800a708:	f7fe fadc 	bl	8008cc4 <disk_status>
 800a70c:	4603      	mov	r3, r0
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	2b00      	cmp	r3, #0
 800a714:	d101      	bne.n	800a71a <validate+0x4e>
			res = FR_OK;
 800a716:	2300      	movs	r3, #0
 800a718:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a71a:	7bfb      	ldrb	r3, [r7, #15]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d102      	bne.n	800a726 <validate+0x5a>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	e000      	b.n	800a728 <validate+0x5c>
 800a726:	2300      	movs	r3, #0
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	6013      	str	r3, [r2, #0]
	return res;
 800a72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
	...

0800a738 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b088      	sub	sp, #32
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	4613      	mov	r3, r2
 800a744:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a74a:	f107 0310 	add.w	r3, r7, #16
 800a74e:	4618      	mov	r0, r3
 800a750:	f7ff fcd5 	bl	800a0fe <get_ldnumber>
 800a754:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	da01      	bge.n	800a760 <f_mount+0x28>
 800a75c:	230b      	movs	r3, #11
 800a75e:	e02b      	b.n	800a7b8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a760:	4a17      	ldr	r2, [pc, #92]	@ (800a7c0 <f_mount+0x88>)
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a768:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d005      	beq.n	800a77c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a770:	69b8      	ldr	r0, [r7, #24]
 800a772:	f7fe fd8d 	bl	8009290 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	2200      	movs	r2, #0
 800a77a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d002      	beq.n	800a788 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	490d      	ldr	r1, [pc, #52]	@ (800a7c0 <f_mount+0x88>)
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d002      	beq.n	800a79e <f_mount+0x66>
 800a798:	79fb      	ldrb	r3, [r7, #7]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d001      	beq.n	800a7a2 <f_mount+0x6a>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	e00a      	b.n	800a7b8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a7a2:	f107 010c 	add.w	r1, r7, #12
 800a7a6:	f107 0308 	add.w	r3, r7, #8
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7ff fd41 	bl	800a234 <find_volume>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a7b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3720      	adds	r7, #32
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	20000868 	.word	0x20000868

0800a7c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b098      	sub	sp, #96	@ 0x60
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d101      	bne.n	800a7dc <f_open+0x18>
 800a7d8:	2309      	movs	r3, #9
 800a7da:	e1a9      	b.n	800ab30 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a7dc:	79fb      	ldrb	r3, [r7, #7]
 800a7de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a7e2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a7e4:	79fa      	ldrb	r2, [r7, #7]
 800a7e6:	f107 0110 	add.w	r1, r7, #16
 800a7ea:	f107 0308 	add.w	r3, r7, #8
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7ff fd20 	bl	800a234 <find_volume>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800a7fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f040 818d 	bne.w	800ab1e <f_open+0x35a>
		dj.obj.fs = fs;
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a808:	68ba      	ldr	r2, [r7, #8]
 800a80a:	f107 0314 	add.w	r3, r7, #20
 800a80e:	4611      	mov	r1, r2
 800a810:	4618      	mov	r0, r3
 800a812:	f7ff fc03 	bl	800a01c <follow_path>
 800a816:	4603      	mov	r3, r0
 800a818:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a81c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a820:	2b00      	cmp	r3, #0
 800a822:	d118      	bne.n	800a856 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a824:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a828:	b25b      	sxtb	r3, r3
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	da03      	bge.n	800a836 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a82e:	2306      	movs	r3, #6
 800a830:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a834:	e00f      	b.n	800a856 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a836:	79fb      	ldrb	r3, [r7, #7]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	bf8c      	ite	hi
 800a83c:	2301      	movhi	r3, #1
 800a83e:	2300      	movls	r3, #0
 800a840:	b2db      	uxtb	r3, r3
 800a842:	461a      	mov	r2, r3
 800a844:	f107 0314 	add.w	r3, r7, #20
 800a848:	4611      	mov	r1, r2
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fe fbd8 	bl	8009000 <chk_lock>
 800a850:	4603      	mov	r3, r0
 800a852:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a856:	79fb      	ldrb	r3, [r7, #7]
 800a858:	f003 031c 	and.w	r3, r3, #28
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d07f      	beq.n	800a960 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a860:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a864:	2b00      	cmp	r3, #0
 800a866:	d017      	beq.n	800a898 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a868:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a86c:	2b04      	cmp	r3, #4
 800a86e:	d10e      	bne.n	800a88e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a870:	f7fe fc22 	bl	80090b8 <enq_lock>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d006      	beq.n	800a888 <f_open+0xc4>
 800a87a:	f107 0314 	add.w	r3, r7, #20
 800a87e:	4618      	mov	r0, r3
 800a880:	f7ff fb06 	bl	8009e90 <dir_register>
 800a884:	4603      	mov	r3, r0
 800a886:	e000      	b.n	800a88a <f_open+0xc6>
 800a888:	2312      	movs	r3, #18
 800a88a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a88e:	79fb      	ldrb	r3, [r7, #7]
 800a890:	f043 0308 	orr.w	r3, r3, #8
 800a894:	71fb      	strb	r3, [r7, #7]
 800a896:	e010      	b.n	800a8ba <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a898:	7ebb      	ldrb	r3, [r7, #26]
 800a89a:	f003 0311 	and.w	r3, r3, #17
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d003      	beq.n	800a8aa <f_open+0xe6>
					res = FR_DENIED;
 800a8a2:	2307      	movs	r3, #7
 800a8a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a8a8:	e007      	b.n	800a8ba <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a8aa:	79fb      	ldrb	r3, [r7, #7]
 800a8ac:	f003 0304 	and.w	r3, r3, #4
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d002      	beq.n	800a8ba <f_open+0xf6>
 800a8b4:	2308      	movs	r3, #8
 800a8b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a8ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d168      	bne.n	800a994 <f_open+0x1d0>
 800a8c2:	79fb      	ldrb	r3, [r7, #7]
 800a8c4:	f003 0308 	and.w	r3, r3, #8
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d063      	beq.n	800a994 <f_open+0x1d0>
				dw = GET_FATTIME();
 800a8cc:	f7fd fcc2 	bl	8008254 <get_fattime>
 800a8d0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a8d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8d4:	330e      	adds	r3, #14
 800a8d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7fe fae7 	bl	8008eac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a8de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8e0:	3316      	adds	r3, #22
 800a8e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7fe fae1 	bl	8008eac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a8ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ec:	330b      	adds	r3, #11
 800a8ee:	2220      	movs	r2, #32
 800a8f0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7ff fa35 	bl	8009d68 <ld_clust>
 800a8fe:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a904:	2200      	movs	r2, #0
 800a906:	4618      	mov	r0, r3
 800a908:	f7ff fa4d 	bl	8009da6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a90c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a90e:	331c      	adds	r3, #28
 800a910:	2100      	movs	r1, #0
 800a912:	4618      	mov	r0, r3
 800a914:	f7fe faca 	bl	8008eac <st_dword>
					fs->wflag = 1;
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	2201      	movs	r2, #1
 800a91c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a91e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a920:	2b00      	cmp	r3, #0
 800a922:	d037      	beq.n	800a994 <f_open+0x1d0>
						dw = fs->winsect;
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a928:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a92a:	f107 0314 	add.w	r3, r7, #20
 800a92e:	2200      	movs	r2, #0
 800a930:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a932:	4618      	mov	r0, r3
 800a934:	f7fe ff60 	bl	80097f8 <remove_chain>
 800a938:	4603      	mov	r3, r0
 800a93a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800a93e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a942:	2b00      	cmp	r3, #0
 800a944:	d126      	bne.n	800a994 <f_open+0x1d0>
							res = move_window(fs, dw);
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fe fd08 	bl	8009360 <move_window>
 800a950:	4603      	mov	r3, r0
 800a952:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a95a:	3a01      	subs	r2, #1
 800a95c:	60da      	str	r2, [r3, #12]
 800a95e:	e019      	b.n	800a994 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a960:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a964:	2b00      	cmp	r3, #0
 800a966:	d115      	bne.n	800a994 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a968:	7ebb      	ldrb	r3, [r7, #26]
 800a96a:	f003 0310 	and.w	r3, r3, #16
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d003      	beq.n	800a97a <f_open+0x1b6>
					res = FR_NO_FILE;
 800a972:	2304      	movs	r3, #4
 800a974:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a978:	e00c      	b.n	800a994 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a97a:	79fb      	ldrb	r3, [r7, #7]
 800a97c:	f003 0302 	and.w	r3, r3, #2
 800a980:	2b00      	cmp	r3, #0
 800a982:	d007      	beq.n	800a994 <f_open+0x1d0>
 800a984:	7ebb      	ldrb	r3, [r7, #26]
 800a986:	f003 0301 	and.w	r3, r3, #1
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d002      	beq.n	800a994 <f_open+0x1d0>
						res = FR_DENIED;
 800a98e:	2307      	movs	r3, #7
 800a990:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a994:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d126      	bne.n	800a9ea <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a99c:	79fb      	ldrb	r3, [r7, #7]
 800a99e:	f003 0308 	and.w	r3, r3, #8
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d003      	beq.n	800a9ae <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a9a6:	79fb      	ldrb	r3, [r7, #7]
 800a9a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9ac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a9b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a9bc:	79fb      	ldrb	r3, [r7, #7]
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	bf8c      	ite	hi
 800a9c2:	2301      	movhi	r3, #1
 800a9c4:	2300      	movls	r3, #0
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	f107 0314 	add.w	r3, r7, #20
 800a9ce:	4611      	mov	r1, r2
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7fe fb93 	bl	80090fc <inc_lock>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d102      	bne.n	800a9ea <f_open+0x226>
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a9ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f040 8095 	bne.w	800ab1e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7ff f9b4 	bl	8009d68 <ld_clust>
 800aa00:	4602      	mov	r2, r0
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aa06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa08:	331c      	adds	r3, #28
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fe fa10 	bl	8008e30 <ld_dword>
 800aa10:	4602      	mov	r2, r0
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aa1c:	693a      	ldr	r2, [r7, #16]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	88da      	ldrh	r2, [r3, #6]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	79fa      	ldrb	r2, [r7, #7]
 800aa2e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2200      	movs	r2, #0
 800aa34:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	3330      	adds	r3, #48	@ 0x30
 800aa46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7fe fa7a 	bl	8008f46 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800aa52:	79fb      	ldrb	r3, [r7, #7]
 800aa54:	f003 0320 	and.w	r3, r3, #32
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d060      	beq.n	800ab1e <f_open+0x35a>
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d05c      	beq.n	800ab1e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	68da      	ldr	r2, [r3, #12]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	895b      	ldrh	r3, [r3, #10]
 800aa70:	025b      	lsls	r3, r3, #9
 800aa72:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa80:	e016      	b.n	800aab0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7fe fd25 	bl	80094d6 <get_fat>
 800aa8c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800aa8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d802      	bhi.n	800aa9a <f_open+0x2d6>
 800aa94:	2302      	movs	r3, #2
 800aa96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800aa9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aa9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaa0:	d102      	bne.n	800aaa8 <f_open+0x2e4>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aaa8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aaaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	657b      	str	r3, [r7, #84]	@ 0x54
 800aab0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d103      	bne.n	800aac0 <f_open+0x2fc>
 800aab8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aaba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d8e0      	bhi.n	800aa82 <f_open+0x2be>
				}
				fp->clust = clst;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aac4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800aac6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d127      	bne.n	800ab1e <f_open+0x35a>
 800aace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d022      	beq.n	800ab1e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800aadc:	4618      	mov	r0, r3
 800aade:	f7fe fcdb 	bl	8009498 <clust2sect>
 800aae2:	6478      	str	r0, [r7, #68]	@ 0x44
 800aae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d103      	bne.n	800aaf2 <f_open+0x32e>
						res = FR_INT_ERR;
 800aaea:	2302      	movs	r3, #2
 800aaec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800aaf0:	e015      	b.n	800ab1e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800aaf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aaf4:	0a5a      	lsrs	r2, r3, #9
 800aaf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aaf8:	441a      	add	r2, r3
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	7858      	ldrb	r0, [r3, #1]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6a1a      	ldr	r2, [r3, #32]
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	f7fe f919 	bl	8008d44 <disk_read>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <f_open+0x35a>
 800ab18:	2301      	movs	r3, #1
 800ab1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ab1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d002      	beq.n	800ab2c <f_open+0x368>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ab2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3760      	adds	r7, #96	@ 0x60
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b08c      	sub	sp, #48	@ 0x30
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	607a      	str	r2, [r7, #4]
 800ab44:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f107 0210 	add.w	r2, r7, #16
 800ab56:	4611      	mov	r1, r2
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7ff fdb7 	bl	800a6cc <validate>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ab64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d107      	bne.n	800ab7c <f_write+0x44>
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	7d5b      	ldrb	r3, [r3, #21]
 800ab70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ab74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <f_write+0x4a>
 800ab7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ab80:	e14b      	b.n	800ae1a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	7d1b      	ldrb	r3, [r3, #20]
 800ab86:	f003 0302 	and.w	r3, r3, #2
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d101      	bne.n	800ab92 <f_write+0x5a>
 800ab8e:	2307      	movs	r3, #7
 800ab90:	e143      	b.n	800ae1a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	699a      	ldr	r2, [r3, #24]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	441a      	add	r2, r3
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	f080 812d 	bcs.w	800adfe <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	43db      	mvns	r3, r3
 800abaa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800abac:	e127      	b.n	800adfe <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	f040 80e3 	bne.w	800ad82 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	699b      	ldr	r3, [r3, #24]
 800abc0:	0a5b      	lsrs	r3, r3, #9
 800abc2:	693a      	ldr	r2, [r7, #16]
 800abc4:	8952      	ldrh	r2, [r2, #10]
 800abc6:	3a01      	subs	r2, #1
 800abc8:	4013      	ands	r3, r2
 800abca:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d143      	bne.n	800ac5a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	699b      	ldr	r3, [r3, #24]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10c      	bne.n	800abf4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800abe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d11a      	bne.n	800ac1c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2100      	movs	r1, #0
 800abea:	4618      	mov	r0, r3
 800abec:	f7fe fe69 	bl	80098c2 <create_chain>
 800abf0:	62b8      	str	r0, [r7, #40]	@ 0x28
 800abf2:	e013      	b.n	800ac1c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d007      	beq.n	800ac0c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	699b      	ldr	r3, [r3, #24]
 800ac00:	4619      	mov	r1, r3
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f7fe fef5 	bl	80099f2 <clmt_clust>
 800ac08:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ac0a:	e007      	b.n	800ac1c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	69db      	ldr	r3, [r3, #28]
 800ac12:	4619      	mov	r1, r3
 800ac14:	4610      	mov	r0, r2
 800ac16:	f7fe fe54 	bl	80098c2 <create_chain>
 800ac1a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ac1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f000 80f2 	beq.w	800ae08 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ac24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d104      	bne.n	800ac34 <f_write+0xfc>
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2202      	movs	r2, #2
 800ac2e:	755a      	strb	r2, [r3, #21]
 800ac30:	2302      	movs	r3, #2
 800ac32:	e0f2      	b.n	800ae1a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ac34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac3a:	d104      	bne.n	800ac46 <f_write+0x10e>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	755a      	strb	r2, [r3, #21]
 800ac42:	2301      	movs	r3, #1
 800ac44:	e0e9      	b.n	800ae1a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac4a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d102      	bne.n	800ac5a <f_write+0x122>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac58:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	7d1b      	ldrb	r3, [r3, #20]
 800ac5e:	b25b      	sxtb	r3, r3
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	da18      	bge.n	800ac96 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	7858      	ldrb	r0, [r3, #1]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6a1a      	ldr	r2, [r3, #32]
 800ac72:	2301      	movs	r3, #1
 800ac74:	f7fe f886 	bl	8008d84 <disk_write>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d004      	beq.n	800ac88 <f_write+0x150>
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2201      	movs	r2, #1
 800ac82:	755a      	strb	r2, [r3, #21]
 800ac84:	2301      	movs	r3, #1
 800ac86:	e0c8      	b.n	800ae1a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	7d1b      	ldrb	r3, [r3, #20]
 800ac8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac90:	b2da      	uxtb	r2, r3
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ac96:	693a      	ldr	r2, [r7, #16]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	69db      	ldr	r3, [r3, #28]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	4610      	mov	r0, r2
 800aca0:	f7fe fbfa 	bl	8009498 <clust2sect>
 800aca4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d104      	bne.n	800acb6 <f_write+0x17e>
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2202      	movs	r2, #2
 800acb0:	755a      	strb	r2, [r3, #21]
 800acb2:	2302      	movs	r3, #2
 800acb4:	e0b1      	b.n	800ae1a <f_write+0x2e2>
			sect += csect;
 800acb6:	697a      	ldr	r2, [r7, #20]
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	4413      	add	r3, r2
 800acbc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	0a5b      	lsrs	r3, r3, #9
 800acc2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800acc4:	6a3b      	ldr	r3, [r7, #32]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d03c      	beq.n	800ad44 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800acca:	69ba      	ldr	r2, [r7, #24]
 800accc:	6a3b      	ldr	r3, [r7, #32]
 800acce:	4413      	add	r3, r2
 800acd0:	693a      	ldr	r2, [r7, #16]
 800acd2:	8952      	ldrh	r2, [r2, #10]
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d905      	bls.n	800ace4 <f_write+0x1ac>
					cc = fs->csize - csect;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	895b      	ldrh	r3, [r3, #10]
 800acdc:	461a      	mov	r2, r3
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	7858      	ldrb	r0, [r3, #1]
 800ace8:	6a3b      	ldr	r3, [r7, #32]
 800acea:	697a      	ldr	r2, [r7, #20]
 800acec:	69f9      	ldr	r1, [r7, #28]
 800acee:	f7fe f849 	bl	8008d84 <disk_write>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d004      	beq.n	800ad02 <f_write+0x1ca>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2201      	movs	r2, #1
 800acfc:	755a      	strb	r2, [r3, #21]
 800acfe:	2301      	movs	r3, #1
 800ad00:	e08b      	b.n	800ae1a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	6a1a      	ldr	r2, [r3, #32]
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	6a3a      	ldr	r2, [r7, #32]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d915      	bls.n	800ad3c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6a1a      	ldr	r2, [r3, #32]
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	1ad3      	subs	r3, r2, r3
 800ad1e:	025b      	lsls	r3, r3, #9
 800ad20:	69fa      	ldr	r2, [r7, #28]
 800ad22:	4413      	add	r3, r2
 800ad24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ad28:	4619      	mov	r1, r3
 800ad2a:	f7fe f8eb 	bl	8008f04 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	7d1b      	ldrb	r3, [r3, #20]
 800ad32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ad3c:	6a3b      	ldr	r3, [r7, #32]
 800ad3e:	025b      	lsls	r3, r3, #9
 800ad40:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800ad42:	e03f      	b.n	800adc4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6a1b      	ldr	r3, [r3, #32]
 800ad48:	697a      	ldr	r2, [r7, #20]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d016      	beq.n	800ad7c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	699a      	ldr	r2, [r3, #24]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d210      	bcs.n	800ad7c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	7858      	ldrb	r0, [r3, #1]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ad64:	2301      	movs	r3, #1
 800ad66:	697a      	ldr	r2, [r7, #20]
 800ad68:	f7fd ffec 	bl	8008d44 <disk_read>
 800ad6c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d004      	beq.n	800ad7c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2201      	movs	r2, #1
 800ad76:	755a      	strb	r2, [r3, #21]
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e04e      	b.n	800ae1a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	697a      	ldr	r2, [r7, #20]
 800ad80:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	699b      	ldr	r3, [r3, #24]
 800ad86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ad8e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ad90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d901      	bls.n	800ad9c <f_write+0x264>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	699b      	ldr	r3, [r3, #24]
 800ada6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adaa:	4413      	add	r3, r2
 800adac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adae:	69f9      	ldr	r1, [r7, #28]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7fe f8a7 	bl	8008f04 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	7d1b      	ldrb	r3, [r3, #20]
 800adba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800adbe:	b2da      	uxtb	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800adc4:	69fa      	ldr	r2, [r7, #28]
 800adc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc8:	4413      	add	r3, r2
 800adca:	61fb      	str	r3, [r7, #28]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	699a      	ldr	r2, [r3, #24]
 800add0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add2:	441a      	add	r2, r3
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	619a      	str	r2, [r3, #24]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	68da      	ldr	r2, [r3, #12]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	699b      	ldr	r3, [r3, #24]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	bf38      	it	cc
 800ade4:	461a      	movcc	r2, r3
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	60da      	str	r2, [r3, #12]
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf0:	441a      	add	r2, r3
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	601a      	str	r2, [r3, #0]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f47f aed4 	bne.w	800abae <f_write+0x76>
 800ae06:	e000      	b.n	800ae0a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ae08:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	7d1b      	ldrb	r3, [r3, #20]
 800ae0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae12:	b2da      	uxtb	r2, r3
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3730      	adds	r7, #48	@ 0x30
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}

0800ae22 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b086      	sub	sp, #24
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f107 0208 	add.w	r2, r7, #8
 800ae30:	4611      	mov	r1, r2
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7ff fc4a 	bl	800a6cc <validate>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ae3c:	7dfb      	ldrb	r3, [r7, #23]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d168      	bne.n	800af14 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	7d1b      	ldrb	r3, [r3, #20]
 800ae46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d062      	beq.n	800af14 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	7d1b      	ldrb	r3, [r3, #20]
 800ae52:	b25b      	sxtb	r3, r3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	da15      	bge.n	800ae84 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	7858      	ldrb	r0, [r3, #1]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a1a      	ldr	r2, [r3, #32]
 800ae66:	2301      	movs	r3, #1
 800ae68:	f7fd ff8c 	bl	8008d84 <disk_write>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d001      	beq.n	800ae76 <f_sync+0x54>
 800ae72:	2301      	movs	r3, #1
 800ae74:	e04f      	b.n	800af16 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	7d1b      	ldrb	r3, [r3, #20]
 800ae7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae7e:	b2da      	uxtb	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ae84:	f7fd f9e6 	bl	8008254 <get_fattime>
 800ae88:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ae8a:	68ba      	ldr	r2, [r7, #8]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae90:	4619      	mov	r1, r3
 800ae92:	4610      	mov	r0, r2
 800ae94:	f7fe fa64 	bl	8009360 <move_window>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ae9c:	7dfb      	ldrb	r3, [r7, #23]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d138      	bne.n	800af14 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aea6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	330b      	adds	r3, #11
 800aeac:	781a      	ldrb	r2, [r3, #0]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	330b      	adds	r3, #11
 800aeb2:	f042 0220 	orr.w	r2, r2, #32
 800aeb6:	b2d2      	uxtb	r2, r2
 800aeb8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6818      	ldr	r0, [r3, #0]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	461a      	mov	r2, r3
 800aec4:	68f9      	ldr	r1, [r7, #12]
 800aec6:	f7fe ff6e 	bl	8009da6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f103 021c 	add.w	r2, r3, #28
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	4619      	mov	r1, r3
 800aed6:	4610      	mov	r0, r2
 800aed8:	f7fd ffe8 	bl	8008eac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	3316      	adds	r3, #22
 800aee0:	6939      	ldr	r1, [r7, #16]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fd ffe2 	bl	8008eac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	3312      	adds	r3, #18
 800aeec:	2100      	movs	r1, #0
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fd ffc1 	bl	8008e76 <st_word>
					fs->wflag = 1;
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	2201      	movs	r2, #1
 800aef8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fe fa5d 	bl	80093bc <sync_fs>
 800af02:	4603      	mov	r3, r0
 800af04:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	7d1b      	ldrb	r3, [r3, #20]
 800af0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af0e:	b2da      	uxtb	r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800af14:	7dfb      	ldrb	r3, [r7, #23]
}
 800af16:	4618      	mov	r0, r3
 800af18:	3718      	adds	r7, #24
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b084      	sub	sp, #16
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f7ff ff7b 	bl	800ae22 <f_sync>
 800af2c:	4603      	mov	r3, r0
 800af2e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800af30:	7bfb      	ldrb	r3, [r7, #15]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d118      	bne.n	800af68 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f107 0208 	add.w	r2, r7, #8
 800af3c:	4611      	mov	r1, r2
 800af3e:	4618      	mov	r0, r3
 800af40:	f7ff fbc4 	bl	800a6cc <validate>
 800af44:	4603      	mov	r3, r0
 800af46:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800af48:	7bfb      	ldrb	r3, [r7, #15]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10c      	bne.n	800af68 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	4618      	mov	r0, r3
 800af54:	f7fe f960 	bl	8009218 <dec_lock>
 800af58:	4603      	mov	r3, r0
 800af5a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d102      	bne.n	800af68 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800af68:	7bfb      	ldrb	r3, [r7, #15]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b092      	sub	sp, #72	@ 0x48
 800af76:	af00      	add	r7, sp, #0
 800af78:	60f8      	str	r0, [r7, #12]
 800af7a:	60b9      	str	r1, [r7, #8]
 800af7c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800af7e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800af82:	f107 030c 	add.w	r3, r7, #12
 800af86:	2200      	movs	r2, #0
 800af88:	4618      	mov	r0, r3
 800af8a:	f7ff f953 	bl	800a234 <find_volume>
 800af8e:	4603      	mov	r3, r0
 800af90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800af94:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f040 8099 	bne.w	800b0d0 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800af9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800afa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa6:	691a      	ldr	r2, [r3, #16]
 800afa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afaa:	695b      	ldr	r3, [r3, #20]
 800afac:	3b02      	subs	r3, #2
 800afae:	429a      	cmp	r2, r3
 800afb0:	d804      	bhi.n	800afbc <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800afb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb4:	691a      	ldr	r2, [r3, #16]
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	601a      	str	r2, [r3, #0]
 800afba:	e089      	b.n	800b0d0 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800afbc:	2300      	movs	r3, #0
 800afbe:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800afc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d128      	bne.n	800b01a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800afc8:	2302      	movs	r3, #2
 800afca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afce:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800afd0:	f107 0314 	add.w	r3, r7, #20
 800afd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fe fa7d 	bl	80094d6 <get_fat>
 800afdc:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800afde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afe4:	d103      	bne.n	800afee <f_getfree+0x7c>
 800afe6:	2301      	movs	r3, #1
 800afe8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800afec:	e063      	b.n	800b0b6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800afee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d103      	bne.n	800affc <f_getfree+0x8a>
 800aff4:	2302      	movs	r3, #2
 800aff6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800affa:	e05c      	b.n	800b0b6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800affc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800affe:	2b00      	cmp	r3, #0
 800b000:	d102      	bne.n	800b008 <f_getfree+0x96>
 800b002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b004:	3301      	adds	r3, #1
 800b006:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800b008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b00a:	3301      	adds	r3, #1
 800b00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b010:	695b      	ldr	r3, [r3, #20]
 800b012:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b014:	429a      	cmp	r2, r3
 800b016:	d3db      	bcc.n	800afd0 <f_getfree+0x5e>
 800b018:	e04d      	b.n	800b0b6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b01c:	695b      	ldr	r3, [r3, #20]
 800b01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b022:	6a1b      	ldr	r3, [r3, #32]
 800b024:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800b026:	2300      	movs	r3, #0
 800b028:	637b      	str	r3, [r7, #52]	@ 0x34
 800b02a:	2300      	movs	r3, #0
 800b02c:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800b02e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b030:	2b00      	cmp	r3, #0
 800b032:	d113      	bne.n	800b05c <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b034:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b038:	1c5a      	adds	r2, r3, #1
 800b03a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b03c:	4619      	mov	r1, r3
 800b03e:	f7fe f98f 	bl	8009360 <move_window>
 800b042:	4603      	mov	r3, r0
 800b044:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800b048:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d131      	bne.n	800b0b4 <f_getfree+0x142>
							p = fs->win;
 800b050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b052:	3330      	adds	r3, #48	@ 0x30
 800b054:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800b056:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b05a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	2b02      	cmp	r3, #2
 800b062:	d10f      	bne.n	800b084 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b064:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b066:	f7fd fecb 	bl	8008e00 <ld_word>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d102      	bne.n	800b076 <f_getfree+0x104>
 800b070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b072:	3301      	adds	r3, #1
 800b074:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800b076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b078:	3302      	adds	r3, #2
 800b07a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b07c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b07e:	3b02      	subs	r3, #2
 800b080:	637b      	str	r3, [r7, #52]	@ 0x34
 800b082:	e010      	b.n	800b0a6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b084:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b086:	f7fd fed3 	bl	8008e30 <ld_dword>
 800b08a:	4603      	mov	r3, r0
 800b08c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b090:	2b00      	cmp	r3, #0
 800b092:	d102      	bne.n	800b09a <f_getfree+0x128>
 800b094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b096:	3301      	adds	r3, #1
 800b098:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800b09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b09c:	3304      	adds	r3, #4
 800b09e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0a2:	3b04      	subs	r3, #4
 800b0a4:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800b0a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1bd      	bne.n	800b02e <f_getfree+0xbc>
 800b0b2:	e000      	b.n	800b0b6 <f_getfree+0x144>
							if (res != FR_OK) break;
 800b0b4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b0ba:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b0c0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c4:	791a      	ldrb	r2, [r3, #4]
 800b0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c8:	f042 0201 	orr.w	r2, r2, #1
 800b0cc:	b2d2      	uxtb	r2, r2
 800b0ce:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b0d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3748      	adds	r7, #72	@ 0x48
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b087      	sub	sp, #28
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b0f2:	4b1f      	ldr	r3, [pc, #124]	@ (800b170 <FATFS_LinkDriverEx+0x94>)
 800b0f4:	7a5b      	ldrb	r3, [r3, #9]
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d131      	bne.n	800b160 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b0fc:	4b1c      	ldr	r3, [pc, #112]	@ (800b170 <FATFS_LinkDriverEx+0x94>)
 800b0fe:	7a5b      	ldrb	r3, [r3, #9]
 800b100:	b2db      	uxtb	r3, r3
 800b102:	461a      	mov	r2, r3
 800b104:	4b1a      	ldr	r3, [pc, #104]	@ (800b170 <FATFS_LinkDriverEx+0x94>)
 800b106:	2100      	movs	r1, #0
 800b108:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b10a:	4b19      	ldr	r3, [pc, #100]	@ (800b170 <FATFS_LinkDriverEx+0x94>)
 800b10c:	7a5b      	ldrb	r3, [r3, #9]
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	4a17      	ldr	r2, [pc, #92]	@ (800b170 <FATFS_LinkDriverEx+0x94>)
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	4413      	add	r3, r2
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b11a:	4b15      	ldr	r3, [pc, #84]	@ (800b170 <FATFS_LinkDriverEx+0x94>)
 800b11c:	7a5b      	ldrb	r3, [r3, #9]
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	461a      	mov	r2, r3
 800b122:	4b13      	ldr	r3, [pc, #76]	@ (800b170 <FATFS_LinkDriverEx+0x94>)
 800b124:	4413      	add	r3, r2
 800b126:	79fa      	ldrb	r2, [r7, #7]
 800b128:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b12a:	4b11      	ldr	r3, [pc, #68]	@ (800b170 <FATFS_LinkDriverEx+0x94>)
 800b12c:	7a5b      	ldrb	r3, [r3, #9]
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	1c5a      	adds	r2, r3, #1
 800b132:	b2d1      	uxtb	r1, r2
 800b134:	4a0e      	ldr	r2, [pc, #56]	@ (800b170 <FATFS_LinkDriverEx+0x94>)
 800b136:	7251      	strb	r1, [r2, #9]
 800b138:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b13a:	7dbb      	ldrb	r3, [r7, #22]
 800b13c:	3330      	adds	r3, #48	@ 0x30
 800b13e:	b2da      	uxtb	r2, r3
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	3301      	adds	r3, #1
 800b148:	223a      	movs	r2, #58	@ 0x3a
 800b14a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	3302      	adds	r3, #2
 800b150:	222f      	movs	r2, #47	@ 0x2f
 800b152:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	3303      	adds	r3, #3
 800b158:	2200      	movs	r2, #0
 800b15a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b15c:	2300      	movs	r3, #0
 800b15e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b160:	7dfb      	ldrb	r3, [r7, #23]
}
 800b162:	4618      	mov	r0, r3
 800b164:	371c      	adds	r7, #28
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	20000890 	.word	0x20000890

0800b174 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b17e:	2200      	movs	r2, #0
 800b180:	6839      	ldr	r1, [r7, #0]
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f7ff ffaa 	bl	800b0dc <FATFS_LinkDriverEx>
 800b188:	4603      	mov	r3, r0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
	...

0800b194 <siprintf>:
 800b194:	b40e      	push	{r1, r2, r3}
 800b196:	b500      	push	{lr}
 800b198:	b09c      	sub	sp, #112	@ 0x70
 800b19a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b19e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b1a0:	9002      	str	r0, [sp, #8]
 800b1a2:	9006      	str	r0, [sp, #24]
 800b1a4:	9107      	str	r1, [sp, #28]
 800b1a6:	9104      	str	r1, [sp, #16]
 800b1a8:	4808      	ldr	r0, [pc, #32]	@ (800b1cc <siprintf+0x38>)
 800b1aa:	4909      	ldr	r1, [pc, #36]	@ (800b1d0 <siprintf+0x3c>)
 800b1ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1b0:	9105      	str	r1, [sp, #20]
 800b1b2:	a902      	add	r1, sp, #8
 800b1b4:	6800      	ldr	r0, [r0, #0]
 800b1b6:	9301      	str	r3, [sp, #4]
 800b1b8:	f000 f9ce 	bl	800b558 <_svfiprintf_r>
 800b1bc:	9b02      	ldr	r3, [sp, #8]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	701a      	strb	r2, [r3, #0]
 800b1c2:	b01c      	add	sp, #112	@ 0x70
 800b1c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1c8:	b003      	add	sp, #12
 800b1ca:	4770      	bx	lr
 800b1cc:	20000024 	.word	0x20000024
 800b1d0:	ffff0208 	.word	0xffff0208

0800b1d4 <_vsniprintf_r>:
 800b1d4:	b530      	push	{r4, r5, lr}
 800b1d6:	4614      	mov	r4, r2
 800b1d8:	b09b      	sub	sp, #108	@ 0x6c
 800b1da:	4605      	mov	r5, r0
 800b1dc:	461a      	mov	r2, r3
 800b1de:	2c00      	cmp	r4, #0
 800b1e0:	da05      	bge.n	800b1ee <_vsniprintf_r+0x1a>
 800b1e2:	238b      	movs	r3, #139	@ 0x8b
 800b1e4:	6003      	str	r3, [r0, #0]
 800b1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ea:	b01b      	add	sp, #108	@ 0x6c
 800b1ec:	bd30      	pop	{r4, r5, pc}
 800b1ee:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b1f2:	9100      	str	r1, [sp, #0]
 800b1f4:	9104      	str	r1, [sp, #16]
 800b1f6:	4669      	mov	r1, sp
 800b1f8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b1fc:	bf14      	ite	ne
 800b1fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b202:	4623      	moveq	r3, r4
 800b204:	9302      	str	r3, [sp, #8]
 800b206:	9305      	str	r3, [sp, #20]
 800b208:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b20c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b210:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b212:	f000 f9a1 	bl	800b558 <_svfiprintf_r>
 800b216:	1c43      	adds	r3, r0, #1
 800b218:	bfbc      	itt	lt
 800b21a:	238b      	movlt	r3, #139	@ 0x8b
 800b21c:	602b      	strlt	r3, [r5, #0]
 800b21e:	2c00      	cmp	r4, #0
 800b220:	d0e3      	beq.n	800b1ea <_vsniprintf_r+0x16>
 800b222:	9b00      	ldr	r3, [sp, #0]
 800b224:	2200      	movs	r2, #0
 800b226:	701a      	strb	r2, [r3, #0]
 800b228:	e7df      	b.n	800b1ea <_vsniprintf_r+0x16>
	...

0800b22c <vsniprintf>:
 800b22c:	b507      	push	{r0, r1, r2, lr}
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	4613      	mov	r3, r2
 800b232:	460a      	mov	r2, r1
 800b234:	4601      	mov	r1, r0
 800b236:	4803      	ldr	r0, [pc, #12]	@ (800b244 <vsniprintf+0x18>)
 800b238:	6800      	ldr	r0, [r0, #0]
 800b23a:	f7ff ffcb 	bl	800b1d4 <_vsniprintf_r>
 800b23e:	b003      	add	sp, #12
 800b240:	f85d fb04 	ldr.w	pc, [sp], #4
 800b244:	20000024 	.word	0x20000024

0800b248 <memset>:
 800b248:	4402      	add	r2, r0
 800b24a:	4603      	mov	r3, r0
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d100      	bne.n	800b252 <memset+0xa>
 800b250:	4770      	bx	lr
 800b252:	f803 1b01 	strb.w	r1, [r3], #1
 800b256:	e7f9      	b.n	800b24c <memset+0x4>

0800b258 <__errno>:
 800b258:	4b01      	ldr	r3, [pc, #4]	@ (800b260 <__errno+0x8>)
 800b25a:	6818      	ldr	r0, [r3, #0]
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	20000024 	.word	0x20000024

0800b264 <__libc_init_array>:
 800b264:	b570      	push	{r4, r5, r6, lr}
 800b266:	4d0d      	ldr	r5, [pc, #52]	@ (800b29c <__libc_init_array+0x38>)
 800b268:	2600      	movs	r6, #0
 800b26a:	4c0d      	ldr	r4, [pc, #52]	@ (800b2a0 <__libc_init_array+0x3c>)
 800b26c:	1b64      	subs	r4, r4, r5
 800b26e:	10a4      	asrs	r4, r4, #2
 800b270:	42a6      	cmp	r6, r4
 800b272:	d109      	bne.n	800b288 <__libc_init_array+0x24>
 800b274:	4d0b      	ldr	r5, [pc, #44]	@ (800b2a4 <__libc_init_array+0x40>)
 800b276:	2600      	movs	r6, #0
 800b278:	4c0b      	ldr	r4, [pc, #44]	@ (800b2a8 <__libc_init_array+0x44>)
 800b27a:	f000 fc77 	bl	800bb6c <_init>
 800b27e:	1b64      	subs	r4, r4, r5
 800b280:	10a4      	asrs	r4, r4, #2
 800b282:	42a6      	cmp	r6, r4
 800b284:	d105      	bne.n	800b292 <__libc_init_array+0x2e>
 800b286:	bd70      	pop	{r4, r5, r6, pc}
 800b288:	f855 3b04 	ldr.w	r3, [r5], #4
 800b28c:	3601      	adds	r6, #1
 800b28e:	4798      	blx	r3
 800b290:	e7ee      	b.n	800b270 <__libc_init_array+0xc>
 800b292:	f855 3b04 	ldr.w	r3, [r5], #4
 800b296:	3601      	adds	r6, #1
 800b298:	4798      	blx	r3
 800b29a:	e7f2      	b.n	800b282 <__libc_init_array+0x1e>
 800b29c:	0800bf08 	.word	0x0800bf08
 800b2a0:	0800bf08 	.word	0x0800bf08
 800b2a4:	0800bf08 	.word	0x0800bf08
 800b2a8:	0800bf0c 	.word	0x0800bf0c

0800b2ac <__retarget_lock_acquire_recursive>:
 800b2ac:	4770      	bx	lr

0800b2ae <__retarget_lock_release_recursive>:
 800b2ae:	4770      	bx	lr

0800b2b0 <_free_r>:
 800b2b0:	b538      	push	{r3, r4, r5, lr}
 800b2b2:	4605      	mov	r5, r0
 800b2b4:	2900      	cmp	r1, #0
 800b2b6:	d041      	beq.n	800b33c <_free_r+0x8c>
 800b2b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2bc:	1f0c      	subs	r4, r1, #4
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	bfb8      	it	lt
 800b2c2:	18e4      	addlt	r4, r4, r3
 800b2c4:	f000 f8e0 	bl	800b488 <__malloc_lock>
 800b2c8:	4a1d      	ldr	r2, [pc, #116]	@ (800b340 <_free_r+0x90>)
 800b2ca:	6813      	ldr	r3, [r2, #0]
 800b2cc:	b933      	cbnz	r3, 800b2dc <_free_r+0x2c>
 800b2ce:	6063      	str	r3, [r4, #4]
 800b2d0:	6014      	str	r4, [r2, #0]
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2d8:	f000 b8dc 	b.w	800b494 <__malloc_unlock>
 800b2dc:	42a3      	cmp	r3, r4
 800b2de:	d908      	bls.n	800b2f2 <_free_r+0x42>
 800b2e0:	6820      	ldr	r0, [r4, #0]
 800b2e2:	1821      	adds	r1, r4, r0
 800b2e4:	428b      	cmp	r3, r1
 800b2e6:	bf01      	itttt	eq
 800b2e8:	6819      	ldreq	r1, [r3, #0]
 800b2ea:	685b      	ldreq	r3, [r3, #4]
 800b2ec:	1809      	addeq	r1, r1, r0
 800b2ee:	6021      	streq	r1, [r4, #0]
 800b2f0:	e7ed      	b.n	800b2ce <_free_r+0x1e>
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	b10b      	cbz	r3, 800b2fc <_free_r+0x4c>
 800b2f8:	42a3      	cmp	r3, r4
 800b2fa:	d9fa      	bls.n	800b2f2 <_free_r+0x42>
 800b2fc:	6811      	ldr	r1, [r2, #0]
 800b2fe:	1850      	adds	r0, r2, r1
 800b300:	42a0      	cmp	r0, r4
 800b302:	d10b      	bne.n	800b31c <_free_r+0x6c>
 800b304:	6820      	ldr	r0, [r4, #0]
 800b306:	4401      	add	r1, r0
 800b308:	1850      	adds	r0, r2, r1
 800b30a:	6011      	str	r1, [r2, #0]
 800b30c:	4283      	cmp	r3, r0
 800b30e:	d1e0      	bne.n	800b2d2 <_free_r+0x22>
 800b310:	6818      	ldr	r0, [r3, #0]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	4408      	add	r0, r1
 800b316:	6053      	str	r3, [r2, #4]
 800b318:	6010      	str	r0, [r2, #0]
 800b31a:	e7da      	b.n	800b2d2 <_free_r+0x22>
 800b31c:	d902      	bls.n	800b324 <_free_r+0x74>
 800b31e:	230c      	movs	r3, #12
 800b320:	602b      	str	r3, [r5, #0]
 800b322:	e7d6      	b.n	800b2d2 <_free_r+0x22>
 800b324:	6820      	ldr	r0, [r4, #0]
 800b326:	1821      	adds	r1, r4, r0
 800b328:	428b      	cmp	r3, r1
 800b32a:	bf02      	ittt	eq
 800b32c:	6819      	ldreq	r1, [r3, #0]
 800b32e:	685b      	ldreq	r3, [r3, #4]
 800b330:	1809      	addeq	r1, r1, r0
 800b332:	6063      	str	r3, [r4, #4]
 800b334:	bf08      	it	eq
 800b336:	6021      	streq	r1, [r4, #0]
 800b338:	6054      	str	r4, [r2, #4]
 800b33a:	e7ca      	b.n	800b2d2 <_free_r+0x22>
 800b33c:	bd38      	pop	{r3, r4, r5, pc}
 800b33e:	bf00      	nop
 800b340:	200009e0 	.word	0x200009e0

0800b344 <sbrk_aligned>:
 800b344:	b570      	push	{r4, r5, r6, lr}
 800b346:	4e0f      	ldr	r6, [pc, #60]	@ (800b384 <sbrk_aligned+0x40>)
 800b348:	460c      	mov	r4, r1
 800b34a:	4605      	mov	r5, r0
 800b34c:	6831      	ldr	r1, [r6, #0]
 800b34e:	b911      	cbnz	r1, 800b356 <sbrk_aligned+0x12>
 800b350:	f000 fbaa 	bl	800baa8 <_sbrk_r>
 800b354:	6030      	str	r0, [r6, #0]
 800b356:	4621      	mov	r1, r4
 800b358:	4628      	mov	r0, r5
 800b35a:	f000 fba5 	bl	800baa8 <_sbrk_r>
 800b35e:	1c43      	adds	r3, r0, #1
 800b360:	d103      	bne.n	800b36a <sbrk_aligned+0x26>
 800b362:	f04f 34ff 	mov.w	r4, #4294967295
 800b366:	4620      	mov	r0, r4
 800b368:	bd70      	pop	{r4, r5, r6, pc}
 800b36a:	1cc4      	adds	r4, r0, #3
 800b36c:	f024 0403 	bic.w	r4, r4, #3
 800b370:	42a0      	cmp	r0, r4
 800b372:	d0f8      	beq.n	800b366 <sbrk_aligned+0x22>
 800b374:	1a21      	subs	r1, r4, r0
 800b376:	4628      	mov	r0, r5
 800b378:	f000 fb96 	bl	800baa8 <_sbrk_r>
 800b37c:	3001      	adds	r0, #1
 800b37e:	d1f2      	bne.n	800b366 <sbrk_aligned+0x22>
 800b380:	e7ef      	b.n	800b362 <sbrk_aligned+0x1e>
 800b382:	bf00      	nop
 800b384:	200009dc 	.word	0x200009dc

0800b388 <_malloc_r>:
 800b388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b38c:	1ccd      	adds	r5, r1, #3
 800b38e:	4606      	mov	r6, r0
 800b390:	f025 0503 	bic.w	r5, r5, #3
 800b394:	3508      	adds	r5, #8
 800b396:	2d0c      	cmp	r5, #12
 800b398:	bf38      	it	cc
 800b39a:	250c      	movcc	r5, #12
 800b39c:	2d00      	cmp	r5, #0
 800b39e:	db01      	blt.n	800b3a4 <_malloc_r+0x1c>
 800b3a0:	42a9      	cmp	r1, r5
 800b3a2:	d904      	bls.n	800b3ae <_malloc_r+0x26>
 800b3a4:	230c      	movs	r3, #12
 800b3a6:	6033      	str	r3, [r6, #0]
 800b3a8:	2000      	movs	r0, #0
 800b3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b484 <_malloc_r+0xfc>
 800b3b2:	f000 f869 	bl	800b488 <__malloc_lock>
 800b3b6:	f8d8 3000 	ldr.w	r3, [r8]
 800b3ba:	461c      	mov	r4, r3
 800b3bc:	bb44      	cbnz	r4, 800b410 <_malloc_r+0x88>
 800b3be:	4629      	mov	r1, r5
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	f7ff ffbf 	bl	800b344 <sbrk_aligned>
 800b3c6:	1c43      	adds	r3, r0, #1
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	d158      	bne.n	800b47e <_malloc_r+0xf6>
 800b3cc:	f8d8 4000 	ldr.w	r4, [r8]
 800b3d0:	4627      	mov	r7, r4
 800b3d2:	2f00      	cmp	r7, #0
 800b3d4:	d143      	bne.n	800b45e <_malloc_r+0xd6>
 800b3d6:	2c00      	cmp	r4, #0
 800b3d8:	d04b      	beq.n	800b472 <_malloc_r+0xea>
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	4639      	mov	r1, r7
 800b3de:	4630      	mov	r0, r6
 800b3e0:	eb04 0903 	add.w	r9, r4, r3
 800b3e4:	f000 fb60 	bl	800baa8 <_sbrk_r>
 800b3e8:	4581      	cmp	r9, r0
 800b3ea:	d142      	bne.n	800b472 <_malloc_r+0xea>
 800b3ec:	6821      	ldr	r1, [r4, #0]
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	1a6d      	subs	r5, r5, r1
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	f7ff ffa6 	bl	800b344 <sbrk_aligned>
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	d03a      	beq.n	800b472 <_malloc_r+0xea>
 800b3fc:	6823      	ldr	r3, [r4, #0]
 800b3fe:	442b      	add	r3, r5
 800b400:	6023      	str	r3, [r4, #0]
 800b402:	f8d8 3000 	ldr.w	r3, [r8]
 800b406:	685a      	ldr	r2, [r3, #4]
 800b408:	bb62      	cbnz	r2, 800b464 <_malloc_r+0xdc>
 800b40a:	f8c8 7000 	str.w	r7, [r8]
 800b40e:	e00f      	b.n	800b430 <_malloc_r+0xa8>
 800b410:	6822      	ldr	r2, [r4, #0]
 800b412:	1b52      	subs	r2, r2, r5
 800b414:	d420      	bmi.n	800b458 <_malloc_r+0xd0>
 800b416:	2a0b      	cmp	r2, #11
 800b418:	d917      	bls.n	800b44a <_malloc_r+0xc2>
 800b41a:	1961      	adds	r1, r4, r5
 800b41c:	42a3      	cmp	r3, r4
 800b41e:	6025      	str	r5, [r4, #0]
 800b420:	bf18      	it	ne
 800b422:	6059      	strne	r1, [r3, #4]
 800b424:	6863      	ldr	r3, [r4, #4]
 800b426:	bf08      	it	eq
 800b428:	f8c8 1000 	streq.w	r1, [r8]
 800b42c:	5162      	str	r2, [r4, r5]
 800b42e:	604b      	str	r3, [r1, #4]
 800b430:	4630      	mov	r0, r6
 800b432:	f000 f82f 	bl	800b494 <__malloc_unlock>
 800b436:	f104 000b 	add.w	r0, r4, #11
 800b43a:	1d23      	adds	r3, r4, #4
 800b43c:	f020 0007 	bic.w	r0, r0, #7
 800b440:	1ac2      	subs	r2, r0, r3
 800b442:	bf1c      	itt	ne
 800b444:	1a1b      	subne	r3, r3, r0
 800b446:	50a3      	strne	r3, [r4, r2]
 800b448:	e7af      	b.n	800b3aa <_malloc_r+0x22>
 800b44a:	6862      	ldr	r2, [r4, #4]
 800b44c:	42a3      	cmp	r3, r4
 800b44e:	bf0c      	ite	eq
 800b450:	f8c8 2000 	streq.w	r2, [r8]
 800b454:	605a      	strne	r2, [r3, #4]
 800b456:	e7eb      	b.n	800b430 <_malloc_r+0xa8>
 800b458:	4623      	mov	r3, r4
 800b45a:	6864      	ldr	r4, [r4, #4]
 800b45c:	e7ae      	b.n	800b3bc <_malloc_r+0x34>
 800b45e:	463c      	mov	r4, r7
 800b460:	687f      	ldr	r7, [r7, #4]
 800b462:	e7b6      	b.n	800b3d2 <_malloc_r+0x4a>
 800b464:	461a      	mov	r2, r3
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	42a3      	cmp	r3, r4
 800b46a:	d1fb      	bne.n	800b464 <_malloc_r+0xdc>
 800b46c:	2300      	movs	r3, #0
 800b46e:	6053      	str	r3, [r2, #4]
 800b470:	e7de      	b.n	800b430 <_malloc_r+0xa8>
 800b472:	230c      	movs	r3, #12
 800b474:	4630      	mov	r0, r6
 800b476:	6033      	str	r3, [r6, #0]
 800b478:	f000 f80c 	bl	800b494 <__malloc_unlock>
 800b47c:	e794      	b.n	800b3a8 <_malloc_r+0x20>
 800b47e:	6005      	str	r5, [r0, #0]
 800b480:	e7d6      	b.n	800b430 <_malloc_r+0xa8>
 800b482:	bf00      	nop
 800b484:	200009e0 	.word	0x200009e0

0800b488 <__malloc_lock>:
 800b488:	4801      	ldr	r0, [pc, #4]	@ (800b490 <__malloc_lock+0x8>)
 800b48a:	f7ff bf0f 	b.w	800b2ac <__retarget_lock_acquire_recursive>
 800b48e:	bf00      	nop
 800b490:	200009d8 	.word	0x200009d8

0800b494 <__malloc_unlock>:
 800b494:	4801      	ldr	r0, [pc, #4]	@ (800b49c <__malloc_unlock+0x8>)
 800b496:	f7ff bf0a 	b.w	800b2ae <__retarget_lock_release_recursive>
 800b49a:	bf00      	nop
 800b49c:	200009d8 	.word	0x200009d8

0800b4a0 <__ssputs_r>:
 800b4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a4:	461f      	mov	r7, r3
 800b4a6:	688e      	ldr	r6, [r1, #8]
 800b4a8:	4682      	mov	sl, r0
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	42be      	cmp	r6, r7
 800b4ae:	4690      	mov	r8, r2
 800b4b0:	680b      	ldr	r3, [r1, #0]
 800b4b2:	d82d      	bhi.n	800b510 <__ssputs_r+0x70>
 800b4b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b4bc:	d026      	beq.n	800b50c <__ssputs_r+0x6c>
 800b4be:	6965      	ldr	r5, [r4, #20]
 800b4c0:	6909      	ldr	r1, [r1, #16]
 800b4c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4c6:	eba3 0901 	sub.w	r9, r3, r1
 800b4ca:	1c7b      	adds	r3, r7, #1
 800b4cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4d0:	444b      	add	r3, r9
 800b4d2:	106d      	asrs	r5, r5, #1
 800b4d4:	429d      	cmp	r5, r3
 800b4d6:	bf38      	it	cc
 800b4d8:	461d      	movcc	r5, r3
 800b4da:	0553      	lsls	r3, r2, #21
 800b4dc:	d527      	bpl.n	800b52e <__ssputs_r+0x8e>
 800b4de:	4629      	mov	r1, r5
 800b4e0:	f7ff ff52 	bl	800b388 <_malloc_r>
 800b4e4:	4606      	mov	r6, r0
 800b4e6:	b360      	cbz	r0, 800b542 <__ssputs_r+0xa2>
 800b4e8:	464a      	mov	r2, r9
 800b4ea:	6921      	ldr	r1, [r4, #16]
 800b4ec:	f000 fafa 	bl	800bae4 <memcpy>
 800b4f0:	89a3      	ldrh	r3, [r4, #12]
 800b4f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b4f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4fa:	81a3      	strh	r3, [r4, #12]
 800b4fc:	6126      	str	r6, [r4, #16]
 800b4fe:	444e      	add	r6, r9
 800b500:	6165      	str	r5, [r4, #20]
 800b502:	eba5 0509 	sub.w	r5, r5, r9
 800b506:	6026      	str	r6, [r4, #0]
 800b508:	463e      	mov	r6, r7
 800b50a:	60a5      	str	r5, [r4, #8]
 800b50c:	42be      	cmp	r6, r7
 800b50e:	d900      	bls.n	800b512 <__ssputs_r+0x72>
 800b510:	463e      	mov	r6, r7
 800b512:	4632      	mov	r2, r6
 800b514:	4641      	mov	r1, r8
 800b516:	6820      	ldr	r0, [r4, #0]
 800b518:	f000 faac 	bl	800ba74 <memmove>
 800b51c:	68a3      	ldr	r3, [r4, #8]
 800b51e:	2000      	movs	r0, #0
 800b520:	1b9b      	subs	r3, r3, r6
 800b522:	60a3      	str	r3, [r4, #8]
 800b524:	6823      	ldr	r3, [r4, #0]
 800b526:	4433      	add	r3, r6
 800b528:	6023      	str	r3, [r4, #0]
 800b52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b52e:	462a      	mov	r2, r5
 800b530:	f000 fae5 	bl	800bafe <_realloc_r>
 800b534:	4606      	mov	r6, r0
 800b536:	2800      	cmp	r0, #0
 800b538:	d1e0      	bne.n	800b4fc <__ssputs_r+0x5c>
 800b53a:	6921      	ldr	r1, [r4, #16]
 800b53c:	4650      	mov	r0, sl
 800b53e:	f7ff feb7 	bl	800b2b0 <_free_r>
 800b542:	230c      	movs	r3, #12
 800b544:	f04f 30ff 	mov.w	r0, #4294967295
 800b548:	f8ca 3000 	str.w	r3, [sl]
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b552:	81a3      	strh	r3, [r4, #12]
 800b554:	e7e9      	b.n	800b52a <__ssputs_r+0x8a>
	...

0800b558 <_svfiprintf_r>:
 800b558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55c:	4698      	mov	r8, r3
 800b55e:	898b      	ldrh	r3, [r1, #12]
 800b560:	b09d      	sub	sp, #116	@ 0x74
 800b562:	4607      	mov	r7, r0
 800b564:	061b      	lsls	r3, r3, #24
 800b566:	460d      	mov	r5, r1
 800b568:	4614      	mov	r4, r2
 800b56a:	d510      	bpl.n	800b58e <_svfiprintf_r+0x36>
 800b56c:	690b      	ldr	r3, [r1, #16]
 800b56e:	b973      	cbnz	r3, 800b58e <_svfiprintf_r+0x36>
 800b570:	2140      	movs	r1, #64	@ 0x40
 800b572:	f7ff ff09 	bl	800b388 <_malloc_r>
 800b576:	6028      	str	r0, [r5, #0]
 800b578:	6128      	str	r0, [r5, #16]
 800b57a:	b930      	cbnz	r0, 800b58a <_svfiprintf_r+0x32>
 800b57c:	230c      	movs	r3, #12
 800b57e:	603b      	str	r3, [r7, #0]
 800b580:	f04f 30ff 	mov.w	r0, #4294967295
 800b584:	b01d      	add	sp, #116	@ 0x74
 800b586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b58a:	2340      	movs	r3, #64	@ 0x40
 800b58c:	616b      	str	r3, [r5, #20]
 800b58e:	2300      	movs	r3, #0
 800b590:	f8cd 800c 	str.w	r8, [sp, #12]
 800b594:	f04f 0901 	mov.w	r9, #1
 800b598:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800b73c <_svfiprintf_r+0x1e4>
 800b59c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b59e:	2320      	movs	r3, #32
 800b5a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5a4:	2330      	movs	r3, #48	@ 0x30
 800b5a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5aa:	4623      	mov	r3, r4
 800b5ac:	469a      	mov	sl, r3
 800b5ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5b2:	b10a      	cbz	r2, 800b5b8 <_svfiprintf_r+0x60>
 800b5b4:	2a25      	cmp	r2, #37	@ 0x25
 800b5b6:	d1f9      	bne.n	800b5ac <_svfiprintf_r+0x54>
 800b5b8:	ebba 0b04 	subs.w	fp, sl, r4
 800b5bc:	d00b      	beq.n	800b5d6 <_svfiprintf_r+0x7e>
 800b5be:	465b      	mov	r3, fp
 800b5c0:	4622      	mov	r2, r4
 800b5c2:	4629      	mov	r1, r5
 800b5c4:	4638      	mov	r0, r7
 800b5c6:	f7ff ff6b 	bl	800b4a0 <__ssputs_r>
 800b5ca:	3001      	adds	r0, #1
 800b5cc:	f000 80a7 	beq.w	800b71e <_svfiprintf_r+0x1c6>
 800b5d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5d2:	445a      	add	r2, fp
 800b5d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f000 809f 	beq.w	800b71e <_svfiprintf_r+0x1c6>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5e6:	f10a 0a01 	add.w	sl, sl, #1
 800b5ea:	9304      	str	r3, [sp, #16]
 800b5ec:	9307      	str	r3, [sp, #28]
 800b5ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5f8:	4654      	mov	r4, sl
 800b5fa:	2205      	movs	r2, #5
 800b5fc:	484f      	ldr	r0, [pc, #316]	@ (800b73c <_svfiprintf_r+0x1e4>)
 800b5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b602:	f000 fa61 	bl	800bac8 <memchr>
 800b606:	9a04      	ldr	r2, [sp, #16]
 800b608:	b9d8      	cbnz	r0, 800b642 <_svfiprintf_r+0xea>
 800b60a:	06d0      	lsls	r0, r2, #27
 800b60c:	bf44      	itt	mi
 800b60e:	2320      	movmi	r3, #32
 800b610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b614:	0711      	lsls	r1, r2, #28
 800b616:	bf44      	itt	mi
 800b618:	232b      	movmi	r3, #43	@ 0x2b
 800b61a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b61e:	f89a 3000 	ldrb.w	r3, [sl]
 800b622:	2b2a      	cmp	r3, #42	@ 0x2a
 800b624:	d015      	beq.n	800b652 <_svfiprintf_r+0xfa>
 800b626:	9a07      	ldr	r2, [sp, #28]
 800b628:	4654      	mov	r4, sl
 800b62a:	2000      	movs	r0, #0
 800b62c:	f04f 0c0a 	mov.w	ip, #10
 800b630:	4621      	mov	r1, r4
 800b632:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b636:	3b30      	subs	r3, #48	@ 0x30
 800b638:	2b09      	cmp	r3, #9
 800b63a:	d94b      	bls.n	800b6d4 <_svfiprintf_r+0x17c>
 800b63c:	b1b0      	cbz	r0, 800b66c <_svfiprintf_r+0x114>
 800b63e:	9207      	str	r2, [sp, #28]
 800b640:	e014      	b.n	800b66c <_svfiprintf_r+0x114>
 800b642:	eba0 0308 	sub.w	r3, r0, r8
 800b646:	46a2      	mov	sl, r4
 800b648:	fa09 f303 	lsl.w	r3, r9, r3
 800b64c:	4313      	orrs	r3, r2
 800b64e:	9304      	str	r3, [sp, #16]
 800b650:	e7d2      	b.n	800b5f8 <_svfiprintf_r+0xa0>
 800b652:	9b03      	ldr	r3, [sp, #12]
 800b654:	1d19      	adds	r1, r3, #4
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	9103      	str	r1, [sp, #12]
 800b65c:	bfbb      	ittet	lt
 800b65e:	425b      	neglt	r3, r3
 800b660:	f042 0202 	orrlt.w	r2, r2, #2
 800b664:	9307      	strge	r3, [sp, #28]
 800b666:	9307      	strlt	r3, [sp, #28]
 800b668:	bfb8      	it	lt
 800b66a:	9204      	strlt	r2, [sp, #16]
 800b66c:	7823      	ldrb	r3, [r4, #0]
 800b66e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b670:	d10a      	bne.n	800b688 <_svfiprintf_r+0x130>
 800b672:	7863      	ldrb	r3, [r4, #1]
 800b674:	2b2a      	cmp	r3, #42	@ 0x2a
 800b676:	d132      	bne.n	800b6de <_svfiprintf_r+0x186>
 800b678:	9b03      	ldr	r3, [sp, #12]
 800b67a:	3402      	adds	r4, #2
 800b67c:	1d1a      	adds	r2, r3, #4
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b684:	9203      	str	r2, [sp, #12]
 800b686:	9305      	str	r3, [sp, #20]
 800b688:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b74c <_svfiprintf_r+0x1f4>
 800b68c:	2203      	movs	r2, #3
 800b68e:	7821      	ldrb	r1, [r4, #0]
 800b690:	4650      	mov	r0, sl
 800b692:	f000 fa19 	bl	800bac8 <memchr>
 800b696:	b138      	cbz	r0, 800b6a8 <_svfiprintf_r+0x150>
 800b698:	eba0 000a 	sub.w	r0, r0, sl
 800b69c:	2240      	movs	r2, #64	@ 0x40
 800b69e:	9b04      	ldr	r3, [sp, #16]
 800b6a0:	3401      	adds	r4, #1
 800b6a2:	4082      	lsls	r2, r0
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	9304      	str	r3, [sp, #16]
 800b6a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ac:	2206      	movs	r2, #6
 800b6ae:	4824      	ldr	r0, [pc, #144]	@ (800b740 <_svfiprintf_r+0x1e8>)
 800b6b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6b4:	f000 fa08 	bl	800bac8 <memchr>
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	d036      	beq.n	800b72a <_svfiprintf_r+0x1d2>
 800b6bc:	4b21      	ldr	r3, [pc, #132]	@ (800b744 <_svfiprintf_r+0x1ec>)
 800b6be:	bb1b      	cbnz	r3, 800b708 <_svfiprintf_r+0x1b0>
 800b6c0:	9b03      	ldr	r3, [sp, #12]
 800b6c2:	3307      	adds	r3, #7
 800b6c4:	f023 0307 	bic.w	r3, r3, #7
 800b6c8:	3308      	adds	r3, #8
 800b6ca:	9303      	str	r3, [sp, #12]
 800b6cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6ce:	4433      	add	r3, r6
 800b6d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6d2:	e76a      	b.n	800b5aa <_svfiprintf_r+0x52>
 800b6d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6d8:	460c      	mov	r4, r1
 800b6da:	2001      	movs	r0, #1
 800b6dc:	e7a8      	b.n	800b630 <_svfiprintf_r+0xd8>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	3401      	adds	r4, #1
 800b6e2:	f04f 0c0a 	mov.w	ip, #10
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	9305      	str	r3, [sp, #20]
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6f0:	3a30      	subs	r2, #48	@ 0x30
 800b6f2:	2a09      	cmp	r2, #9
 800b6f4:	d903      	bls.n	800b6fe <_svfiprintf_r+0x1a6>
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d0c6      	beq.n	800b688 <_svfiprintf_r+0x130>
 800b6fa:	9105      	str	r1, [sp, #20]
 800b6fc:	e7c4      	b.n	800b688 <_svfiprintf_r+0x130>
 800b6fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800b702:	4604      	mov	r4, r0
 800b704:	2301      	movs	r3, #1
 800b706:	e7f0      	b.n	800b6ea <_svfiprintf_r+0x192>
 800b708:	ab03      	add	r3, sp, #12
 800b70a:	462a      	mov	r2, r5
 800b70c:	a904      	add	r1, sp, #16
 800b70e:	4638      	mov	r0, r7
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	4b0d      	ldr	r3, [pc, #52]	@ (800b748 <_svfiprintf_r+0x1f0>)
 800b714:	f3af 8000 	nop.w
 800b718:	1c42      	adds	r2, r0, #1
 800b71a:	4606      	mov	r6, r0
 800b71c:	d1d6      	bne.n	800b6cc <_svfiprintf_r+0x174>
 800b71e:	89ab      	ldrh	r3, [r5, #12]
 800b720:	065b      	lsls	r3, r3, #25
 800b722:	f53f af2d 	bmi.w	800b580 <_svfiprintf_r+0x28>
 800b726:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b728:	e72c      	b.n	800b584 <_svfiprintf_r+0x2c>
 800b72a:	ab03      	add	r3, sp, #12
 800b72c:	462a      	mov	r2, r5
 800b72e:	a904      	add	r1, sp, #16
 800b730:	4638      	mov	r0, r7
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	4b04      	ldr	r3, [pc, #16]	@ (800b748 <_svfiprintf_r+0x1f0>)
 800b736:	f000 f87d 	bl	800b834 <_printf_i>
 800b73a:	e7ed      	b.n	800b718 <_svfiprintf_r+0x1c0>
 800b73c:	0800becc 	.word	0x0800becc
 800b740:	0800bed6 	.word	0x0800bed6
 800b744:	00000000 	.word	0x00000000
 800b748:	0800b4a1 	.word	0x0800b4a1
 800b74c:	0800bed2 	.word	0x0800bed2

0800b750 <_printf_common>:
 800b750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b754:	4616      	mov	r6, r2
 800b756:	4698      	mov	r8, r3
 800b758:	688a      	ldr	r2, [r1, #8]
 800b75a:	4607      	mov	r7, r0
 800b75c:	690b      	ldr	r3, [r1, #16]
 800b75e:	460c      	mov	r4, r1
 800b760:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b764:	4293      	cmp	r3, r2
 800b766:	bfb8      	it	lt
 800b768:	4613      	movlt	r3, r2
 800b76a:	6033      	str	r3, [r6, #0]
 800b76c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b770:	b10a      	cbz	r2, 800b776 <_printf_common+0x26>
 800b772:	3301      	adds	r3, #1
 800b774:	6033      	str	r3, [r6, #0]
 800b776:	6823      	ldr	r3, [r4, #0]
 800b778:	0699      	lsls	r1, r3, #26
 800b77a:	bf42      	ittt	mi
 800b77c:	6833      	ldrmi	r3, [r6, #0]
 800b77e:	3302      	addmi	r3, #2
 800b780:	6033      	strmi	r3, [r6, #0]
 800b782:	6825      	ldr	r5, [r4, #0]
 800b784:	f015 0506 	ands.w	r5, r5, #6
 800b788:	d106      	bne.n	800b798 <_printf_common+0x48>
 800b78a:	f104 0a19 	add.w	sl, r4, #25
 800b78e:	68e3      	ldr	r3, [r4, #12]
 800b790:	6832      	ldr	r2, [r6, #0]
 800b792:	1a9b      	subs	r3, r3, r2
 800b794:	42ab      	cmp	r3, r5
 800b796:	dc2b      	bgt.n	800b7f0 <_printf_common+0xa0>
 800b798:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b79c:	6822      	ldr	r2, [r4, #0]
 800b79e:	3b00      	subs	r3, #0
 800b7a0:	bf18      	it	ne
 800b7a2:	2301      	movne	r3, #1
 800b7a4:	0692      	lsls	r2, r2, #26
 800b7a6:	d430      	bmi.n	800b80a <_printf_common+0xba>
 800b7a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b7ac:	4641      	mov	r1, r8
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	47c8      	blx	r9
 800b7b2:	3001      	adds	r0, #1
 800b7b4:	d023      	beq.n	800b7fe <_printf_common+0xae>
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	341a      	adds	r4, #26
 800b7ba:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b7be:	f003 0306 	and.w	r3, r3, #6
 800b7c2:	2b04      	cmp	r3, #4
 800b7c4:	bf0a      	itet	eq
 800b7c6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b7ca:	2500      	movne	r5, #0
 800b7cc:	6833      	ldreq	r3, [r6, #0]
 800b7ce:	f04f 0600 	mov.w	r6, #0
 800b7d2:	bf08      	it	eq
 800b7d4:	1aed      	subeq	r5, r5, r3
 800b7d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b7da:	bf08      	it	eq
 800b7dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	bfc4      	itt	gt
 800b7e4:	1a9b      	subgt	r3, r3, r2
 800b7e6:	18ed      	addgt	r5, r5, r3
 800b7e8:	42b5      	cmp	r5, r6
 800b7ea:	d11a      	bne.n	800b822 <_printf_common+0xd2>
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	e008      	b.n	800b802 <_printf_common+0xb2>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	4652      	mov	r2, sl
 800b7f4:	4641      	mov	r1, r8
 800b7f6:	4638      	mov	r0, r7
 800b7f8:	47c8      	blx	r9
 800b7fa:	3001      	adds	r0, #1
 800b7fc:	d103      	bne.n	800b806 <_printf_common+0xb6>
 800b7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b806:	3501      	adds	r5, #1
 800b808:	e7c1      	b.n	800b78e <_printf_common+0x3e>
 800b80a:	18e1      	adds	r1, r4, r3
 800b80c:	1c5a      	adds	r2, r3, #1
 800b80e:	2030      	movs	r0, #48	@ 0x30
 800b810:	3302      	adds	r3, #2
 800b812:	4422      	add	r2, r4
 800b814:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b818:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b81c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b820:	e7c2      	b.n	800b7a8 <_printf_common+0x58>
 800b822:	2301      	movs	r3, #1
 800b824:	4622      	mov	r2, r4
 800b826:	4641      	mov	r1, r8
 800b828:	4638      	mov	r0, r7
 800b82a:	47c8      	blx	r9
 800b82c:	3001      	adds	r0, #1
 800b82e:	d0e6      	beq.n	800b7fe <_printf_common+0xae>
 800b830:	3601      	adds	r6, #1
 800b832:	e7d9      	b.n	800b7e8 <_printf_common+0x98>

0800b834 <_printf_i>:
 800b834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b838:	7e0f      	ldrb	r7, [r1, #24]
 800b83a:	4691      	mov	r9, r2
 800b83c:	4680      	mov	r8, r0
 800b83e:	460c      	mov	r4, r1
 800b840:	2f78      	cmp	r7, #120	@ 0x78
 800b842:	469a      	mov	sl, r3
 800b844:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b846:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b84a:	d807      	bhi.n	800b85c <_printf_i+0x28>
 800b84c:	2f62      	cmp	r7, #98	@ 0x62
 800b84e:	d80a      	bhi.n	800b866 <_printf_i+0x32>
 800b850:	2f00      	cmp	r7, #0
 800b852:	f000 80d2 	beq.w	800b9fa <_printf_i+0x1c6>
 800b856:	2f58      	cmp	r7, #88	@ 0x58
 800b858:	f000 80b9 	beq.w	800b9ce <_printf_i+0x19a>
 800b85c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b860:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b864:	e03a      	b.n	800b8dc <_printf_i+0xa8>
 800b866:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b86a:	2b15      	cmp	r3, #21
 800b86c:	d8f6      	bhi.n	800b85c <_printf_i+0x28>
 800b86e:	a101      	add	r1, pc, #4	@ (adr r1, 800b874 <_printf_i+0x40>)
 800b870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b874:	0800b8cd 	.word	0x0800b8cd
 800b878:	0800b8e1 	.word	0x0800b8e1
 800b87c:	0800b85d 	.word	0x0800b85d
 800b880:	0800b85d 	.word	0x0800b85d
 800b884:	0800b85d 	.word	0x0800b85d
 800b888:	0800b85d 	.word	0x0800b85d
 800b88c:	0800b8e1 	.word	0x0800b8e1
 800b890:	0800b85d 	.word	0x0800b85d
 800b894:	0800b85d 	.word	0x0800b85d
 800b898:	0800b85d 	.word	0x0800b85d
 800b89c:	0800b85d 	.word	0x0800b85d
 800b8a0:	0800b9e1 	.word	0x0800b9e1
 800b8a4:	0800b90b 	.word	0x0800b90b
 800b8a8:	0800b99b 	.word	0x0800b99b
 800b8ac:	0800b85d 	.word	0x0800b85d
 800b8b0:	0800b85d 	.word	0x0800b85d
 800b8b4:	0800ba03 	.word	0x0800ba03
 800b8b8:	0800b85d 	.word	0x0800b85d
 800b8bc:	0800b90b 	.word	0x0800b90b
 800b8c0:	0800b85d 	.word	0x0800b85d
 800b8c4:	0800b85d 	.word	0x0800b85d
 800b8c8:	0800b9a3 	.word	0x0800b9a3
 800b8cc:	6833      	ldr	r3, [r6, #0]
 800b8ce:	1d1a      	adds	r2, r3, #4
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	6032      	str	r2, [r6, #0]
 800b8d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e09d      	b.n	800ba1c <_printf_i+0x1e8>
 800b8e0:	6833      	ldr	r3, [r6, #0]
 800b8e2:	6820      	ldr	r0, [r4, #0]
 800b8e4:	1d19      	adds	r1, r3, #4
 800b8e6:	6031      	str	r1, [r6, #0]
 800b8e8:	0606      	lsls	r6, r0, #24
 800b8ea:	d501      	bpl.n	800b8f0 <_printf_i+0xbc>
 800b8ec:	681d      	ldr	r5, [r3, #0]
 800b8ee:	e003      	b.n	800b8f8 <_printf_i+0xc4>
 800b8f0:	0645      	lsls	r5, r0, #25
 800b8f2:	d5fb      	bpl.n	800b8ec <_printf_i+0xb8>
 800b8f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b8f8:	2d00      	cmp	r5, #0
 800b8fa:	da03      	bge.n	800b904 <_printf_i+0xd0>
 800b8fc:	232d      	movs	r3, #45	@ 0x2d
 800b8fe:	426d      	negs	r5, r5
 800b900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b904:	4859      	ldr	r0, [pc, #356]	@ (800ba6c <_printf_i+0x238>)
 800b906:	230a      	movs	r3, #10
 800b908:	e011      	b.n	800b92e <_printf_i+0xfa>
 800b90a:	6821      	ldr	r1, [r4, #0]
 800b90c:	6833      	ldr	r3, [r6, #0]
 800b90e:	0608      	lsls	r0, r1, #24
 800b910:	f853 5b04 	ldr.w	r5, [r3], #4
 800b914:	d402      	bmi.n	800b91c <_printf_i+0xe8>
 800b916:	0649      	lsls	r1, r1, #25
 800b918:	bf48      	it	mi
 800b91a:	b2ad      	uxthmi	r5, r5
 800b91c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b91e:	6033      	str	r3, [r6, #0]
 800b920:	4852      	ldr	r0, [pc, #328]	@ (800ba6c <_printf_i+0x238>)
 800b922:	bf14      	ite	ne
 800b924:	230a      	movne	r3, #10
 800b926:	2308      	moveq	r3, #8
 800b928:	2100      	movs	r1, #0
 800b92a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b92e:	6866      	ldr	r6, [r4, #4]
 800b930:	2e00      	cmp	r6, #0
 800b932:	60a6      	str	r6, [r4, #8]
 800b934:	bfa2      	ittt	ge
 800b936:	6821      	ldrge	r1, [r4, #0]
 800b938:	f021 0104 	bicge.w	r1, r1, #4
 800b93c:	6021      	strge	r1, [r4, #0]
 800b93e:	b90d      	cbnz	r5, 800b944 <_printf_i+0x110>
 800b940:	2e00      	cmp	r6, #0
 800b942:	d04b      	beq.n	800b9dc <_printf_i+0x1a8>
 800b944:	4616      	mov	r6, r2
 800b946:	fbb5 f1f3 	udiv	r1, r5, r3
 800b94a:	fb03 5711 	mls	r7, r3, r1, r5
 800b94e:	5dc7      	ldrb	r7, [r0, r7]
 800b950:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b954:	462f      	mov	r7, r5
 800b956:	460d      	mov	r5, r1
 800b958:	42bb      	cmp	r3, r7
 800b95a:	d9f4      	bls.n	800b946 <_printf_i+0x112>
 800b95c:	2b08      	cmp	r3, #8
 800b95e:	d10b      	bne.n	800b978 <_printf_i+0x144>
 800b960:	6823      	ldr	r3, [r4, #0]
 800b962:	07df      	lsls	r7, r3, #31
 800b964:	d508      	bpl.n	800b978 <_printf_i+0x144>
 800b966:	6923      	ldr	r3, [r4, #16]
 800b968:	6861      	ldr	r1, [r4, #4]
 800b96a:	4299      	cmp	r1, r3
 800b96c:	bfde      	ittt	le
 800b96e:	2330      	movle	r3, #48	@ 0x30
 800b970:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b974:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b978:	1b92      	subs	r2, r2, r6
 800b97a:	6122      	str	r2, [r4, #16]
 800b97c:	464b      	mov	r3, r9
 800b97e:	aa03      	add	r2, sp, #12
 800b980:	4621      	mov	r1, r4
 800b982:	4640      	mov	r0, r8
 800b984:	f8cd a000 	str.w	sl, [sp]
 800b988:	f7ff fee2 	bl	800b750 <_printf_common>
 800b98c:	3001      	adds	r0, #1
 800b98e:	d14a      	bne.n	800ba26 <_printf_i+0x1f2>
 800b990:	f04f 30ff 	mov.w	r0, #4294967295
 800b994:	b004      	add	sp, #16
 800b996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b99a:	6823      	ldr	r3, [r4, #0]
 800b99c:	f043 0320 	orr.w	r3, r3, #32
 800b9a0:	6023      	str	r3, [r4, #0]
 800b9a2:	2778      	movs	r7, #120	@ 0x78
 800b9a4:	4832      	ldr	r0, [pc, #200]	@ (800ba70 <_printf_i+0x23c>)
 800b9a6:	6823      	ldr	r3, [r4, #0]
 800b9a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b9ac:	061f      	lsls	r7, r3, #24
 800b9ae:	6831      	ldr	r1, [r6, #0]
 800b9b0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b9b4:	d402      	bmi.n	800b9bc <_printf_i+0x188>
 800b9b6:	065f      	lsls	r7, r3, #25
 800b9b8:	bf48      	it	mi
 800b9ba:	b2ad      	uxthmi	r5, r5
 800b9bc:	6031      	str	r1, [r6, #0]
 800b9be:	07d9      	lsls	r1, r3, #31
 800b9c0:	bf44      	itt	mi
 800b9c2:	f043 0320 	orrmi.w	r3, r3, #32
 800b9c6:	6023      	strmi	r3, [r4, #0]
 800b9c8:	b11d      	cbz	r5, 800b9d2 <_printf_i+0x19e>
 800b9ca:	2310      	movs	r3, #16
 800b9cc:	e7ac      	b.n	800b928 <_printf_i+0xf4>
 800b9ce:	4827      	ldr	r0, [pc, #156]	@ (800ba6c <_printf_i+0x238>)
 800b9d0:	e7e9      	b.n	800b9a6 <_printf_i+0x172>
 800b9d2:	6823      	ldr	r3, [r4, #0]
 800b9d4:	f023 0320 	bic.w	r3, r3, #32
 800b9d8:	6023      	str	r3, [r4, #0]
 800b9da:	e7f6      	b.n	800b9ca <_printf_i+0x196>
 800b9dc:	4616      	mov	r6, r2
 800b9de:	e7bd      	b.n	800b95c <_printf_i+0x128>
 800b9e0:	6833      	ldr	r3, [r6, #0]
 800b9e2:	6825      	ldr	r5, [r4, #0]
 800b9e4:	1d18      	adds	r0, r3, #4
 800b9e6:	6961      	ldr	r1, [r4, #20]
 800b9e8:	6030      	str	r0, [r6, #0]
 800b9ea:	062e      	lsls	r6, r5, #24
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	d501      	bpl.n	800b9f4 <_printf_i+0x1c0>
 800b9f0:	6019      	str	r1, [r3, #0]
 800b9f2:	e002      	b.n	800b9fa <_printf_i+0x1c6>
 800b9f4:	0668      	lsls	r0, r5, #25
 800b9f6:	d5fb      	bpl.n	800b9f0 <_printf_i+0x1bc>
 800b9f8:	8019      	strh	r1, [r3, #0]
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	4616      	mov	r6, r2
 800b9fe:	6123      	str	r3, [r4, #16]
 800ba00:	e7bc      	b.n	800b97c <_printf_i+0x148>
 800ba02:	6833      	ldr	r3, [r6, #0]
 800ba04:	2100      	movs	r1, #0
 800ba06:	1d1a      	adds	r2, r3, #4
 800ba08:	6032      	str	r2, [r6, #0]
 800ba0a:	681e      	ldr	r6, [r3, #0]
 800ba0c:	6862      	ldr	r2, [r4, #4]
 800ba0e:	4630      	mov	r0, r6
 800ba10:	f000 f85a 	bl	800bac8 <memchr>
 800ba14:	b108      	cbz	r0, 800ba1a <_printf_i+0x1e6>
 800ba16:	1b80      	subs	r0, r0, r6
 800ba18:	6060      	str	r0, [r4, #4]
 800ba1a:	6863      	ldr	r3, [r4, #4]
 800ba1c:	6123      	str	r3, [r4, #16]
 800ba1e:	2300      	movs	r3, #0
 800ba20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba24:	e7aa      	b.n	800b97c <_printf_i+0x148>
 800ba26:	6923      	ldr	r3, [r4, #16]
 800ba28:	4632      	mov	r2, r6
 800ba2a:	4649      	mov	r1, r9
 800ba2c:	4640      	mov	r0, r8
 800ba2e:	47d0      	blx	sl
 800ba30:	3001      	adds	r0, #1
 800ba32:	d0ad      	beq.n	800b990 <_printf_i+0x15c>
 800ba34:	6823      	ldr	r3, [r4, #0]
 800ba36:	079b      	lsls	r3, r3, #30
 800ba38:	d413      	bmi.n	800ba62 <_printf_i+0x22e>
 800ba3a:	68e0      	ldr	r0, [r4, #12]
 800ba3c:	9b03      	ldr	r3, [sp, #12]
 800ba3e:	4298      	cmp	r0, r3
 800ba40:	bfb8      	it	lt
 800ba42:	4618      	movlt	r0, r3
 800ba44:	e7a6      	b.n	800b994 <_printf_i+0x160>
 800ba46:	2301      	movs	r3, #1
 800ba48:	4632      	mov	r2, r6
 800ba4a:	4649      	mov	r1, r9
 800ba4c:	4640      	mov	r0, r8
 800ba4e:	47d0      	blx	sl
 800ba50:	3001      	adds	r0, #1
 800ba52:	d09d      	beq.n	800b990 <_printf_i+0x15c>
 800ba54:	3501      	adds	r5, #1
 800ba56:	68e3      	ldr	r3, [r4, #12]
 800ba58:	9903      	ldr	r1, [sp, #12]
 800ba5a:	1a5b      	subs	r3, r3, r1
 800ba5c:	42ab      	cmp	r3, r5
 800ba5e:	dcf2      	bgt.n	800ba46 <_printf_i+0x212>
 800ba60:	e7eb      	b.n	800ba3a <_printf_i+0x206>
 800ba62:	2500      	movs	r5, #0
 800ba64:	f104 0619 	add.w	r6, r4, #25
 800ba68:	e7f5      	b.n	800ba56 <_printf_i+0x222>
 800ba6a:	bf00      	nop
 800ba6c:	0800bedd 	.word	0x0800bedd
 800ba70:	0800beee 	.word	0x0800beee

0800ba74 <memmove>:
 800ba74:	4288      	cmp	r0, r1
 800ba76:	b510      	push	{r4, lr}
 800ba78:	eb01 0402 	add.w	r4, r1, r2
 800ba7c:	d902      	bls.n	800ba84 <memmove+0x10>
 800ba7e:	4284      	cmp	r4, r0
 800ba80:	4623      	mov	r3, r4
 800ba82:	d807      	bhi.n	800ba94 <memmove+0x20>
 800ba84:	1e43      	subs	r3, r0, #1
 800ba86:	42a1      	cmp	r1, r4
 800ba88:	d008      	beq.n	800ba9c <memmove+0x28>
 800ba8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba92:	e7f8      	b.n	800ba86 <memmove+0x12>
 800ba94:	4402      	add	r2, r0
 800ba96:	4601      	mov	r1, r0
 800ba98:	428a      	cmp	r2, r1
 800ba9a:	d100      	bne.n	800ba9e <memmove+0x2a>
 800ba9c:	bd10      	pop	{r4, pc}
 800ba9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800baa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800baa6:	e7f7      	b.n	800ba98 <memmove+0x24>

0800baa8 <_sbrk_r>:
 800baa8:	b538      	push	{r3, r4, r5, lr}
 800baaa:	2300      	movs	r3, #0
 800baac:	4d05      	ldr	r5, [pc, #20]	@ (800bac4 <_sbrk_r+0x1c>)
 800baae:	4604      	mov	r4, r0
 800bab0:	4608      	mov	r0, r1
 800bab2:	602b      	str	r3, [r5, #0]
 800bab4:	f7f5 fc5a 	bl	800136c <_sbrk>
 800bab8:	1c43      	adds	r3, r0, #1
 800baba:	d102      	bne.n	800bac2 <_sbrk_r+0x1a>
 800babc:	682b      	ldr	r3, [r5, #0]
 800babe:	b103      	cbz	r3, 800bac2 <_sbrk_r+0x1a>
 800bac0:	6023      	str	r3, [r4, #0]
 800bac2:	bd38      	pop	{r3, r4, r5, pc}
 800bac4:	200009d4 	.word	0x200009d4

0800bac8 <memchr>:
 800bac8:	b2c9      	uxtb	r1, r1
 800baca:	4603      	mov	r3, r0
 800bacc:	4402      	add	r2, r0
 800bace:	b510      	push	{r4, lr}
 800bad0:	4293      	cmp	r3, r2
 800bad2:	4618      	mov	r0, r3
 800bad4:	d101      	bne.n	800bada <memchr+0x12>
 800bad6:	2000      	movs	r0, #0
 800bad8:	e003      	b.n	800bae2 <memchr+0x1a>
 800bada:	7804      	ldrb	r4, [r0, #0]
 800badc:	3301      	adds	r3, #1
 800bade:	428c      	cmp	r4, r1
 800bae0:	d1f6      	bne.n	800bad0 <memchr+0x8>
 800bae2:	bd10      	pop	{r4, pc}

0800bae4 <memcpy>:
 800bae4:	440a      	add	r2, r1
 800bae6:	1e43      	subs	r3, r0, #1
 800bae8:	4291      	cmp	r1, r2
 800baea:	d100      	bne.n	800baee <memcpy+0xa>
 800baec:	4770      	bx	lr
 800baee:	b510      	push	{r4, lr}
 800baf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baf4:	4291      	cmp	r1, r2
 800baf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bafa:	d1f9      	bne.n	800baf0 <memcpy+0xc>
 800bafc:	bd10      	pop	{r4, pc}

0800bafe <_realloc_r>:
 800bafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb02:	4680      	mov	r8, r0
 800bb04:	4615      	mov	r5, r2
 800bb06:	460c      	mov	r4, r1
 800bb08:	b921      	cbnz	r1, 800bb14 <_realloc_r+0x16>
 800bb0a:	4611      	mov	r1, r2
 800bb0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb10:	f7ff bc3a 	b.w	800b388 <_malloc_r>
 800bb14:	b92a      	cbnz	r2, 800bb22 <_realloc_r+0x24>
 800bb16:	f7ff fbcb 	bl	800b2b0 <_free_r>
 800bb1a:	2400      	movs	r4, #0
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb22:	f000 f81a 	bl	800bb5a <_malloc_usable_size_r>
 800bb26:	4285      	cmp	r5, r0
 800bb28:	4606      	mov	r6, r0
 800bb2a:	d802      	bhi.n	800bb32 <_realloc_r+0x34>
 800bb2c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bb30:	d8f4      	bhi.n	800bb1c <_realloc_r+0x1e>
 800bb32:	4629      	mov	r1, r5
 800bb34:	4640      	mov	r0, r8
 800bb36:	f7ff fc27 	bl	800b388 <_malloc_r>
 800bb3a:	4607      	mov	r7, r0
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d0ec      	beq.n	800bb1a <_realloc_r+0x1c>
 800bb40:	42b5      	cmp	r5, r6
 800bb42:	462a      	mov	r2, r5
 800bb44:	4621      	mov	r1, r4
 800bb46:	bf28      	it	cs
 800bb48:	4632      	movcs	r2, r6
 800bb4a:	f7ff ffcb 	bl	800bae4 <memcpy>
 800bb4e:	4621      	mov	r1, r4
 800bb50:	4640      	mov	r0, r8
 800bb52:	463c      	mov	r4, r7
 800bb54:	f7ff fbac 	bl	800b2b0 <_free_r>
 800bb58:	e7e0      	b.n	800bb1c <_realloc_r+0x1e>

0800bb5a <_malloc_usable_size_r>:
 800bb5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb5e:	1f18      	subs	r0, r3, #4
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	bfbc      	itt	lt
 800bb64:	580b      	ldrlt	r3, [r1, r0]
 800bb66:	18c0      	addlt	r0, r0, r3
 800bb68:	4770      	bx	lr
	...

0800bb6c <_init>:
 800bb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6e:	bf00      	nop
 800bb70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb72:	bc08      	pop	{r3}
 800bb74:	469e      	mov	lr, r3
 800bb76:	4770      	bx	lr

0800bb78 <_fini>:
 800bb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb7a:	bf00      	nop
 800bb7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb7e:	bc08      	pop	{r3}
 800bb80:	469e      	mov	lr, r3
 800bb82:	4770      	bx	lr
